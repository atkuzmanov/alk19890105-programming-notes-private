<!DOCTYPE html>
<!-- saved from url=(0045)http://zetcode.com/java/comparablecomparator/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Java Comparable Comparator - comparing objects with Comparable and Comparator</title>
<link rel="stylesheet" href="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/format3.css" type="text/css">

<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="keywords" content="Java, Comparable, Comparator">
<meta name="description" content="Java Comparable Comparator tutorial shows how 
to compare objects in Java with Comparable and Comparator.">
<meta name="author" content="Jan Bodnar">

<script src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/sdk.js" async="" crossorigin="anonymous"></script><script id="facebook-jssdk" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/sdk(1).js"></script><script id="twitter-wjs" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/widgets.js"></script><script async="" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/analytics.js"></script><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-5536206-1', 'auto');
  ga('send', 'pageview');

</script>

<script charset="utf-8" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/button.550007e6cc79c00bac51111d8131d860.js"></script><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_dialog_advanced{border-radius:8px;padding:10px}.fb_dialog_content{background:#fff;color:#373737}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{left:5px;right:auto;top:5px}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{height:100%;left:0;margin:0;overflow:visible;position:absolute;top:-10000px;transform:none;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{background:none;height:auto;min-height:initial;min-width:initial;width:auto}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{clear:both;color:#fff;display:block;font-size:18px;padding-top:20px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .4);bottom:0;left:0;min-height:100%;position:absolute;right:0;top:0;width:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_mobile .fb_dialog_iframe{position:sticky;top:0}.fb_dialog_content .dialog_header{background:linear-gradient(from(#738aba), to(#2c4987));border-bottom:1px solid;border-color:#043b87;box-shadow:white 0 1px 1px -1px inset;color:#fff;font:bold 14px Helvetica, sans-serif;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:linear-gradient(from(#4267B2), to(#2a4887));background-clip:padding-box;border:1px solid #29487d;border-radius:3px;display:inline-block;line-height:18px;margin-top:3px;max-width:85px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{background:none;border:none;color:#fff;font:bold 12px Helvetica, sans-serif;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #4a4a4a;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f5f6f7;border:1px solid #4a4a4a;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-position:50% 50%;background-repeat:no-repeat;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}</style></head>


<body>

<div class="container">

<div id="wide_ad" class="rtow">
<script async="" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/f.txt"></script>
<!-- 160x600, August 2011 -->
<ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9706709751191532" data-ad-slot="2484182563"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

<div id="ebooks" class="ltow">
    
<h2>Ebooks</h2>

<ul>
<li><a href="http://zetcode.com/ebooks/advancedpyqt5/">PyQt5 ebook</a></li>
<li><a href="http://zetcode.com/ebooks/tkinter/">Tkinter ebook</a></li>
<li><a href="http://zetcode.com/ebooks/sqlitepython/">SQLite Python</a></li>
<li><a href="http://zetcode.com/ebooks/advancedwxpython/">wxPython ebook</a></li>
<li><a href="http://zetcode.com/ebooks/windowsapi/">Windows API ebook</a></li>
<li><a href="http://zetcode.com/ebooks/advancedjavaswing/">Java Swing ebook</a></li>
<li><a href="http://zetcode.com/ebooks/mysqljava/">MySQL Java ebook</a></li>
</ul>

</div>

<div class="content">

<header>

<nav>
<a href="http://zetcode.com/" title="Home">Home</a>
<a class="nav_r" title="Subscribe to ZetCode news" href="http://zetcode.us13.list-manage.com/subscribe?u=9def9ccd4c70dbbaf691f90fc&amp;id=6556210f80">Subscribe</a>
</nav>

</header>


<h1>Java Comparable and Comparator</h1>

<p>
Java Comparable and Comparator tutorial shows how to compare objects in Java with 
Comparable and Comparator interfaces. Comparing two objects is essential when
doing sorting.
</p>

<div class="social">

<div class="fb-like fb_iframe_widget" data-href="http://zetcode.com/java/comparablecomparator/" data-layout="button_count" data-action="like" data-show-faces="false" data-share="true" fb-xfbml-state="rendered" fb-iframe-plugin-query="action=like&amp;app_id=&amp;container_width=705&amp;href=http%3A%2F%2Fzetcode.com%2Fjava%2Fcomparablecomparator%2F&amp;layout=button_count&amp;locale=en_US&amp;sdk=joey&amp;share=true&amp;show_faces=false"><span style="vertical-align: bottom; width: 122px; height: 20px;"><iframe name="f319bb582f5a508" width="1000px" height="1000px" title="fb:like Facebook Social Plugin" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" allow="encrypted-media" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/like.html" style="border: none; visibility: visible; width: 122px; height: 20px;" class=""></iframe></span></div>

<iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" style="position: static; visibility: visible; width: 61px; height: 20px;" title="Twitter Tweet Button" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/tweet_button.4f8aea4342a4ada72cba2bdffcff6b4d.en.html"></iframe>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id))
{js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 
'twitter-wjs');</script>

</div>

<p>
When working with custom Java objects to perform comparisons, we can use 
<code>Comparable</code> or <code>Comparator</code> interfaces.
</p>

<h2>Java Comparable</h2>

<p>
The <code>Comparable</code> interface imposes a total ordering on the objects of 
each class that implements it. This ordering is referred to as the class's 
natural ordering. The class's <code>compareTo()</code> method has to be 
implemented to provide the natural comparison.
</p>

<div class="hor">
<script async="" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/f.txt"></script>
<!-- horizontal -->
<ins class="adsbygoogle" style="display:inline-block;width:468px;height:60px" data-ad-client="ca-pub-9706709751191532" data-ad-slot="1734478269"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

<h2>Java Comparator</h2>

<p>
The <code>Comparator</code> interface imposes a total ordering on some collection 
of objects. Comparators can be passed to a sort method 
(such as <code>Collections.sort()</code> or <code>Arrays.sort()</code>) to allow 
precise control over the sort order. Comparators can also be used to control the 
order of certain data structures (such as sorted sets or sorted maps), or to 
provide an ordering for collections of objects that don't have a natural ordering.
</p>

<h2>Comparable vs Comparator</h2>

<p>
The following two lists summarize the differences between the two interfaces.
</p>

<h3>Java Comparable</h3>

<ul>
    <li>must define <code>o1.compareTo(o2)</code></li>
    <li>used to implement natural ordering of objects</li>
    <li>we must modify the class whose instances we want to sort</li>
    <li>it's in the same class</li>
    <li>only one implementation </li>
    <li>implemented frequently in the API by: String, Wrapper classes, Date, Calendar</li>
</ul>

<h3>Java Comparator</h3>

   <ul>
    <li>must define <code>compare(o1, o2)</code></li>
    <li>multiple ways of comparing two instances of a type - e.g. compare 
        people by age, name</li>
    <li>we can provide comparators for classes that we do not control</li>
    <li>we can have multiple implementations of comparators</li>
    <li>meant to be implemented to sort instances of third-party classes</li>
</ul>


<h2>Java built-in Comparator example</h2>

<p>
Java language offers some built-int Comparators.
</p>

<div class="codehead">JavaBuiltInComparatorEx.java</div>
<pre class="code">package com.zetcode;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class JavaBuiltInComparatorEx {

    public static void main(String[] args) {

        List&lt;String&gt; words = new ArrayList&lt;&gt;();

        words.add("dog");
        words.add("pen");
        words.add("sky");
        words.add("rock");
        words.add("den");
        words.add("fountain");

        words.sort(Comparator.naturalOrder());
        words.forEach(System.out::println);

        words.sort(Comparator.reverseOrder());
        words.forEach(System.out::println);
    }
}
</pre>

<p>
In the example, we sort an array of words in ascending and descending orders. 
</p>

<pre class="explanation">words.sort(Comparator.naturalOrder());
</pre>

<p>
The <code>Comparator.naturalOrder()</code> returns a built-in natural order
<code>Comparator</code>. 
</p>

<pre class="explanation">words.sort(Comparator.reverseOrder());
</pre>

<p>
The <code>Comparator.reverseOrder()</code> returns a comparator that imposes 
the reverse of the natural ordering.
</p>


<h2>Comparator.comparingInt</h2>

<p>
The <code>Comparator.comparingInt()</code> method extracts the int sort key
from the provided type and compares by that key.
</p>

<div class="codehead">JavaBuiltInComparatorEx2.java</div>
<pre class="code">package com.zetcode;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

class Person {

    private String name;
    private int age;

    public String getName() {
        return name;
    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {

        this.age = age;
    };

    public int getAge() {

        return this.age;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("Person{");
        sb.append("name='").append(name).append('\'');
        sb.append(", age=").append(age);
        sb.append('}');
        return sb.toString();
    }
}

public class JavaBuiltInComparatorEx2 {

    public static void main(String[] args) {

        Person p1 = new Person("Robert", 23);
        Person p2 = new Person("Monika", 18);
        Person p3 = new Person("Tom", 37);
        Person p4 = new Person("Elisabeth", 31);

        List&lt;Person&gt; vals = Arrays.asList( p1, p2, p3, p4 );

        vals.sort(Comparator.comparingInt(Person::getAge));
        vals.forEach(System.out::println);
    }
}
</pre>

<p>
In the example, we compare <code>Person</code> objects by their age utilizing
<code>Comparator.comparingInt()</code> method.
</p>

<pre>Person{name='Monika', age=18}
Person{name='Robert', age=23}
Person{name='Elisabeth', age=31}
Person{name='Tom', age=37}
</pre>

<p>
The objects are sorted by age.
</p>

<h2>Multiple Comparators</h2>

<p>
With <code>Comparator.thenComparing()</code> method, we can use multiple 
comparators when sorting objects.
</p>

<div class="codehead">JavaMultipleComparatorsEx.java</div>
<pre class="code">package com.zetcode;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

// Comparing list of objects by multiple object fields

class Person {

    private String name;
    private int age;
    private String city;

    public Person(String name, int age, String city) {
        this.name = name;
        this.age = age;
        this.city = city;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("Person{");
        sb.append("name='").append(name).append('\'');
        sb.append(", age=").append(age);
        sb.append(", city='").append(city).append('\'');
        sb.append('}');
        return sb.toString();
    }
}

public class JavaMultipleComparatorsEx {

    public static void main(String[] args) {

        List&lt;Person&gt; persons = Arrays.asList(
                new Person("Peter", 23, "New York"),
                new Person("Sarah", 13, "Las Vegas"),
                new Person("Lucy", 33, "Toronto"),
                new Person("Sarah", 21, "New York"),
                new Person("Tom", 18, "Toronto"),
                new Person("Robert", 23, "San Diego"),
                new Person("Lucy", 23, "Los Angeles"),
                new Person("Sam", 36, "Dallas"),
                new Person("Elisabeth", 31, "New York"),
                new Person("Ruth", 29, "New York"),
                new Person("Sarah", 41, "New York")
        );

        persons.sort(Comparator.comparing(Person::getName)
                .thenComparing(Person::getCity)
                .thenComparing(Person::getAge));

        persons.forEach(System.out::println);
    }
}
</pre>

<p>
We have a list of <code>Person</code> objects. We compare the objects
by their name, then by their city and finally by their age.
</p>

<pre class="explanation">persons.sort(Comparator.comparing(Person::getName)
        .thenComparing(Person::getCity)
        .thenComparing(Person::getAge));
</pre>

<p>
The <code>Comparator.thenComparing()</code> method allows us to apply multiply
comparators to the sorting operation.
</p>

<pre>Person{name='Elisabeth', age=31, city='New York'}
Person{name='Lucy', age=23, city='Los Angeles'}
Person{name='Lucy', age=33, city='Toronto'}
Person{name='Peter', age=23, city='New York'}
Person{name='Robert', age=23, city='San Diego'}
Person{name='Ruth', age=29, city='New York'}
Person{name='Sam', age=36, city='Dallas'}
Person{name='Sarah', age=13, city='Las Vegas'}
Person{name='Sarah', age=21, city='New York'}
Person{name='Sarah', age=41, city='New York'}
Person{name='Tom', age=18, city='Toronto'}
</pre>

<p>
This is the output.
</p>

<h2>Java custom Comparator</h2>

<p>
In the next example, we create a custom <code>Comparator</code>.
</p>

<div class="codehead">JavaCustomComparator.java</div>
<pre class="code">package com.zetcode;

import java.util.Arrays;
import java.util.List;

public class JavaCustomComparatorEx {

    public static void main(String[] args) {

        List&lt;String&gt; words = Arrays.asList("pen", "blue", "atom", "to",
                "ecclesiastical", "abbey", "car", "ten", "desk", "slim",
                "journey", "forest", "landscape", "achievement", "Antarctica");

        words.sort((e1, e2) -&gt; e1.length() - e2.length());

        words.forEach(System.out::println);

        words.sort((e1, e2) -&gt;  e2.length() - e1.length() );

        words.forEach(System.out::println);
    }
}
</pre>

<p>
We have a list of words. This time we compare the words by their length.
</p>

<pre class="explanation">words.sort((e1, e2) -&gt; e1.length() - e2.length());
</pre>

<p>
This custom comparator is used to sort the words by their size in ascending
order.
</p>

<pre class="explanation">words.sort((e1, e2) -&gt;  e2.length() - e1.length() );
</pre>

<p>
In the second case, the words are sorted in descending order.
</p>

<pre>to
pen
car
ten
blue
atom
desk
slim
abbey
forest
journey
landscape
Antarctica
achievement
ecclesiastical
ecclesiastical
achievement
Antarctica
landscape
journey
forest
abbey
blue
atom
desk
slim
pen
car
ten
to
</pre>

<p>
This is the output.
</p>

<h2>Java custom Comparator II</h2>

<p>
In the following example, we create two custom comparators.
</p>

<div class="codehead">.java</div>
<pre class="code">package com.zetcode;

import java.util.Arrays;
import java.util.Comparator;

// Comparing objects with Comparator in array

class Car {

    private String name;
    private int price;

    public Car(String name, int price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("Car{");
        sb.append("name='").append(name).append('\'');
        sb.append(", price=").append(price);
        sb.append('}');
        return sb.toString();
    }
}

class CompareByPrice implements Comparator&lt;Car&gt; {

    @Override
    public int compare(Car c1, Car c2) {

        return c1.getPrice() - c2.getPrice();
    }
}

class CompareByName implements Comparator&lt;Car&gt; {

    @Override
    public int compare(Car c1, Car c2) {

        return c1.getName().compareTo(c2.getName());
    }
}

public class JavaCustomComparatorEx2 {

    public static void main(String[] args) {

        Car[] cars = {
                new Car("Volvo", 23400), new Car("Mazda", 13700),
                new Car("Porsche", 353800), new Car("Skoda", 8900),
                new Car("Volkswagen", 19900)
        };

        System.out.println("Comparison by price:");

        Arrays.sort(cars, new CompareByPrice());

        for (Car car : cars) {

            System.out.println(car);
        }

        System.out.println();

        System.out.println("Comparison by name:");

        Arrays.sort(cars, new CompareByName());

        for (Car car : cars) {

            System.out.println(car);
        }
    }
}
</pre>

<p>
We have an array of <code>Car</code> objects. We create two custom comparators
to compare the objects by their name and by their price.
</p>

<pre class="explanation">class CompareByPrice implements Comparator&lt;Car&gt; {

    @Override
    public int compare(Car c1, Car c2) {

        return c1.getPrice() - c2.getPrice();
    }
}
...
Arrays.sort(cars, new CompareByPrice());
</pre>

<p>
The custom <code>CompareByPrice</code> comparator implements the <code>Comparator</code>
interface; forcing us to implement the <code>compare()</code> method. 
Our implementation compares the car objects by their price.
</p>

<pre class="explanation">class CompareByName implements Comparator&lt;Car&gt; {

    @Override
    public int compare(Car c1, Car c2) {

        return c1.getName().compareTo(c2.getName());
    }
}
...
Arrays.sort(cars, new CompareByName());
</pre>

<p>
In the second case, we are comparing car objects by their name. 
</p>

<pre>Comparison by price:
Car{name='Skoda', price=8900}
Car{name='Mazda', price=13700}
Car{name='Volkswagen', price=19900}
Car{name='Volvo', price=23400}
Car{name='Porsche', price=353800}

Comparison by name:
Car{name='Mazda', price=13700}
Car{name='Porsche', price=353800}
Car{name='Skoda', price=8900}
Car{name='Volkswagen', price=19900}
Car{name='Volvo', price=23400}
</pre>

<p>
This is the outplut.
</p>


<h2>Java Comparable example</h2>

<p>
In the following example, we compare objects with <code>Comparable</code>.
</p>

<div class="codehead">JavaComparableEx.java</div>
<pre class="code">package com.zetcode;

import java.util.Arrays;
import java.util.Comparator;

class Card implements Comparable&lt;Card&gt; {

    @Override
    public int compareTo(Card o) {

        return Comparator.comparing(Card::getValue)
                .thenComparing(Card::getSuit)
                .compare(this, o);
    }

    public enum Suits {
        SPADES,
        CLUBS,
        HEARTS,
        DIAMONDS
    }

    public enum Values {
        TWO,
        THREE,
        FOUR,
        FIVE,
        SIX,
        SEVEN,
        EIGHT,
        NINE,
        TEN,
        JACK,
        QUEEN,
        KING,
        ACE,
    }

    private Suits suit;
    private Values value;

    public Card(Values value, Suits suit) {
        this.value = value;
        this.suit = suit;
    }

    public Values getValue() {
        return value;
    }

    public Suits getSuit() {
        return suit;
    }

    public void showCard() {
       
        value = getValue();
        suit = getSuit();

        System.out.println(value + " of " + suit);
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("Card{");
        sb.append("suit=").append(suit);
        sb.append(", value=").append(value);
        sb.append('}');
        return sb.toString();
    }
}

public class JavaComparableEx {

    public static void main(String[] args) {

        Card[] cards = {
                new Card(Card.Values.KING, Card.Suits.DIAMONDS),
                new Card(Card.Values.FIVE, Card.Suits.HEARTS),
                new Card(Card.Values.ACE, Card.Suits.CLUBS),
                new Card(Card.Values.NINE, Card.Suits.SPADES),
                new Card(Card.Values.JACK, Card.Suits.SPADES),
                new Card(Card.Values.JACK, Card.Suits.DIAMONDS),};

        for (Card card: cards) {

            System.out.println(card);
        }
    }
}
</pre>

<p>
We have a list of <code>Card</code> objects. Each card has a value and belongs
to a suit. We implement to <code>Comparable</code> interface to provide
some natural ordering to the objects of <code>Card</code> class.
</p>

<pre class="explanation">@Override
public int compareTo(Card o) {

    return Comparator.comparing(Card::getValue)
            .thenComparing(Card::getSuit)
            .compare(this, o);
}
</pre>

<p>
We implement the <code>compareTo()</code> method. We compare the cards first
by their value and then by their suit.
</p>

<pre>Card{suit=HEARTS, value=FIVE}
Card{suit=SPADES, value=NINE}
Card{suit=SPADES, value=JACK}
Card{suit=DIAMONDS, value=JACK}
Card{suit=DIAMONDS, value=KING}
Card{suit=CLUBS, value=ACE}
</pre>

<p>
This is the output.
</p>

<p>
In this tutorial, we have shown how to compare objects in Java using <code>Comparable</code>
and <code>Comparator</code>.
You might also be interested in the related tutorials: 
<a href="http://zetcode.com/lang/java/">Java tutorial</a>,
<a href="http://zetcode.com/articles/javareadtext/">Reading text files in Java</a>, and
<a href="http://zetcode.com/articles/javafilterlist/">Filtering a list in Java</a>.
</p>

<div class="big_hor">
<script async="" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/f.txt"></script>
<!-- big_horizontal -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-9706709751191532" data-ad-slot="2904953388"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

<footer>

<nav>
<a href="http://zetcode.com/">Home</a>  <a href="http://zetcode.com/java/comparablecomparator/#">Top of Page</a>
</nav>

<div class="signature">
<a href="http://zetcode.com/">ZetCode</a> last modified April 28, 2018  <span class="copyright">© 2007 - 2020 Jan Bodnar</span>
<span>Follow on <a href="https://www.facebook.com/zetcode7/">Facebook</a></span>
</div>

</footer>

</div> <!-- content -->

</div> <!-- container -->

<!-- Silktide Cookie -->
<script>
    window.cookieconsent_options = {"message":"This website uses cookies to ensure you get the best experience on our website",
    "dismiss":"Got it!","learnMore":"More info","link":null,"theme":"dark-floating"};
</script>

<script src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/cookieconsent.min.js"></script>

<div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; width: 0px; height: 0px;"><div></div></div></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.8";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>



<iframe scrolling="no" frameborder="0" allowtransparency="true" src="./Java Comparable Comparator - comparing objects with Comparable and Comparator_files/widget_iframe.4f8aea4342a4ada72cba2bdffcff6b4d.html" title="Twitter settings iframe" style="display: none;"></iframe></body></html>
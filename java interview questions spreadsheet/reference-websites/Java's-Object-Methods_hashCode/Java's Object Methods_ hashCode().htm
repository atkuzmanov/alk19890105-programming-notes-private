<!DOCTYPE html>
<!-- saved from url=(0053)https://stackabuse.com/javas-object-methods-hashcode/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script src="./Java&#39;s Object Methods_ hashCode()_files/525232124909042" async=""></script><script async="" src="./Java&#39;s Object Methods_ hashCode()_files/fbevents.js"></script><script async="" src="./Java&#39;s Object Methods_ hashCode()_files/analytics.js"></script><script id="repixel" async="" src="./Java&#39;s Object Methods_ hashCode()_files/r.js"></script><script type="text/javascript" src="./Java&#39;s Object Methods_ hashCode()_files/cmp.complete.bundle.js"></script><script type="text/javascript" async="" src="./Java&#39;s Object Methods_ hashCode()_files/videoplayer.js"></script><script type="text/javascript" async="" src="./Java&#39;s Object Methods_ hashCode()_files/prebid.js"></script>
	
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>Java's Object Methods: hashCode()</title>
    <meta name="HandheldFriendly" content="True">
	<meta name="keywords" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<!-- fav icons -->
	<!--<link rel="shortcut icon" href="/favicon.ico">-->
	<link rel="apple-touch-icon" href="https://stackabuse.com/assets/images/apple-touch-icon.png?v=8b761e8043">
	<link rel="apple-touch-icon" sizes="72x72" href="https://stackabuse.com/assets/images/apple-touch-icon-72x72.png?v=8b761e8043">
	<link rel="apple-touch-icon" sizes="114x114" href="https://stackabuse.com/assets/images/apple-touch-icon-114x114.png?v=8b761e8043">
    <!-- header scripts -->
    <script async="" type="text/javascript" src="./Java&#39;s Object Methods_ hashCode()_files/gpt.js"></script><script type="text/javascript" src="./Java&#39;s Object Methods_ hashCode()_files/3873.js"></script><style type="text/css">.waldo-sticky-footer{position: fixed; width: 100%; bottom: 0px; left: 0px; text-align: center; z-index: 9000;}.waldo-sticky-footer iframe, .waldo-sticky-footer div {margin-left: auto;margin-right: auto;}.waldo-sticky-sidebar{position: fixed; top: 10px;z-index: 90}.waldo-sticky-css{position: sticky; top: 10px; z-index: 90}.waldo-overlay{position: fixed;height: 100%;width: 100%;top: 0;left: 0;z-index: 105;background: rgba(0,0,0,0.7);}#waldo-counter {position: absolute;bottom: 0;right: 0;color: #fff;font-size: 30px;padding: 15px;}.waldo-bfleft {position: fixed; left: 0; top: 10px;z-index:101;}.waldo-bfright {position: fixed; right: 0; top: 10px;z-index:101;}#waldo-tag-6038 {clear: both !important;}div[class^="app_gdpr-"] a {color: #41afbb !important; text-decoration: underline !important}#waldo-close-button a {border: 1px solid rgba(0,0,0,.35);padding: 3px;font-size: 12px;color: #fff;font-weight: bold;background-color: #777;}</style><script type="text/javascript">googletag.cmd.push(function() {gptAdSlots[3874] = googletag.defineSlot('/124067137/stackabuse300x250FL_1', [[300, 250], [300, 600]], 'waldo-tag-3874').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[300, 250], [300, 600]]).addSize([768, 0], [[300, 250], [300, 600]]).addSize([0, 0], [[300, 250], [300, 600]]).build()).addService(googletag.pubads());gptAdSlots[3875] = googletag.defineSlot('/8491498/stackabuse300x250FL_1_Universal_Passback_5c8a5d10788bc', [300, 250], 'waldo-tag-3875').addService(googletag.pubads());gptAdSlots[3876] = googletag.defineSlot('/124067137/stackabuse300x250FL_2', [[300, 250], [300, 600]], 'waldo-tag-3876').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[300, 250], [300, 600]]).addSize([768, 0], [[300, 250], [300, 600]]).addSize([0, 0], [[300, 250], [300, 600]]).build()).addService(googletag.pubads());gptAdSlots[3877] = googletag.defineSlot('/8491498/stackabuse300x250FL_2_Universal_Passback_5c8a5d13f3b0f', [300, 250], 'waldo-tag-3877').addService(googletag.pubads());gptAdSlots[3878] = googletag.defineSlot('/124067137/stackabuse728x90FS_1', [[728, 90], [320, 50]], 'waldo-tag-3878').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[320, 50]]).addSize([0, 0], [[320, 50]]).build()).addService(googletag.pubads());gptAdSlots[3879] = googletag.defineSlot('/8491498/stackabuse728x90FS_1_Universal_Passback_5c8a5d17af7f4', [[728, 90], [320, 50]], 'waldo-tag-3879').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[320, 50]]).addSize([0, 0], [[320, 50]]).build()).addService(googletag.pubads());gptAdSlots[3880] = googletag.defineSlot('/124067137/stackabuse728x90FS_2', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-3880').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[3881] = googletag.defineSlot('/8491498/stackabuse728x90FS_2_Universal_Passback_5c8a5d1c6686c', [[728, 90], [300, 250]], 'waldo-tag-3881').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());gptAdSlots[3884] = googletag.defineSlot('/124067137/stackabuse728x90FS_3', [[728, 90], [300, 250], [320, 50]], 'waldo-tag-3884').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90], [300, 250]]).addSize([768, 0], [[300, 250], [320, 50]]).addSize([0, 0], [[300, 250], [320, 50]]).build()).addService(googletag.pubads());gptAdSlots[3885] = googletag.defineSlot('/8491498/stackabuse728x90FS_3_Universal_Passback_5c8ab6465375f', [[728, 90], [300, 250]], 'waldo-tag-3885').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();googletag.pubads().addEventListener('impressionViewable', function(event) {hb_refresh(event); hb_sroll_pause(event);});googletag.pubads().addEventListener('slotRenderEnded', function(event) {waldoAddCloseBtn(event); waldoPassbackInit(event);waldoInterstitialInit(event);})});</script>
	<!-- stylesheets -->
    <link href="./Java&#39;s Object Methods_ hashCode()_files/css" rel="stylesheet">
	<link rel="stylesheet" href="./Java&#39;s Object Methods_ hashCode()_files/bootstrap.min.css">
	<link rel="stylesheet" href="./Java&#39;s Object Methods_ hashCode()_files/font-awesome.min.css">
	<link rel="stylesheet" type="text/css" href="./Java&#39;s Object Methods_ hashCode()_files/screen.css">
	<link rel="stylesheet" type="text/css" href="./Java&#39;s Object Methods_ hashCode()_files/atom_one_dark.css">
	<script>
/*====================================================
  THEME SETTINGS & GLOBAL VARIABLES
====================================================*/
//  1. Disqus comment settings
var disqus_shortname = 'stackabuse'; // required: replace example with your forum shortname

//	2. Sidebar Position
var sidebar_left = false; // Set true or flase for positioning sidebar on left

//  3. Recent Post count
var recent_post_count = 3;

//	4. Google+ badge settings
var badge_type = 'page'; // person / page / community ----- three type of google badge
var google_plus_url = 'https://plus.google.com/111813546240107028721';

//	5. Facebook Page Setting
var facebook_page_url = 'https://www.facebook.com/stackabuse';

//	6. Twitter Setting
var twitter_url = 'https://twitter.com/ScottWRobinson';
var twitter_widget_id = '722928793669607425';
var number_of_tweet = 3;

//	7. Mailchimp signup form Setting
var mailchimp_form_url = '//stackabuse.us10.list-manage.com/subscribe/post?u=90b216fdbe02b25619ec94fc3&amp;id=bc2bb312cd';
var success_message = "Please check your inbox and confirm your email address. Thank you!";

//	8. Flickr Setting
//var flickr_id = '52617155@N08';
var flickr_id = '';

// 9. Adsense Channels
var adsense_tag_to_channel_name = {
    'node': 'sa-topic-node-js',
    'javascript': 'sa-topic-javascript',
    'python': 'sa-topic-python',
    'java': 'sa-topic-java',
    'machine learning': 'sa-topic-machine-learning',
    'artificial intelligence': 'sa-topic-ai',
    'tensorflow': 'sa-topic-tensorflow',
    'scikit-learn': 'sa-topic-scikit-learn',
    'algorithms': 'sa-topic-algorithms',
    'data structures': 'sa-topic-data-structures',
    'aws': 'sa-topic-aws',
    'apache': 'sa-topic-apache',
    'django': 'sa-topic-django',
    'flask': 'sa-topic-flask',
    'shell': 'sa-topic-shell',
    'bash': 'sa-topic-bash',
    'npm': 'sa-topic-npm',
    'unix': 'sa-topic-unix',
    'linux': 'sa-topic-linux',
    'json': 'sa-topic-json',
    'maven': 'sa-topic-maven',
    'web framework': 'sa-topic-web-framework',
    'security': 'sa-topic-security',
    'arduino': 'sa-topic-arduino',
    'express': 'sa-topic-express-js',
    'es6': 'sa-topic-es6',
    'mongodb': 'sa-topic-mongodb',
    'how to': 'sa-topic-how-to',
};
var adsense_author_to_channel_name = {
    'Scott Robinson': 'sa-author-scott-robinson',
    'Frank Hofmann': 'sa-author-frank-hofmann',
    'Adam McQuistan': 'sa-author-adam-mcquistan',
    'Tendai Mutunhire': 'sa-author-tendai-mutunhire',
    'Guest Contributor': 'sa-author-guest-contributor',
    'Mihajlo Pavloski': 'sa-author-mihajlo-pavloski',
    'Esther Vaati': 'sa-author-esther-vaati',
    'Adnan Rahic': 'sa-author-adnan-rahic',
    'Sam Galizia': 'sa-author-sam-galizia',
};
var adsense_channel_name_to_id = {
    'sa-author-scott-robinson': '5091228512',
    'sa-author-frank-hofmann': '5574923176',
    'sa-author-adam-mcquistan': '5470502461',
    'sa-author-tendai-mutunhire': '4157420794',
    'sa-author-guest-contributor': '9218175780',
    'sa-author-mihajlo-pavloski': '2081921796',
    'sa-author-esther-vaati': '9026604091',
    'sa-author-adnan-rahic': '5829595117',
    'sa-author-sam-galizia': '1890350103',
    'sa-topic-node-js': '9234966588',
    'sa-topic-javascript': '4871736666',
    'sa-topic-python': '6017776300',
    'sa-topic-java': '4704694632',
    'sa-topic-machine-learning': '2618830613',
    'sa-topic-ai': '7679585600',
    'sa-topic-tensorflow': '2325943302',
    'sa-topic-scikit-learn': '8801095589',
    'sa-topic-algorithms': '9664898345',
    'sa-topic-data-structures': '8884856065',
    'sa-topic-aws': '6294351744',
    'sa-topic-apache': '4220999970',
    'sa-topic-django': '2399338763',
    'sa-topic-flask': '3357197212',
    'sa-topic-shell': '7386698293',
    'sa-topic-bash': '6588621943',
    'sa-topic-npm': '8417952206',
    'sa-topic-unix': '4912578190',
    'sa-topic-linux': '4029428281',
    'sa-topic-json': '7104870536',
    'sa-topic-maven': '2286414858',
    'sa-topic-web-framework': '4321551251',
    'sa-topic-security': '8660251512',
    'sa-topic-arduino': '2649376939',
    'sa-topic-express-js': '3008469582',
    'sa-topic-es6': '3447453289',
    'sa-topic-mongodb': '9382306243',
    'sa-topic-how-to': '5443061231',
    'sa-position-sidebar-top': '9190734552',
    'sa-position-sidebar-middle': '5600217174',
    'sa-position-sidebar-bottom': '3770886911',
    'sa-position-content-top': '4789698384',
    'sa-position-content-middle': '7686081194',
    'sa-position-content-bottom': '4576223195',
};
</script>    <link rel="shortcut icon" href="https://stackabuse.com/favicon.ico" type="image/x-icon">
    <link rel="canonical" href="https://stackabuse.com/javas-object-methods-hashcode/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="Stack Abuse">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Java&#39;s Object Methods: hashCode()">
    <meta property="og:description" content="Introduction This article is a continuation of a series of articles describing the often forgotten about methods of the Java language&#39;s base Object class. The following are the methods of the base Java Object which are present in all Java objects due to the implicit inheritance of Object. toString toClass">
    <meta property="og:url" content="https://stackabuse.com/javas-object-methods-hashcode/">
    <meta property="article:published_time" content="2018-10-16T13:52:00.000Z">
    <meta property="article:modified_time" content="2019-08-30T04:36:39.000Z">
    <meta property="article:tag" content="java">
    
    <meta property="article:author" content="https://www.facebook.com/adam.hittle.7">
    <meta name="twitter:card" content="summary">
    <meta name="twitter:title" content="Java&#39;s Object Methods: hashCode()">
    <meta name="twitter:description" content="Introduction This article is a continuation of a series of articles describing the often forgotten about methods of the Java language&#39;s base Object class. The following are the methods of the base Java Object which are present in all Java objects due to the implicit inheritance of Object. toString toClass">
    <meta name="twitter:url" content="https://stackabuse.com/javas-object-methods-hashcode/">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Adam McQuistan">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="java">
    <meta name="twitter:site" content="@ScottWRobinson">
    <meta name="twitter:creator" content="@adamjmcquistan">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Stack Abuse",
        "logo": {
            "@type": "ImageObject",
            "url": "https://stackabuse.com/favicon.ico",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Adam McQuistan",
        "image": {
            "@type": "ImageObject",
            "url": "https://stackabuse.com/content/images/2017/11/linkedinphoto.png",
            "width": 400,
            "height": 400
        },
        "url": "https://stackabuse.com/author/adam/",
        "sameAs": [
            "https://thecodinginterface.com/",
            "https://www.facebook.com/adam.hittle.7",
            "https://twitter.com/adamjmcquistan"
        ]
    },
    "headline": "Java&#x27;s Object Methods: hashCode()",
    "url": "https://stackabuse.com/javas-object-methods-hashcode/",
    "datePublished": "2018-10-16T13:52:00.000Z",
    "dateModified": "2019-08-30T04:36:39.000Z",
    "keywords": "java",
    "description": "Introduction This article is a continuation of a series of articles describing the often forgotten about methods of the Java language&#x27;s base Object class. The following are the methods of the base Java Object which are present in all Java objects due to the implicit inheritance of Object. toString toClass",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://stackabuse.com/"
    }
}
    </script>

    <script src="./Java&#39;s Object Methods_ hashCode()_files/ghost-sdk.min.js"></script>
<script>
ghost.init({
	clientId: "ghost-frontend",
	clientSecret: "952da4a040f4"
});
</script>
    <meta name="generator" content="Ghost 2.23">
    <link rel="alternate" type="application/rss+xml" title="Stack Abuse" href="https://stackabuse.com/rss/">
    <script type="text/javascript" src="./Java&#39;s Object Methods_ hashCode()_files/jquery.min.js"></script>
<!-- Repixel Code -->
<script>
  (function(w, d, s, id, src){
  w.Repixel = r = {
    init: function(id) {
      w.repixelId = id;
    }
  };
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)){ return; }
  js = d.createElement(s); 
  js.id = id;
  js.async = true;
  js.onload = function(){
      Repixel.init(w.repixelId);
  };
  js.src = src;
  fjs.parentNode.insertBefore(js, fjs);
  }(window, document, 'script', 'repixel', 
  'https://sdk.repixel.co/r.js'));
  Repixel.init('5cefff7fce3aad00089e44e5');
</script>
<!-- Repixel Code -->
<script type="text/javascript" async="" src="./Java&#39;s Object Methods_ hashCode()_files/embed.js"></script><script async="" type="text/javascript" src="./Java&#39;s Object Methods_ hashCode()_files/count.js"></script><style type="text/css">.hljs-ln{border-collapse:collapse}.hljs-ln td{padding:0}.hljs-ln-n:before{content:attr(data-line-number)}</style><link rel="preload" href="./Java&#39;s Object Methods_ hashCode()_files/f.txt" as="script"><script type="text/javascript" src="./Java&#39;s Object Methods_ hashCode()_files/f.txt"></script><link rel="preload" href="./Java&#39;s Object Methods_ hashCode()_files/f(1).txt" as="script"><script type="text/javascript" src="./Java&#39;s Object Methods_ hashCode()_files/f(1).txt"></script><script src="./Java&#39;s Object Methods_ hashCode()_files/pubads_impl_2019121002.js" async=""></script><script src="./Java&#39;s Object Methods_ hashCode()_files/count-data.js"></script><link rel="prefetch" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.91c71242b4acaa0ee7f9db125ef21f90.css"><link rel="prefetch" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.0b9bbdb3bc568241a5d1d7626947e8b0.js"><link rel="prefetch" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.0523614fef9787c3e3459e0602078385.js"><link rel="prefetch" as="script" href="https://disqus.com/next/config.js"><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover, .MJXp-munder {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > *, .MJXp-munder > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><style>[data-ad-unit="LEFT_RAIL_DYNAMIC"]{display:none !important}</style><style>[data-ad-unit="LEFT_RAIL"]{display:none !important}</style><iframe src="./Java&#39;s Object Methods_ hashCode()_files/serve.html" id="bidt-sra" scrolling="no" allowtransparency="true" frameborder="0" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" sandbox="allow-forms allow-same-origin allow-scripts allow-top-navigation allow-popups" width="1" height="1"></iframe><style>[data-ad-unit="LEFT_RAIL_DYNAMIC"]{display:none !important}</style><style>[data-ad-unit="LEFT_RAIL"]{display:none !important}</style><img src="./Java&#39;s Object Methods_ hashCode()_files/notify"><img src="./Java&#39;s Object Methods_ hashCode()_files/notify(1)"><img src="./Java&#39;s Object Methods_ hashCode()_files/notify(2)"><img src="./Java&#39;s Object Methods_ hashCode()_files/notify(3)"></head>
<body class="post-template tag-java"><div id="MathJax_Message" style="display: none;"></div>
	<nav class="navbar navbar-default navbar-static-top">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
        <span class="sr-only">Toggle navigation</span>
        <i class="fa fa-bars"></i>
      </button>
      <a class="navbar-brand" href="https://stackabuse.com/">Stack <span style="color:#f16334;">Abuse</span></a>
    </div>
    <div id="navbar" class="navbar-collapse collapse">
      <ul class="nav navbar-nav">
	<li class="nav-node-js" role="presentation"><a href="https://stackabuse.com/tag/node/">Node.js</a></li>
	<li class="nav-python" role="presentation"><a href="https://stackabuse.com/tag/python">Python</a></li>
	<li class="nav-java" role="presentation"><a href="https://stackabuse.com/tag/java/">Java</a></li>
    <li class="nav-hireremote" role="presentation">
        <a rel="nofollow" target="_blank" href="https://hireremote.io/" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Nav-Link">
            Jobs
        </a>
    </li>
</ul>
      <!--<ul class="nav navbar-nav pull-right">
        <li role="presentation">
          <a class="btn btn-success nav-btn" href="http://jobs.stackabuse.com">Find a Job</a>
        </li>
        <li role="presentation">
          <a class="btn btn-danger nav-btn" href="http://jobs.stackabuse.com/post">Post a Job</a>
        </li>
      </ul>-->
    </div><!--/.nav-collapse -->
  </div>
</nav>
	<!-- start site's main content area -->
<section class="content-wrap">
	<div class="container">
		<div class="row">
			<!-- start main post area -->
			<div class="col-md-8 main-content">
				<!-- start post -->
				<article id="5d2e2f5a2ad4a010f9ee626d" class="post tag-java">
					<div class="post-head">
						<h2 class="post-title">Java's Object Methods: hashCode()</h2>
						<div class="post-meta">
							<span class="author">
                                By
                                <a rel="nofollow" target="_blank" href="https://twitter.com/adamjmcquistan">
                                    <i class="fa fa-twitter" style="color:#55acee;"></i>
                                    Adam McQuistan
                                </a>
                            </span> •
							<span class="date">October 16, 2018</span> •
							<span class="comment-count"><a href="https://stackabuse.com/javas-object-methods-hashcode/#disqus_thread">1 Comment</a></span>
						</div>
					</div>
                    <div class="post-ad">
                        <!-- 728x90/320x50 -->
<div id="waldo-tag-3878" data-processed="true"><script type="text/javascript">googletag.cmd.push(function() { googletag.display('waldo-tag-3878'); });</script><span id="_waldo-tag-3878-4-container"></span></div>                    </div>
					<div class="post-content">
						<!--kg-card-begin: markdown--><!--kg-card-begin: markdown--><h3 id="introduction">Introduction</h3>
<p>This article is a continuation of a series of articles describing the often forgotten about methods of the Java language's base Object class. The following are the methods of the base Java Object which are present in all Java objects due to the implicit inheritance of Object.</p>
<ul>
<li><a target="_blank" href="https://stackabuse.com/javas-object-methods-tostring/">toString</a></li>
<li><a target="_blank" href="https://stackabuse.com/javas-object-methods-getclass/">toClass</a></li>
<li><a target="_blank" href="https://stackabuse.com/javas-object-methods-equals-object/">equals</a></li>
<li>hashCode <em>(you are here)</em></li>
<li><a target="_blank" href="https://stackabuse.com/javas-object-methods-clone/">clone</a></li>
<li><a target="_blank" href="https://stackabuse.com/javas-object-methods-finalize/">finalize</a></li>
<li><a target="_blank" href="https://stackabuse.com/javas-object-methods-wait-notify/">wait &amp; notify</a></li>
</ul>
<p>The focus of this article is the <a rel="nofollow" target="_blank" href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()">hashCode()</a> method which is used to generate a numerical representation of the contents of an object and is used heavily in the collections framework.</p>
<h3 id="whythehashcodemethodisimportant">Why the hashCode() Method is Important</h3>
<p>The purpose of the <code>hashCode()</code> method is to provide a numeric representation of an object's contents so as to provide an alternate mechanism to loosely identify it.</p>
<p>By default the <code>hashCode()</code> returns an integer that represents the internal memory address of the object. Where this comes in handy is in the creation and use of an important computer science data structure called a <a rel="nofollow" target="_blank" href="https://en.wikipedia.org/wiki/Hash_table">hash table</a>. Hash tables map keys, which are values that result from a hash function (aka, <code>hashCode()</code> method), to a value of interest (i.e., the object the <code>hashCode()</code> method was executed on). This becomes a very useful feature when dealing with moderate-to-large collections of items, because it is usually a lot faster to compute a hash value compared to linearly searching a collection, or having to resize and copy items in an array backing a collection when it's limit is reached.</p>
<p>The driving feature behind an efficient hash table is the ability to create a hash that is adequately unique for each object. Buried in that last sentence is the reason why I emphasized the need to override both <code>equals(Object)</code> and <code>hashCode()</code> in the prior article.</p>
<p>If an object has implementation characteristics that require it to be logically distinct from others based on its content then it needs to produce as distinct a hash as reasonably possible. So two objects that are logically equivalent should produce the same hash, but it is sometimes unavoidable to have two logically different objects that may produce the same hash which is known as a <a rel="nofollow" target="_blank" href="https://en.wikipedia.org/wiki/Collision_(computer_science)">collision</a>. When collisions happen the colliding objects are placed in a metaphorical bucket and a secondary algorithm is used to differentiate them within their hash bucket.</p>
<h3 id="demonstratinghashtableusage">Demonstrating Hash Table Usage</h3>
<p>In Java the concept of a hash table is conceptualized in the java.util.Map interface and implemented in the java.util.HashMap class.</p>
<p>We'll demonstrate a hash table and why it is important to have a reasonably unique hash value computed by <code>hashCode()</code> when a class implementation warrants the notion of logical equality consider the following class and program.</p>
<p>Person.java</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">import</span> java.time.LocalDate;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String firstName;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String lastName;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LocalDate dob;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String firstName, String lastName, LocalDate dob)</span> </span>{
        <span class="hljs-keyword">this</span>.firstName = firstName;
        <span class="hljs-keyword">this</span>.lastName = lastName;
        <span class="hljs-keyword">this</span>.dob = dob;
    }

    <span class="hljs-comment">// omitting getters for brevity</span>

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        }
        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Person)) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        }
        Person p = (Person)o;
        <span class="hljs-keyword">return</span> firstName.equals(p.firstName)
                &amp;&amp; lastName.equals(p.lastName)
                &amp;&amp; dob.equals(p.dob);
    }
}
</code></pre>
<p>Main.java</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">import</span> java.time.LocalDate;
<span class="hljs-keyword">import</span> java.util.HashMap;
<span class="hljs-keyword">import</span> java.util.Map;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
        Map&lt;Person, String&gt; peopleMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
        Person me = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Adam"</span>, <span class="hljs-string">"McQuistan"</span>, LocalDate.parse(<span class="hljs-string">"1987-09-23"</span>));
        Person me2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Adam"</span>, <span class="hljs-string">"McQuistan"</span>, LocalDate.parse(<span class="hljs-string">"1987-09-23"</span>));
        System.out.println(<span class="hljs-string">"Default hash: "</span> + me.hashCode());
        System.out.println(<span class="hljs-string">"Default hash: "</span> + me2.hashCode());

        peopleMap.put(me, me.toString());
        System.out.println(<span class="hljs-string">"me and me2 same? "</span> + me.equals(me2));
        System.out.println(<span class="hljs-string">"me2 in here? "</span> + peopleMap.containsKey(me2));
    }
}
</code></pre>
<p>Output:</p>
<pre><code class="hljs yaml"><span class="hljs-string">Default</span> <span class="hljs-attr">hash:</span> <span class="hljs-number">1166726978</span>
<span class="hljs-string">Default</span> <span class="hljs-attr">hash:</span> <span class="hljs-number">95395916</span>
<span class="hljs-string">me</span> <span class="hljs-string">and</span> <span class="hljs-string">me2</span> <span class="hljs-string">same?</span> <span class="hljs-literal">true</span>
<span class="hljs-string">me2</span> <span class="hljs-string">in</span> <span class="hljs-string">here?</span> <span class="hljs-literal">false</span>
</code></pre>
<p>As you can see from the output the default hash of <code>me</code> and <code>me2</code> are not equal even though the custom implementation of <code>equals(Object)</code> indicates that they are logically the same. This results in two distinct entries in the hash table even though you would expect only one, which opens the doors to some nasty bugs in a program if it were to implement this code.</p>
<p>Let me improve the <code>Person</code> class by ensuring that the <code>hashCode()</code> method returns the same value for the equal instance objects <code>me</code> and <code>me2</code>, like so:</p>
<p>Person.java</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
    <span class="hljs-comment">// omitting all other stuff for brevity</span>

     <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-number">31</span>;
    }
}
</code></pre>
<p>Main.java</p><div><!-- 728x90/300x250/320x50 --><div id="waldo-tag-3880"><div id="_waldo-tag-3880-2-container" style="margin: auto; text-align: center;"><iframe id="waldo-tag-3880-2" scrolling="no" allowtransparency="true" frameborder="0" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" sandbox="allow-forms allow-same-origin allow-scripts allow-top-navigation allow-popups" width="728" height="90" src="./Java&#39;s Object Methods_ hashCode()_files/render.html">
    </iframe></div></div></div>
<pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> {
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> {
        Map&lt;Person, String&gt; peopleMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
        Person me = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Adam"</span>, <span class="hljs-string">"McQuistan"</span>, LocalDate.parse(<span class="hljs-string">"1987-09-23"</span>));
        Person me2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Adam"</span>, <span class="hljs-string">"McQuistan"</span>, LocalDate.parse(<span class="hljs-string">"1987-09-23"</span>));
        Person you = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Jane"</span>, <span class="hljs-string">"Doe"</span>, LocalDate.parse(<span class="hljs-string">"1999-12-25"</span>));
        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"Default hash: "</span> + me.hashCode());
        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"Default hash: "</span> + me2.hashCode());

        peopleMap.put(me, me.toString());
        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"me and me2 same? "</span> + me.<span class="hljs-keyword">equals</span>(me2));
        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"me2 in here? "</span> + peopleMap.containsKey(me2));

        peopleMap.put(me2, me2.toString());
        peopleMap.put(you, you.toString());
        <span class="hljs-keyword">for</span>(Person p : peopleMap.keySet()) {
            String txt = peopleMap.<span class="hljs-keyword">get</span>(p);
            System.<span class="hljs-keyword">out</span>.println(txt);
        }
    }
}
</code></pre>
<p>Output:</p>
<pre><code class="hljs xml">Default hash: 31
Default hash: 31
me and me2 same? true
me2 in here? true
<span class="hljs-tag">&lt;<span class="hljs-name">Person:</span> <span class="hljs-attr">firstName</span>=<span class="hljs-string">Adam,</span> <span class="hljs-attr">lastName</span>=<span class="hljs-string">McQuistan,</span> <span class="hljs-attr">dob</span>=<span class="hljs-string">1987-09-23</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">Person:</span> <span class="hljs-attr">firstName</span>=<span class="hljs-string">Jane,</span> <span class="hljs-attr">lastName</span>=<span class="hljs-string">Doe,</span> <span class="hljs-attr">dob</span>=<span class="hljs-string">1999-12-25</span>&gt;</span>
</code></pre>
<p>Ok, so now I have equal hash values for equal objects, but it is also clear that non-equal objects will also always have the same hash values.</p>
<p>First I will explain what is happening as the equal objects <code>me</code> and <code>me2</code> are added to the HashMap. When the <code>me2</code> <code>Person</code> instance is added to the HashMap already containing the <code>me</code> instance, the HashMap notices that the hash is the same and then it determines that they are also logically equivalent via the <code>equals(Object)</code> method. This results in the HashMap simply replacing the first <code>me</code> with the second <code>me2</code> at that location in the hash table.</p>
<p>Next comes the <code>you</code> instance, which again has the same hash value, but this time the HashMap identifies that it is logically different from the existing hash in that bucket <code>me2</code>. This leads to the HashMap adding the <code>you</code> instance to the bucket, turning that bucket into a list-like collection. For small numbers of collisions this doesn't have too great an impact, but in my example above, where every instance is guaranteed to have the same hash value, the bucket representing 31 in the HashMap will rapidly degrade to a poor implementation of a list for the entire HashMap.</p>
<p>At this point in time I would like to further demonstrate the ineffectiveness of this solution with concrete data to compare against the final implementation that will follow.</p>
<p>Below is a program that builds two equally sized collections, <code>peopleList</code> and <code>peopleMap</code>, of <code>Person</code> instances with equally sized random names and birthdays selected. I will measure the amount of time it takes to build the collections for a first comparison measurement. Next I will measure the amount of time it takes to search each collection for the existence of an equally placed known instance, <code>me</code>.</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">import</span> java.time.Duration;
<span class="hljs-keyword">import</span> java.time.LocalDate;
<span class="hljs-keyword">import</span> java.time.LocalDateTime;
<span class="hljs-keyword">import</span> java.util.ArrayList;
<span class="hljs-keyword">import</span> java.util.Arrays;
<span class="hljs-keyword">import</span> java.util.HashMap;
<span class="hljs-keyword">import</span> java.util.List;
<span class="hljs-keyword">import</span> java.util.Map;
<span class="hljs-keyword">import</span> java.util.Random;
<span class="hljs-keyword">import</span> java.util.stream.Collectors;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span>[] alphabet = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>.toCharArray();

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
        Person me = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Adam"</span>, <span class="hljs-string">"McQuistan"</span>, LocalDate.parse(<span class="hljs-string">"1987-09-23"</span>));

        LocalDateTime start = LocalDateTime.now();
        List&lt;Person&gt; peopleList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {
            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4999</span>) {
                peopleList.add(me);
            }
            peopleList.add(<span class="hljs-keyword">new</span> Person(getRandomName(), getRandomName(), getRandomDate()));
        }
        System.out.println(<span class="hljs-string">"Microseconds to build list: "</span> + getTimeElapsed(start, LocalDateTime.now()));

        start = LocalDateTime.now();
        Map&lt;Person, String&gt; peopleMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {
            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4999</span>) {
                peopleMap.put(me, me.toString());
            }
            Person p = <span class="hljs-keyword">new</span> Person(getRandomName(), getRandomName(), getRandomDate());
            peopleMap.put(p, p.toString());
        }
        System.out.println(<span class="hljs-string">"Microseconds to build map: "</span> + getTimeElapsed(start, LocalDateTime.now()));

        start = LocalDateTime.now();
        <span class="hljs-keyword">boolean</span> found = peopleList.contains(me);
        System.out.println(<span class="hljs-string">"Microseconds to search list is "</span> + getTimeElapsed(start, LocalDateTime.now()));

        start = LocalDateTime.now();
        found = peopleMap.containsKey(me);
        System.out.println(<span class="hljs-string">"Microseconds to search map is "</span> + getTimeElapsed(start, LocalDateTime.now()));
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getRandomName</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">int</span> size = alphabet.length;
        Random rand = <span class="hljs-keyword">new</span> Random();
        List&lt;Character&gt; chars = Arrays.asList(
                alphabet[rand.nextInt(size)],
                alphabet[rand.nextInt(size)],
                alphabet[rand.nextInt(size)],
                alphabet[rand.nextInt(size)]
        );
        <span class="hljs-keyword">return</span> chars.stream().map(String::valueOf).collect(Collectors.joining());
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LocalDate <span class="hljs-title">getRandomDate</span><span class="hljs-params">()</span> </span>{
        Random rand = <span class="hljs-keyword">new</span> Random();
        <span class="hljs-keyword">int</span> min = (<span class="hljs-keyword">int</span>) LocalDate.of(<span class="hljs-number">1980</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>).toEpochDay();
        <span class="hljs-keyword">int</span> max = (<span class="hljs-keyword">int</span>) LocalDate.of(<span class="hljs-number">2018</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>).toEpochDay();
        <span class="hljs-keyword">long</span> day = min + rand.nextInt(max - min);
        <span class="hljs-keyword">return</span> LocalDate.ofEpochDay(day);
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTimeElapsed</span><span class="hljs-params">(LocalDateTime start, LocalDateTime end)</span> </span>{
        Duration duration = Duration.between(start, end);
        <span class="hljs-keyword">return</span> Math.round(duration.getNano() / <span class="hljs-number">1000</span>);
    }
}
</code></pre>
        <!-- start newsletter section -->
<div class="section">
    <div class="newsletter text-center">
        <h4 class="title">Subscribe to our Newsletter</h4>
        <div class="content">        
            <form action="https://stackabuse.com/javas-object-methods-hashcode/#" method="post" class="form-inline validate" novalidate="">
                <div class="row">
                    <div class="col-md-9 col-md-offset-1 col-xs-12">
                        <p>Get occassional tutorials, guides, and reviews in your inbox. No spam ever. Unsubscribe at any time.</p>
                    </div>
                    <div class="col-md-2 col-xs-12"></div>
                </div>
                <div class="row">
                    <div class="col-md-7 col-md-offset-1 col-xs-12">
                        <input type="email" value="" name="email" class="form-control input-lg required email" placeholder="Enter your email..." style="width:100%;">
                    </div>
                    <div class="col-md-4 col-xs-12 text-left">
                        <button type="submit" name="subscribe" class="btn btn-default btn-lg btn-subscribe" ga-on="click" ga-event-category="Newsletter" ga-event-action="Signup" ga-event-label="General-Newsletter-Signup">
                            <i class="fa fa-spinner fa-pulse fa-fw" style="display:none;"></i>
                            Subscribe
                        </button>
                    </div>
                </div>
            </form>
            <div class="message"></div>
        </div>
    </div>
</div>
<!-- end newsletter section -->    
<p>Output:</p>
<pre><code class="hljs cpp">Microseconds to build <span class="hljs-built_in">list</span>: <span class="hljs-number">53789</span>
Microseconds to build <span class="hljs-built_in">map</span>: <span class="hljs-number">892043</span>
Microseconds to search <span class="hljs-built_in">list</span> is <span class="hljs-number">450</span>
Microseconds to search <span class="hljs-built_in">map</span> is <span class="hljs-number">672</span>
</code></pre>
<p>Wow that is grossly inefficient! This great hash table implementation in HashMap has been completely degraded to a terrible implementation of a list-like structure. Even worse is that arguably one of the primary reasons for using a hash table is to have rapid O(1) searching and retrieval of values via key access, but as you can see that is actually performing worse than searching a standard list linearly due my implementation of a <code>hashCode()</code> that has no differentiating capability. Yikes!</p>
<p>Let me fix this. There are a few ways that I know of to approach implementing a reasonably functioning <code>hashCode()</code> method and I will explain them below.</p>
<p><strong>A. <code>hashCode()</code> by Hand</strong></p>
<p>In the book <a class="amazon-link" rel="nofollow" target="_blank" href="https://stackabu.se/effective-java" ga-on="click" ga-event-category="Affiliate" ga-event-action="Click" ga-event-label="Amazon-Link">Effective Java: best practices for the Java platform, 3rd edition</a> Java guru Joshua Bloch describes the following algorithm for implementing your own <code>hashCode()</code> method.</p>
<p>i) comupte the hash of the first deterministic class field used in the implementation of <code>equals(Object)</code> and assign that to a variable I'll call <code>result</code>.<br>
ii) for each remaining deterministic field used the <code>equals(Object)</code> implementation multiply <code>result</code> by 31 and add the hash value of the deterministic field.</p>
<p>In my <code>Person</code> example class this approach looks something like this:</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String firstName;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String lastName;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LocalDate dob;

    <span class="hljs-comment">// omitting all other stuff for brevity</span>

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        }
        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Person)) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        }
        Person p = (Person)o;
        <span class="hljs-keyword">return</span> firstName.equals(p.firstName)
                &amp;&amp; lastName.equals(p.lastName)
                &amp;&amp; dob.equals(p.dob);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">int</span> result = dob == <span class="hljs-keyword">null</span> ? <span class="hljs-number">1</span> : dob.hashCode();
        result = <span class="hljs-number">31</span> * result + firstName == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : firstName.hashCode();
        result = <span class="hljs-number">31</span> * result + lastName == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : lastName.hashCode();
        <span class="hljs-keyword">return</span> result;
    }
}
</code></pre>
<p>Now if I rerun the same program that builds the <code>List</code> and <code>HashMap</code> measuring execution time I should see a significant difference.</p><div><!-- 728x90/300x250/320x50 --><div id="waldo-tag-3884"><div id="_waldo-tag-3884-4-container" style="margin: auto; text-align: center;"><iframe id="waldo-tag-3884-4" scrolling="no" allowtransparency="true" frameborder="0" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" sandbox="allow-forms allow-same-origin allow-scripts allow-top-navigation allow-popups" width="728" height="90" src="./Java&#39;s Object Methods_ hashCode()_files/render(1).html">
    </iframe></div></div></div>
<p>Output:</p>
<pre><code class="hljs cpp">Microseconds to build <span class="hljs-built_in">list</span>: <span class="hljs-number">54091</span>
Microseconds to build <span class="hljs-built_in">map</span>: <span class="hljs-number">35528</span>
Microseconds to search <span class="hljs-built_in">list</span> is <span class="hljs-number">582</span>
Microseconds to search <span class="hljs-built_in">map</span> is <span class="hljs-number">20</span>
</code></pre>
<p>Pretty shocking right!? The <code>HashMap</code> itself is built in nearly half the time, plus the time required to find the <code>me</code> object is on an entirely different level of magnitude.</p>
<p><strong>B. Using <code>Objects.hash(...)</code></strong></p>
<p>If you are looking for a simpler way to implement a custom hash value and are not extremely averse to not having the most performant implementation then its a good idea to reach for the <code>Objects.hash(...)</code> utility and pass it the deterministic fields of your object. This is a generally well performing method, and if you are like me and favor being able to quickly ship code rather than prematurely optimizing for performance, this is a great route to solving this problem.</p>
<p>Below is an example of this implementation for the Person class:</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
    <span class="hljs-comment">// omitting all other stuff for brevity</span>

     <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> Objects.hash(dob, firstName, lastName);
    }
}
</code></pre>
<p>Here is the output for the analysis program:</p>
<pre><code class="hljs cpp">Microseconds to build <span class="hljs-built_in">list</span>: <span class="hljs-number">56438</span>
Microseconds to build <span class="hljs-built_in">map</span>: <span class="hljs-number">38112</span>
Microseconds to search <span class="hljs-built_in">list</span> is <span class="hljs-number">733</span>
Microseconds to search <span class="hljs-built_in">map</span> is <span class="hljs-number">24</span>
</code></pre>
<p>As you can see it is essentially identical to the hand rolled implementation.</p>
<p><strong>C. Autogeneration with IDE</strong></p>
<p>My preferred method to implementing both the <code>equals(Object)</code> and <code>hashCode()</code> methods are actually to use the autogeneration functionality in my Java IDE of choice Eclipse. The implementation that Eclipse provides is shown below.</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{

    <span class="hljs-comment">// omitting all other stuff for brevity</span>

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> prime = <span class="hljs-number">31</span>;
        <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;
        result = prime * result + ((dob == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : dob.hashCode());
        result = prime * result + ((firstName == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : firstName.hashCode());
        result = prime * result + ((lastName == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : lastName.hashCode());
        <span class="hljs-keyword">return</span> result;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == obj)
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        <span class="hljs-keyword">if</span> (obj == <span class="hljs-keyword">null</span>)
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">if</span> (getClass() != obj.getClass())
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        Person other = (Person) obj;
        <span class="hljs-keyword">if</span> (dob == <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">if</span> (other.dob != <span class="hljs-keyword">null</span>)
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!dob.equals(other.dob))
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">if</span> (firstName == <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">if</span> (other.firstName != <span class="hljs-keyword">null</span>)
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!firstName.equals(other.firstName))
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">if</span> (lastName == <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">if</span> (other.lastName != <span class="hljs-keyword">null</span>)
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!lastName.equals(other.lastName))
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }
}
</code></pre>
<p>And the output from the analysis program is this:</p>
<pre><code class="hljs cpp">Microseconds to build <span class="hljs-built_in">list</span>: <span class="hljs-number">53737</span>
Microseconds to build <span class="hljs-built_in">map</span>: <span class="hljs-number">27287</span>
Microseconds to search <span class="hljs-built_in">list</span> is <span class="hljs-number">1500</span>
Microseconds to search <span class="hljs-built_in">map</span> is <span class="hljs-number">22</span>
</code></pre>
<p>Again this implementation is nearly identical in performance.</p>
<h3 id="conclusion">Conclusion</h3>
<p>In this article I have, to the best of my ability, explained the importance of co-implementating the <code>hashCode()</code> method along with <code>equals(Object)</code> in order to efficiently work with data structures that apply the notion of a hash table. In addition to explaining why it is important to implement the <code>hashCode()</code> method I also demonstrated how to implement a few reasonably performant and robust hashing algorithms.</p>
<p>As always, thanks for reading and don't be shy about commenting or critiquing below.</p>
<!--kg-card-end: markdown--><!--kg-card-end: markdown-->
					</div>
					<footer class="post-footer clearfix">
						<div class="pull-left tag-list">
							<i class="fa fa-folder-open-o"></i>
							<a href="https://stackabuse.com/tag/java/">java</a>
						</div>
						<div class="pull-right share">
							<div>
	<ul class="share-icons">
		<!-- twitter -->
		<li>
			<a href="https://twitter.com/share?text=Java%27s%20Object%20Methods%3A%20hashCode()&amp;url=https://stackabuse.com/javas-object-methods-hashcode/" onclick="window.open(this.href, &#39;twitter-share&#39;, &#39;width=550,height=235&#39;);return false;"><i class="fa fa-twitter" style="color:#55acee;"></i></a>
		</li>
		<!-- facebook -->
		<li>
			<a href="https://www.facebook.com/sharer/sharer.php?u=https://stackabuse.com/javas-object-methods-hashcode/" onclick="window.open(this.href, &#39;facebook-share&#39;,&#39;width=580,height=296&#39;);return false;"><i class="fa fa-facebook" style="color:#3b5998;"></i></a>
		</li>
		<!-- google plus -->
		<li>
			<a href="https://plus.google.com/share?url=https://stackabuse.com/javas-object-methods-hashcode/" onclick="window.open(this.href, &#39;google-plus-share&#39;, &#39;width=490,height=530&#39;);return false;"><i class="fa fa-google-plus" style="color:#dc4e41;"></i></a>
		</li>
		<!-- linkedin -->
		<li>
			<a href="https://www.linkedin.com/shareArticle?mini=true%26url=https://stackabuse.com/javas-object-methods-hashcode/%26source=https://stackabuse.com" onclick="window.open(this.href, &#39;linkedin-share&#39;, &#39;width=490,height=530&#39;);return false;"><i class="fa fa-linkedin" style="color:#0077b5;"></i></a>
		</li>
	</ul>
</div>						</div>
					</footer>
                    <!-- start about the author -->
<div class="about-author clearfix">
		<a href="https://stackabuse.com/author/adam/"><img src="./Java&#39;s Object Methods_ hashCode()_files/linkedinphoto.png" alt="Author image" class="avatar pull-left"></a>
	<div class="details">
		<div class="author">
			About <a href="https://stackabuse.com/author/adam/">Adam McQuistan</a>
		</div>
		<div class="meta-info" style="font-style: normal;">
			<span class="location"><i class="fa fa-home"></i>Lincoln, Nebraska</span>
			<span>
                <i class="fa fa-twitter" style="color:#55acee;"></i>
                <a rel="nofollow" href="https://twitter.com/adamjmcquistan" target="_BLANK">Twitter</a>
            </span>
            <span>
                <i class="fa fa-globe" style="color:#333333;"></i>
                <a rel="nofollow" href="https://thecodinginterface.com/" target="_BLANK">Website</a>
            </span>
		</div>
		<div class="bio" rel="nofollow" target="_blank">
            I am both passionate and inquisitive about all things software. My background is mostly in Python, Java, and JavaScript in the areas of science but, have also worked on large ecommerce and ERP apps.
        </div>
	</div>
</div>
<!-- end about the author -->				</article>
                <!-- start newsletter section -->
<div class="section">
    <div class="newsletter text-center">
        <h4 class="title">Subscribe to our Newsletter</h4>
        <div class="content">        
            <form action="https://stackabuse.com/javas-object-methods-hashcode/#" method="post" class="form-inline validate" novalidate="">
                <div class="row">
                    <div class="col-md-9 col-md-offset-1 col-xs-12">
                        <p>Get occassional tutorials, guides, and reviews in your inbox. No spam ever. Unsubscribe at any time.</p>
                    </div>
                    <div class="col-md-2 col-xs-12"></div>
                </div>
                <div class="row">
                    <div class="col-md-7 col-md-offset-1 col-xs-12">
                        <input type="email" value="" name="email" class="form-control input-lg required email" placeholder="Enter your email..." style="width:100%;">
                    </div>
                    <div class="col-md-4 col-xs-12 text-left">
                        <button type="submit" name="subscribe" class="btn btn-default btn-lg btn-subscribe" ga-on="click" ga-event-category="Newsletter" ga-event-action="Signup" ga-event-label="General-Newsletter-Signup">
                            <i class="fa fa-spinner fa-pulse fa-fw" style="display:none;"></i>
                            Subscribe
                        </button>
                    </div>
                </div>
            </form>
            <div class="message"></div>
        </div>
    </div>
</div>
<!-- end newsletter section -->				<div class="comment-wrap">
					<!-- start disqus comment -->
<div class="disqus-container">
	<div id="disqus_thread"><iframe id="dsq-app3362" name="dsq-app3362" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./Java&#39;s Object Methods_ hashCode()_files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 686px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
	    <script type="text/javascript">
	        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
	        var disqus_shortname = disqus_shortname; // required: replace example with your forum shortname

	        /* * * DON'T EDIT BELOW THIS LINE * * */
	        (function() {
	            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	        })();
	    </script>
	    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
</div>
<!-- end disqus comment -->				</div>
				<!-- start prev next wrap -->
<div class="prev-next-wrap clearfix">
		<a class="btn btn-default pull-left" href="https://stackabuse.com/a-brief-introduction-to-matplotlib-for-data-visualization/"><i class="fa fa-angle-left fa-fw"></i> Previous Post : A Brief Introduction to matplotlib for Data Visualization</a>
		&nbsp;
        <a class="btn btn-default pull-right" href="https://stackabuse.com/creating-a-neural-network-from-scratch-in-python-multi-class-classification/">Next Post : Creating a Neural Network from Scratch in Python: Multi-class Classification <i class="fa fa-angle-right fa-fw"></i></a>
</div>				<!-- end post -->
			</div>
			<!-- end main post area -->
			<!-- start sidebar -->
<div class="col-md-4 sidebar">
    <!-- start widget -->
<div class="widget">
	<h4 class="title">
        Ad
    </h4>
    <div class="content ad" style="min-height: 250px;">
        <!-- 300x250/300x600 -->
<div id="waldo-tag-3874" data-processed="true"><script type="text/javascript">googletag.cmd.push(function() { googletag.display('waldo-tag-3874'); });</script><div id="_waldo-tag-3874-3-container" style="margin: auto; text-align: center;"><iframe id="waldo-tag-3874-3" scrolling="no" allowtransparency="true" frameborder="0" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" sandbox="allow-forms allow-same-origin allow-scripts allow-top-navigation allow-popups" width="300" height="250" src="./Java&#39;s Object Methods_ hashCode()_files/render(2).html">
    </iframe></div></div>    </div>
</div>
<!-- end widget -->    <!-- start widget -->
<div class="widget">
    <h4 class="title">Follow Us</h4>
    <div class="content social">
        <div class="row">
            <div class="col-md-4 col-xs-12">
                <a rel="nofollow" target="_blank" href="https://twitter.com/StackAbuse" style="color: #38A1F3;">
                    <i class="fa fa-twitter fa-lg"></i>
                    Twitter
                </a>
            </div>
            <div class="col-md-4 col-xs-12">
                <a rel="nofollow" target="_blank" href="https://www.facebook.com/stackabuse" style="color: #3b5998;">
                    <i class="fa fa-facebook fa-lg"></i>
                    Facebook
                </a>
            </div>
            <div class="col-md-4 col-xs-12">
                <a target="_blank" href="https://stackabuse.com/rss/" style="color: #f7a000;">
                    <i class="fa fa-rss fa-lg"></i>
                    RSS
                </a>
            </div>
        </div>
        <!-- <ul class="social">
            <li><a href="https://twitter.com/StackAbuse"><i class="fa fa-twitter fa-lg"></i></a></li>
            <li><a href="https://www.facebook.com/stackabuse"><i class="fa fa-facebook fa-lg"></i></a></li>
            <li><a href="#"><i class="fa fa-google-plus"></i></a></li>
            <li><a href="#"><i class="fa fa-linkedin"></i></a></li>
            <li><a href="#"><i class="fa fa-skype"></i></a></li>
            <li><a href="#"><i class="fa fa-pinterest"></i></a></li>
            <li><a href="#"><i class="fa fa-youtube"></i></a></li>
            <li><a href="#"><i class="fa fa-vimeo-square"></i></a></li>
            <li><a href="#"><i class="fa fa-dribbble"></i></a></li>
            <li><a href="#"><i class="fa fa-flickr"></i></a></li>
            <li><a href="#"><i class="fa fa-tumblr"></i></a></li>
            <li><a href="https://github.com/scottwrobinson"><i class="fa fa-github"></i></a></li>
            <li><a href="#"><i class="fa fa-instagram"></i></a></li>
            <li><a href="#"><i class="fa fa-stack-overflow"></i></a></li>
            <li><a href="#"><i class="fa fa-stack-exchange"></i></a></li>
            <li><a href="#"><i class="fa fa-xing"></i></a></li>
            <li><a href="#"><i class="fa fa-envelope"></i></a></li>
            <li><a href="https://stackabuse.com/rss/"><i class="fa fa-rss fa-lg"></i></a></li>
        </ul> -->
    </div>
</div>
<!-- end widget -->    <!-- start newsletter widget -->
<div class="widget">
    <h4 class="title">Newsletter</h4>
    <div class="content newsletter">
        <p style="font-size: 16px;">Subscribe to our newsletter! Get occassional tutorials, guides, and reviews in your inbox.</p>
        <form action="https://stackabuse.com/javas-object-methods-hashcode/#" method="post" class="validate" novalidate="">
            <div class="input-group">
                <input type="email" value="" name="email" class="required email input-lg" placeholder="Enter your email...">
            </div>
            <div class="input-group">
                <button type="submit" name="subscribe" class="btn btn-lg btn-default" ga-on="click" ga-event-category="Newsletter" ga-event-action="Signup" ga-event-label="General-Newsletter-Signup">
                    <i class="fa fa-spinner fa-pulse fa-fw" style="display:none;"></i>
                    Subscribe
                </button>
            </div>
            <span style="color: #7f7f7f;">No spam ever. Unsubscribe at any time.</span>
        </form>
        <div class="message"></div>
    </div>
</div>
<!-- end tag cloud widget -->    <!-- start widget -->
<div class="widget">
    <h4 class="title">
        Ad
    </h4>
    <div class="content ad" style="min-height: 250px;">
        <!-- 300x250/300x600 -->
<div id="waldo-tag-3876" data-processed="true"><script type="text/javascript">googletag.cmd.push(function() { googletag.display('waldo-tag-3876'); });</script><div id="_waldo-tag-3876-0-container" style="margin: auto; text-align: center;"><iframe id="waldo-tag-3876-0" scrolling="no" allowtransparency="true" frameborder="0" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" sandbox="allow-forms allow-same-origin allow-scripts allow-top-navigation allow-popups" width="300" height="250" src="./Java&#39;s Object Methods_ hashCode()_files/render(3).html">
    </iframe></div></div>    </div>
</div>
<!-- end widget -->    <div class="widget-sticky" style="width: 360px; position: static; top: 0px;">
        <!-- start widget -->
<div class="widget">
    <h4 class="title">Our Sponsors</h4>
    <div class="content text-center">
        <a class="do-link" rel="nofollow" target="_blank" href="https://stackabu.se/digitalocean" ga-on="click" ga-event-category="Sponsorship" ga-event-action="Click" ga-event-label="DO-Link">
            <img style="margin-left: auto;margin-right: auto;" alt="DigitalOcean" src="./Java&#39;s Object Methods_ hashCode()_files/do-logo-horizontal-blue.svg">
        </a>
        <div style="margin: 15px 30px 0px 30px;font-size: 1.1em;">
            The simplest cloud platform for developers and teams.
        </div>
        <div>
            <a class="do-link" rel="nofollow" target="_blank" href="https://stackabu.se/digitalocean" ga-on="click" ga-event-category="Sponsorship" ga-event-action="Click" ga-event-label="DO-Link">Learn More</a>
        </div>
    </div>
</div>
<!-- end widget -->        <!-- start widget -->
<div class="widget">
    <h4 class="title">Want a remote job?</h4>
    <div class="content jobs">
        <ul style="margin-bottom: 0px; display: block;">
        <li><a rel="nofollow" target="_blank" href="https://hireremote.io/remote-job/0880-senior-software-engineer-at-income-discovery" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Job-Link">Senior Software Engineer<br><span class="job-company">Income Discovery</span>&nbsp;<span class="job-posted-at">3 days ago</span></a><div><a rel="nofollow" target="_blank" href="https://hireremote.io/remote-job/0880-senior-software-engineer-at-income-discovery" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Job-Link"></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-java-jobs"><span class="job-tag">java</span></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-javascript-jobs"><span class="job-tag">javascript</span></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-aws-jobs"><span class="job-tag">aws</span></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-computational-finance-jobs"><span class="job-tag">computational-finance</span></a></div><hr></li><li><a rel="nofollow" target="_blank" href="https://hireremote.io/remote-job/0879-senior-machine-learning-series-a-funded-startup-at-source-coders-inc" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Job-Link">Senior Machine Learning - Series A Funded Sta...<br><span class="job-company">Source Coders Inc</span>&nbsp;<span class="job-posted-at">3 days ago</span></a><div><a rel="nofollow" target="_blank" href="https://hireremote.io/remote-job/0879-senior-machine-learning-series-a-funded-startup-at-source-coders-inc" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Job-Link"></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-machine-learning-jobs"><span class="job-tag">machine-learning</span></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-scala-jobs"><span class="job-tag">scala</span></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-python-jobs"><span class="job-tag">python</span></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-tensorflow-jobs"><span class="job-tag">tensorflow</span></a></div><hr></li><li><a rel="nofollow" target="_blank" href="https://hireremote.io/remote-job/0866-senior-full-stack-developer-to-challenge-convention-at-oreilly-auto-parts" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Job-Link">Senior Full-stack Developer To Challenge Conv...<br><span class="job-company">O'Reilly Auto Parts</span>&nbsp;<span class="job-posted-at">5 days ago</span></a><div><a rel="nofollow" target="_blank" href="https://hireremote.io/remote-job/0866-senior-full-stack-developer-to-challenge-convention-at-oreilly-auto-parts" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Job-Link"></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-javascript-jobs"><span class="job-tag">javascript</span></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-java-jobs"><span class="job-tag">java</span></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-css-jobs"><span class="job-tag">css</span></a><a rel="nofollow" target="_blank" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-Tag-Link" href="https://hireremote.io/remote-java-8-jobs"><span class="job-tag">java-8</span></a></div></li></ul>
        <div class="row">
            <div class="col-md-4">
                <strong>
                    <a rel="nofollow" target="_blank" class="btn btn-default" href="https://hireremote.io/" style="margin-top: 10px;" ga-on="click" ga-event-category="Jobs" ga-event-action="Click" ga-event-label="HR-More-Link">
                        <i class="fa fa-arrow-circle-right"></i>&nbsp; More jobs
                    </a>
                </strong>
            </div>
            <div class="col-md-8 text-right" style="margin-top: 18px;">
                Jobs via
                <a rel="nofollow" target="_blank" href="https://hireremote.io/" class="hr-link" style="color: #f16334;" ga-on="click" ga-event-category="Affiliate" ga-event-action="Click" ga-event-label="HR-Link">
                    HireRemote.io
                </a>
            </div>
            <!-- <div class="col-md-9 text-right">
                <span>Jobs by</span>
                <a
                    rel="nofollow" target="_blank"
                    href="https://www.hireremote.io/"
                    id="jobs_widget_link"
                    ga-on="click"
                    ga-event-category="Jobs"
                    ga-event-action="Click"
                    ga-event-label="HR-Jobs-By"
                >
                    <span id="hr_logo_container">
                        <img
                            id="hr_logo"
                            src="https://www.ziprecruiter.com/img/logos/logo-sm-black-304px.png" alt="HireRemote.io"
                            width="100"
                        />
                    </span>
                </a>
            </div> -->
        </div>
    </div>
</div>
<!-- end widget -->    </div>
</div>
<!-- end sidebar -->		</div>
	</div>
</section>
<!-- end site's main content area -->

	<!-- start main-footer -->
	<footer class="main-footer">
		<div class="container">
			<div class="row">
				<!-- start first footer widget area -->
				<div class="col-sm-4">
					<!-- start widget -->
<div class="widget">
    <h4 class="title">Recent Posts</h4>
    <div class="content recent-post">
        <div class="recent-single-post">
            <a href="https://stackabuse.com/java-collections-the-map-interface/" class="post-title">Java Collections: The Map Interface</a>
            <!--<div class="date">December 27, 2019</div>-->
        </div>
        <div class="recent-single-post">
            <a href="https://stackabuse.com/heap-sort-in-python/" class="post-title">Heap Sort in Python</a>
            <!--<div class="date">December 26, 2019</div>-->
        </div>
        <div class="recent-single-post">
            <a href="https://stackabuse.com/working-with-postgresql-in-java/" class="post-title">Working with PostgreSQL in Java</a>
            <!--<div class="date">December 25, 2019</div>-->
        </div>
    </div>
</div>
<!-- end widget -->				</div>
				<!-- end first footer widget area -->
				<!-- start second footer widget area -->
				<div class="col-sm-4">
					<!-- start tag cloud widget -->
<div class="widget">
    <h4 class="title">Tags</h4>
    <div class="content tag-cloud">
        <a href="https://stackabuse.com/tag/ai/">ai</a><a href="https://stackabuse.com/tag/algorithms/">algorithms</a><a href="https://stackabuse.com/tag/amqp/">amqp</a><a href="https://stackabuse.com/tag/angular/">angular</a><a href="https://stackabuse.com/tag/announcements/">announcements</a><a href="https://stackabuse.com/tag/apache/">apache</a><a href="https://stackabuse.com/tag/api/">api</a><a href="https://stackabuse.com/tag/arduino/">arduino</a><a href="https://stackabuse.com/tag/artificial-intelligence/">artificial intelligence</a><a href="https://stackabuse.com/tag/asynchronous/">asynchronous</a>
    </div>
</div>
<!-- end tag cloud widget -->
				</div>
				<!-- end second footer widget area -->
				<!-- start third footer widget area -->
				<div class="col-sm-4">
					<!-- start widget -->
<div class="widget">
    <h4 class="title">Follow Us</h4>
    <div class="content social">
        <div class="row">
            <div class="col-md-4 col-xs-12">
                <a rel="nofollow" target="_blank" href="https://twitter.com/StackAbuse" style="color: #38A1F3;">
                    <i class="fa fa-twitter fa-lg"></i>
                    Twitter
                </a>
            </div>
            <div class="col-md-4 col-xs-12">
                <a rel="nofollow" target="_blank" href="https://www.facebook.com/stackabuse" style="color: #3b5998;">
                    <i class="fa fa-facebook fa-lg"></i>
                    Facebook
                </a>
            </div>
            <div class="col-md-4 col-xs-12">
                <a target="_blank" href="https://stackabuse.com/rss/" style="color: #f7a000;">
                    <i class="fa fa-rss fa-lg"></i>
                    RSS
                </a>
            </div>
        </div>
        <!-- <ul class="social">
            <li><a href="https://twitter.com/StackAbuse"><i class="fa fa-twitter fa-lg"></i></a></li>
            <li><a href="https://www.facebook.com/stackabuse"><i class="fa fa-facebook fa-lg"></i></a></li>
            <li><a href="#"><i class="fa fa-google-plus"></i></a></li>
            <li><a href="#"><i class="fa fa-linkedin"></i></a></li>
            <li><a href="#"><i class="fa fa-skype"></i></a></li>
            <li><a href="#"><i class="fa fa-pinterest"></i></a></li>
            <li><a href="#"><i class="fa fa-youtube"></i></a></li>
            <li><a href="#"><i class="fa fa-vimeo-square"></i></a></li>
            <li><a href="#"><i class="fa fa-dribbble"></i></a></li>
            <li><a href="#"><i class="fa fa-flickr"></i></a></li>
            <li><a href="#"><i class="fa fa-tumblr"></i></a></li>
            <li><a href="https://github.com/scottwrobinson"><i class="fa fa-github"></i></a></li>
            <li><a href="#"><i class="fa fa-instagram"></i></a></li>
            <li><a href="#"><i class="fa fa-stack-overflow"></i></a></li>
            <li><a href="#"><i class="fa fa-stack-exchange"></i></a></li>
            <li><a href="#"><i class="fa fa-xing"></i></a></li>
            <li><a href="#"><i class="fa fa-envelope"></i></a></li>
            <li><a href="https://stackabuse.com/rss/"><i class="fa fa-rss fa-lg"></i></a></li>
        </ul> -->
    </div>
</div>
<!-- end widget -->				</div>
				<!-- end third footer widget area -->
			</div>
		</div>
	</footer>
	<!-- end main-footer -->
	<!-- start copyright section -->
<div class="copyright">
	<div class="container">
		<div class="row">
			<div class="col-sm-12">
				Copyright © 2019, <a href="https://stackabuse.com/">Stack Abuse</a>.  All Rights Reserved.
			</div>
		</div>
	</div>
</div>
<!-- end copyright section -->	<div class="footer-links">
		<div class="container">
			<div class="row">
				<div class="col-sm-12">
					<a href="https://stackabuse.com/disclosure">Disclosure</a>
					•
					<a href="https://stackabuse.com/privacy-policy">Privacy Policy</a>
					•
					<a href="https://stackabuse.com/terms-of-service">Terms of Service</a>
				</div>
			</div>
		</div>
	</div>
	<a href="https://stackabuse.com/javas-object-methods-hashcode/#" id="back-to-top" style="display: none;"><i class="fa fa-angle-up"></i></a>
	<!--
<script src="//my.hellobar.com/4dd9990be00532b0fc7961824b7d7a0930e9e2b7.js" type="text/javascript" charset="utf-8" async="async"></script>
-->
	<!-- scripts -->
	<script type="text/javascript">
    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function () {
        var s = document.createElement('script'); s.async = true;
        s.type = 'text/javascript';
        s.src = '//' + disqus_shortname + '.disqus.com/count.js';
        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
    }());
    </script>

    <!-- HTML templates for use in JS code -->
    <script id="newsletter-template" type="text/x-custom-template">
        <!-- start newsletter section -->
<div class="section">
    <div class="newsletter text-center">
        <h4 class="title">Subscribe to our Newsletter</h4>
        <div class="content">        
            <form action="#" method="post" class="form-inline validate" novalidate>
                <div class="row">
                    <div class="col-md-9 col-md-offset-1 col-xs-12">
                        <p>Get occassional tutorials, guides, and reviews in your inbox. No spam ever. Unsubscribe at any time.</p>
                    </div>
                    <div class="col-md-2 col-xs-12"></div>
                </div>
                <div class="row">
                    <div class="col-md-7 col-md-offset-1 col-xs-12">
                        <input type="email" value="" name="email" class="form-control input-lg required email" placeholder="Enter your email..." style="width:100%;">
                    </div>
                    <div class="col-md-4 col-xs-12 text-left">
                        <button type="submit" name="subscribe" class="btn btn-default btn-lg btn-subscribe"
                            ga-on="click"
                            ga-event-category="Newsletter"
                            ga-event-action="Signup"
                            ga-event-label="General-Newsletter-Signup"
                        >
                            <i class="fa fa-spinner fa-pulse fa-fw" style="display:none;"></i>
                            Subscribe
                        </button>
                    </div>
                </div>
            </form>
            <div class="message"></div>
        </div>
    </div>
</div>
<!-- end newsletter section -->    </script>

    <!-- <script src="/assets/js/jquery.adsenseloader.js?v=8b761e8043"></script> -->
	<script src="./Java&#39;s Object Methods_ hashCode()_files/jquery.fitvids.js"></script>
	<script src="./Java&#39;s Object Methods_ hashCode()_files/bootstrap.min.js"></script>
    <!-- <script src="/assets/js/jflickrfeed.min.js?v=8b761e8043"></script> -->
	<!-- <script src="/assets/js/highlight.pack.js?v=8b761e8043"></script> -->
    <script src="./Java&#39;s Object Methods_ hashCode()_files/highlight.min.js"></script>
    <script src="./Java&#39;s Object Methods_ hashCode()_files/dockerfile.min.js"></script>
    <script src="./Java&#39;s Object Methods_ hashCode()_files/yaml.min.js"></script>
    <script src="./Java&#39;s Object Methods_ hashCode()_files/highlightjs-line-numbers.min.js"></script>
    <script src="./Java&#39;s Object Methods_ hashCode()_files/moment.min.js"></script>
	<!-- <script src="/assets/js/indeed.js?v=8b761e8043"></script> -->
	<script src="./Java&#39;s Object Methods_ hashCode()_files/main.js"></script>
	<!-- <script src="//gdc.indeed.com/ads/apiresults.js" type="text/javascript"></script> -->
    <script src="./Java&#39;s Object Methods_ hashCode()_files/MathJax.js" type="text/javascript" async=""></script>
	<!-- Add your analytic code below -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  if (window.location.hostname !== 'localhost') {
    ga('create', 'UA-43140675-1', 'auto');
    ga('require', 'eventTracker');
    ga('send', 'pageview');
  }

</script>
<script async="" src="./Java&#39;s Object Methods_ hashCode()_files/autotrack.js"></script>
<iframe style="display: none;" src="./Java&#39;s Object Methods_ hashCode()_files/saved_resource(2).html"></iframe></body></html>
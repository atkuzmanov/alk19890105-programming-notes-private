<!DOCTYPE html>
<!-- saved from url=(0089)https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers -->
<html lang="en" dir="ltr" class=""><head prefix="og: http://ogp.me/ns#"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta http-equiv="X-UA-Compatible" content="IE=Edge">
  <script>(function(d) { d.className = d.className.replace(/\bno-js/, ''); })(document.documentElement);</script>
  <title>Writing WebSocket servers - Web APIs | MDN</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="robots" content="index, follow">

  
<link rel="preload" href="https://developer.mozilla.org/static/fonts/locales/ZillaSlab-Regular.subset.bbc33fb47cf6.woff2" as="font" type="font/woff2" crossorigin="">
<link rel="preload" href="https://developer.mozilla.org/static/fonts/locales/ZillaSlab-Bold.subset.e96c15f68c68.woff2" as="font" type="font/woff2" crossorigin="">

  <link rel="home" href="https://developer.mozilla.org/en-US/">
  <link rel="license" href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#license">

  <link href="./Writing WebSocket servers - Web APIs _ MDN_files/react-header.35f24f5aa50c.css" rel="stylesheet" type="text/css">

<link href="./Writing WebSocket servers - Web APIs _ MDN_files/react-mdn.0d64fea91b0c.css" rel="stylesheet" type="text/css">

  <link href="./Writing WebSocket servers - Web APIs _ MDN_files/prism.a6f275e5032b.css" rel="stylesheet" type="text/css">

  
<style>
    @font-face {
        font-family: zillaslab;
        font-display: swap;
        src: url(/static/fonts/locales/ZillaSlab-Regular.subset.bbc33fb47cf6.woff2) format('woff2'),
             url(/static/fonts/locales/ZillaSlab-Regular.subset.0357f12613a7.woff) format('woff');
        font-weight: normal;
        font-style: normal;
    }

    @font-face {
        font-family: zillaslab;
        font-display: swap;
        src: url(/static/fonts/locales/ZillaSlab-Bold.subset.e96c15f68c68.woff2) format('woff2'),
             url(/static/fonts/locales/ZillaSlab-Bold.subset.da0ccde4ca4a.woff) format('woff');
        font-weight: bold;
        font-style: normal;
    }
</style>


  
<script>
    // Mozilla DNT Helper
    /* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. */ if(typeof Mozilla==='undefined'){var Mozilla={}}Mozilla.dntEnabled=function(dnt,ua){'use strict';var dntStatus=dnt||navigator.doNotTrack||window.doNotTrack||navigator.msDoNotTrack;var userAgent=ua||navigator.userAgent;var anomalousWinVersions=['Windows NT 6.1','Windows NT 6.2','Windows NT 6.3'];var fxMatch=userAgent.match(/Firefox\/(\d+)/);var ieRegEx=/MSIE|Trident/i;var isIE=ieRegEx.test(userAgent);var platform=userAgent.match(/Windows.+?(?=;)/g);if(isIE&&typeof Array.prototype.indexOf!=='function'){return false}else if(fxMatch&&parseInt(fxMatch[1],10)<32){dntStatus='Unspecified'}else if(isIE&&platform&&anomalousWinVersions.indexOf(platform.toString())!==-1){dntStatus='Unspecified'}else{dntStatus={'0':'Disabled','1':'Enabled'}[dntStatus]||'Unspecified'}return dntStatus==='Enabled'?true:false};
    // only load GA if DNT is not enabled
    if (Mozilla && !Mozilla.dntEnabled()) {
        window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
        ga('create', 'UA-36116321-5', 'mozilla.org');
        ga('set', 'anonymizeIp', true);
    }
</script>
<script async="" src="./Writing WebSocket servers - Web APIs _ MDN_files/analytics.js"></script>


  <script>
LUX=(function(){var a=("undefined"!==typeof(LUX)&&"undefined"!==typeof(LUX.gaMarks)?LUX.gaMarks:[]);var d=("undefined"!==typeof(LUX)&&"undefined"!==typeof(LUX.gaMeasures)?LUX.gaMeasures:[]);var j="LUX_start";var k=window.performance;var l=("undefined"!==typeof(LUX)&&LUX.ns?LUX.ns:(Date.now?Date.now():+(new Date())));if(k&&k.timing&&k.timing.navigationStart){l=k.timing.navigationStart}function f(){if(k&&k.now){return k.now()}var o=Date.now?Date.now():+(new Date());return o-l}function b(n){if(k){if(k.mark){return k.mark(n)}else{if(k.webkitMark){return k.webkitMark(n)}}}a.push({name:n,entryType:"mark",startTime:f(),duration:0});return}function m(p,t,n){if("undefined"===typeof(t)&&h(j)){t=j}if(k){if(k.measure){if(t){if(n){return k.measure(p,t,n)}else{return k.measure(p,t)}}else{return k.measure(p)}}else{if(k.webkitMeasure){return k.webkitMeasure(p,t,n)}}}var r=0,o=f();if(t){var s=h(t);if(s){r=s.startTime}else{if(k&&k.timing&&k.timing[t]){r=k.timing[t]-k.timing.navigationStart}else{return}}}if(n){var q=h(n);if(q){o=q.startTime}else{if(k&&k.timing&&k.timing[n]){o=k.timing[n]-k.timing.navigationStart}else{return}}}d.push({name:p,entryType:"measure",startTime:r,duration:(o-r)});return}function h(n){return c(n,g())}function c(p,o){for(i=o.length-1;i>=0;i--){var n=o[i];if(p===n.name){return n}}return undefined}function g(){if(k){if(k.getEntriesByType){return k.getEntriesByType("mark")}else{if(k.webkitGetEntriesByType){return k.webkitGetEntriesByType("mark")}}}return a}return{mark:b,measure:m,gaMarks:a,gaMeasures:d}})();LUX.ns=(Date.now?Date.now():+(new Date()));LUX.ac=[];LUX.cmd=function(a){LUX.ac.push(a)};LUX.init=function(){LUX.cmd(["init"])};LUX.send=function(){LUX.cmd(["send"])};LUX.addData=function(a,b){LUX.cmd(["addData",a,b])};LUX_ae=[];window.addEventListener("error",function(a){LUX_ae.push(a)});LUX_al=[];if("function"===typeof(PerformanceObserver)){var LongTaskObserver=new PerformanceObserver(function(c){var b=c.getEntries();for(var a=0;a<b.length;a++){var d=b[a];LUX_al.push(d)}});try{LongTaskObserver.observe({entryTypes:["longtask"],buffered:true})}catch(e){}};
</script>
<script src="./Writing WebSocket servers - Web APIs _ MDN_files/lux.js" async="" defer="" crossorigin="anonymous"></script>


  <script>
  window.fetch || document.write('<script src="/static/build/js/fetch-polyfill.63fdc379c7eb.js"><\/script>');
</script>
<script>
  // Only include the fat polyfill for browsers that seem to not have
  // certain JS features. E.g. Firefox 38.
  Array.prototype.includes || document.write('<script src="/static/build/js/js-polyfill.6f2e22100487.js"><\/script>');
</script>

  <script async="" type="text/javascript" src="./Writing WebSocket servers - Web APIs _ MDN_files/perf.654b849a6fd9.js" charset="utf-8"></script>

  <!-- common social tags -->
  
  <meta property="og:type" content="website">
  <meta property="og:image" content="https://developer.mozilla.org/static/img/opengraph-logo.72382e605ce3.png">
  <meta property="og:site_name" content="MDN Web Docs">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:image" content="https://developer.mozilla.org/static/img/opengraph-logo.72382e605ce3.png">
  <meta name="twitter:site" content="@MozDevNet">
  <meta name="twitter:creator" content="@MozDevNet">
  <link rel="search" type="application/opensearchdescription+xml" href="https://developer.mozilla.org/en-US/search/xml" title="MDN Web Docs">

  <!-- third-generation iPad with high-resolution Retina display: -->
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://developer.mozilla.org/static/img/favicon144.e7e21ca263ca.png">
  <!-- iPhone with high-resolution Retina display: -->
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://developer.mozilla.org/static/img/favicon114.d526f38b09c5.png">
  <!-- first- and second-generation iPad: -->
  <link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://developer.mozilla.org/static/img/favicon72.cc65d1d762a0.png">
  <!-- non-Retina iPhone, iPod Touch, and Android 2.1+ devices: -->
  <link rel="apple-touch-icon-precomposed" href="https://developer.mozilla.org/static/img/favicon57.de33179910ae.png">
  <!-- basic favicon -->
  <link rel="shortcut icon" href="https://developer.mozilla.org/static/img/favicon32.7f3da72dcea1.png">

  

  <link rel="preconnect" href="https://interactive-examples.mdn.mozilla.net/" pr="0.75">

  <link rel="canonical" href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">

  
  <link rel="alternate" hreflang="en" href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" title="Writing WebSocket servers">
  
    <link rel="alternate" hreflang="es" href="https://developer.mozilla.org/es/docs/Web/API/WebSockets_API/Escribiendo_servidores_con_WebSocket" title="Escribir servidores WebSocket">
  
    <link rel="alternate" hreflang="fr" href="https://developer.mozilla.org/fr/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" title="Écriture de serveurs WebSocket">
  
    <link rel="alternate" hreflang="ja" href="https://developer.mozilla.org/ja/docs/WebSockets-840092-dup/Writing_WebSocket_servers" title="WebSocket サーバーの記述">
  
    <link rel="alternate" hreflang="ko" href="https://developer.mozilla.org/ko/docs/WebSockets/Writing_WebSocket_servers" title="웹소켓 서버 작성하기">
  
    <link rel="alternate" hreflang="pt" href="https://developer.mozilla.org/pt-BR/docs/WebSockets/Writing_WebSocket_servers" title="Escrevendo um servidor WebSocket">
  
    <link rel="alternate" hreflang="zh" href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" title="编写 WebSocket 服务器">
  

  <!-- document-specific social tags -->
  <meta property="og:title" content="Writing WebSocket servers">
  <meta property="og:url" content="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">
  <meta name="twitter:url" content="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers">
  <meta name="twitter:title" content="Writing WebSocket servers">
  
  <meta property="og:description" content="A WebSocket server is an application listening on any port of a TCP server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.">
  <meta name="description" content="A WebSocket server is an application listening on any port of a TCP server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.">
  <meta name="twitter:description" content="A WebSocket server is an application listening on any port of a TCP server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.">
  

  
    <link href="./Writing WebSocket servers - Web APIs _ MDN_files/print.ca192a439743.css" rel="stylesheet" type="text/css" media="print">
  
</head>
<body>
  <script>
    // make sure global mdn object exists
    var mdn = window.mdn || {};

    (function(win) {
        'use strict';

        win.mdn.features = {};
        win.mdn.siteUrl = 'https://developer.mozilla.org';
        win.mdn.wikiSiteUrl = 'https://wiki.developer.mozilla.org';
        win.mdn.staticPath = '/static/';
        win.mdn.wiki = {
            autosuggestTitleUrl: '/en-US/docs/get-documents'
        };

        win.mdn.notifications = [];

        

        // interactive editor config
        win.mdn.interactiveEditor = {
            siteUrl: "https://developer.mozilla.org",
            editorUrl: "https://interactive-examples.mdn.mozilla.net"
        };
        win.mdn.langCookieName = "django_language";
        win.mdn.multiAuthEnabled = false;

    })(this);
</script>

  

  <div id="react-container" data-component-name="SPA"><div class="loading-bar"></div><ul id="nav-access"><li><a id="skip-main" href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#content">Skip to main content</a></li><li><a id="skip-language" href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#language">Select language</a></li><li><a id="skip-search" href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#main-q">Skip to search</a></li></ul><header class="page-header"><a href="https://developer.mozilla.org/en-US/" class="logo" aria-label="MDN Web Docs"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 219 48" role="img"><path d="M49.752 30.824h59.917v17.132H49.75zm57.23 12.3c-.103.03-.21.048-.316.05-.338 0-.514-.15-.514-.582v-3.256c0-1.71-1.352-2.543-2.976-2.543a7.206 7.206 0 0 0-3.21.676l-.29 1.724 1.71.182.245-.842a2.338 2.338 0 0 1 1.147-.216c1.214 0 1.23.913 1.23 1.69v.234c-.407-.048-.818-.07-1.23-.068-1.71 0-3.49.433-3.49 2.276 0 1.563 1.23 2.144 2.31 2.144a2.7 2.7 0 0 0 2.41-1.494c.018.88.77 1.563 1.648 1.494a2.89 2.89 0 0 0 1.353-.338zm-4.604-.05a.787.787 0 0 1-.88-.867c0-.815.677-1.015 1.432-1.015.36.008.722.04 1.078.098-.05 1.235-.852 1.783-1.63 1.783zM97.388 33l-3.24 11.433h2.11L99.5 33.002zm-4.353 0l-3.24 11.433h2.11L95.145 33zm-6.89 6.645h2.243V36.94h-2.242zm0 4.802h2.243v-2.706h-2.242zm-3.617-1.64H80.1l4.156-4.736-.166-1.13h-6.58l-.268 2.63 1.546.164.338-1.163h2.343l-4.123 4.734.216 1.13h6.544l.467-2.63-1.69-.164zM72.143 36.79c-2.706 0-4.02 1.812-4.02 4.004 0 2.394 1.595 3.804 3.905 3.804 2.394 0 4.122-1.51 4.122-3.905-.003-2.093-1.32-3.906-4.01-3.906zm-.054 6.154c-1.165 0-1.763-.997-1.763-2.292 0-1.414.676-2.23 1.778-2.23 1.015 0 1.83.677 1.83 2.196 0 1.438-.73 2.327-1.846 2.327zm-5.906-3.564c0-1.78-1.224-2.594-2.577-2.594a2.51 2.51 0 0 0-2.44 1.612c-.367-1.1-1.364-1.613-2.443-1.613a2.48 2.48 0 0 0-2.276 1.278v-1.13h-3.14v1.63h.996v4.24h-.997v1.63h4.572v-1.63h-1.432V40.2c0-1.048.433-1.78 1.448-1.78.845 0 1.278.502 1.278 1.797v4.224h3.14v-1.63h-.996v-2.612c0-1.048.433-1.78 1.447-1.78.846 0 1.278.502 1.278 1.797v4.214h3.142V42.8h-.998zm78.791-22.39h-6.29c.23-1.935 1.16-3.558 3.274-3.558 2.245 0 3.2 1.857 3.016 3.558zM218.952 0v29.137h-169.2V0zM71.706 6.885h-3.85L61.51 20.01h-.104L54.882 6.884h-3.84v1.65h2.19V21.98H51.12v1.65h5.927v-1.65h-2.012V11.24h.1l5.75 11.553H61.9l5.62-11.474h.105v10.66h-1.962v1.65h5.942v-1.65h-2.09V8.536h2.19zm9.993 16.76c5.285 0 8.484-3.48 8.484-8.42 0-4.847-3.094-8.353-8.56-8.353H74.12v1.623h2.114v13.527H74.12v1.623zm27.05-16.76h-6.426v1.65h2.526v11.268h-.1L95.21 6.885H91.6v1.65h2.22V21.98h-1.935v1.65h6.385v-1.65h-2.655V10.444h.1l9.724 13.202h1.21V8.535h2.09zm26.71 5.29h-5.156v1.467h1.83l-1.857 7.247h-.128l-3.586-8.716h-1.21l-3.423 8.718h-.127l-2.14-7.247h1.933v-1.47h-5.41v1.467h1.522l3.25 10.003h1.352l3.432-8.766h.13l3.496 8.765h1.393l3.122-10.003h1.573zm6.704 11.727c2.837 0 4.514-1.583 4.83-3.568l-1.523-.338c-.36 1.42-1.365 2.347-3.17 2.347-2.283 0-3.53-1.468-3.636-4.02h8.058c.1-.445.153-.898.156-1.354-.024-2.71-1.728-5.03-4.873-5.03-3.246 0-5.26 2.58-5.26 6.14 0 3.712 2.162 5.825 5.412 5.825zm13.408 0c3.663 0 5.134-3.25 5.134-6.294 0-3.642-2.063-5.67-4.924-5.67-2.19 0-3.402 1.186-4.1 2.603V5.905h-3.53v1.47h1.692v12.923a22.8 22.8 0 0 1-.338 3.35h1.805a44.05 44.05 0 0 0 .235-1.906c.747 1.39 2.242 2.165 4.02 2.165zm26.198-1.728h-1.985V5.904h-4.6v1.47h2.798v6.653c-.748-1.342-2.15-2.09-3.842-2.09-3.74 0-5.183 3.2-5.183 6.267 0 3.584 1.958 5.698 4.924 5.698 2.087 0 3.352-1.224 4.1-2.577v2.323h3.784zm6.963 1.728c3.53 0 5.75-2.526 5.742-6.006 0-3.25-1.934-5.982-5.647-5.982s-5.67 2.735-5.67 6.087c0 3.457 2.09 5.905 5.568 5.905zm12.942 0c3.172 0 4.538-2.114 4.866-4.112l-1.548-.34c-.334 1.885-1.315 2.917-3.094 2.917-2.27 0-3.507-1.637-3.507-4.397 0-2.475.982-4.487 3.43-4.487a4.4 4.4 0 0 1 2.45.646l.42 1.936 1.496-.18-.44-2.758c-1.16-.876-2.397-1.187-3.92-1.187-3.556 0-5.362 2.966-5.362 6.14 0 3.685 2.036 5.825 5.208 5.825zm11.166 0c2.76 0 4.874-1.34 4.847-3.595 0-4.565-7.1-2.195-7.1-5.184 0-1.177 1.03-1.69 2.474-1.69.826-.015 1.64.18 2.368.567l.267 1.864 1.495-.18-.284-2.68a8.135 8.135 0 0 0-3.997-1.06c-2.088 0-4.255.903-4.255 3.328 0 4.46 7.193 2.063 7.193 5.208 0 1.315-1.495 1.934-3.095 1.934a5.812 5.812 0 0 1-2.553-.568l.078-1.522-1.444-.156-.362 2.604c.977.643 2.736 1.133 4.36 1.133zm-54.042-6.11c0 2.373-1.058 4.564-3.584 4.564a3.455 3.455 0 0 1-3.534-3.456v-1.728c.05-1.7 1.444-3.686 3.635-3.686 1.948 0 3.48 1.444 3.483 4.305zm19.18-1.06v1.833c-.076 1.73-1.57 3.79-3.634 3.79-1.985 0-3.48-1.47-3.48-4.28 0-2.425 1.133-4.59 3.686-4.59a3.36 3.36 0 0 1 3.43 3.248zm14.597 1.133c0 2.58-1.34 4.488-3.79 4.488-2.453 0-3.74-1.958-3.74-4.46 0-2.55 1.34-4.434 3.74-4.434 2.397 0 3.79 1.778 3.79 4.405zm-104.39-2.593c0 4.16-2.32 6.763-6.574 6.763h-3.478V8.508h3.466c4.254 0 6.574 2.71 6.587 6.764zM.116 0h47.956v47.956H.116zM42.01 22.02c-.036-.723-.12-1.448-.17-2.166a1.74 1.74 0 0 0-.395-.98 2.465 2.465 0 0 0-1.026-.74c-.808-.314-1.622-.664-2.435-.975a21.509 21.509 0 0 1-3.342-1.472 2.626 2.626 0 0 1-1.296-1.972 2.954 2.954 0 0 0-1.47-2.228 4.062 4.062 0 0 0-2.958-.35c-.734.176-1.5.165-2.23-.033l-1.112-.34-.302-.09-.873-.26c-1.57-.468-2.228-.713-4.773-.278a14.678 14.678 0 0 0-7.09 3.897l-6.37 6.76h5.72l-3.504 3.71h6.026l-3.503 3.71h4.844l-1.548 4.06c5.93 6.07 12.25 7.295 12.25 7.295 0-1.673.38-8.24.826-9.34a5.25 5.25 0 0 1 .762-1.54 4.211 4.211 0 0 1 3.393-1.547c1.303 0 2.597.238 3.815.702.74.31 1.577.264 2.277-.122a38.42 38.42 0 0 0 1.498-.94.839.839 0 0 1 .556-.18c.54.06 1.054-.237 1.27-.734.16-.33.35-.64.524-.97.472-.884.69-1.88.633-2.88z"></path></svg></a><nav class="main-nav" role="navigation"><ul><li class="top-level-entry-container"><button type="button" class="top-level-entry" aria-haspopup="true">Technologies<span class="main-menu-arrow" aria-hidden="true">▼</span></button><ul><li data-item="Technologies" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web">Technologies Overview</a></li><li data-item="Technologies" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a></li><li data-item="Technologies" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a></li><li data-item="Technologies" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a></li><li data-item="Technologies" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Graphics">Graphics</a></li><li data-item="Technologies" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP">HTTP</a></li><li data-item="Technologies" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/API">APIs / DOM</a></li><li data-item="Technologies" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">Browser Extensions</a></li><li data-item="Technologies" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li></ul></li><li class="top-level-entry-container"><button type="button" class="top-level-entry" aria-haspopup="true">References &amp; Guides<span class="main-menu-arrow" aria-hidden="true">▼</span></button><ul><li data-item="References &amp; Guides" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Learn">Learn web development</a></li><li data-item="References &amp; Guides" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/Tutorials">Tutorials</a></li><li data-item="References &amp; Guides" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/Reference">References</a></li><li data-item="References &amp; Guides" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/Guide">Developer Guides</a></li><li data-item="References &amp; Guides" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility">Accessibility</a></li><li data-item="References &amp; Guides" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Games">Game development</a></li><li data-item="References &amp; Guides" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/Web">...more docs</a></li></ul></li><li class="top-level-entry-container"><button type="button" class="top-level-entry" aria-haspopup="true">Feedback<span class="main-menu-arrow" aria-hidden="true">▼</span></button><ul><li data-item="Feedback" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/MDN/Feedback">Send Feedback</a></li><li data-item="Feedback" role="menuitem"><a target="_blank" rel="noopener noreferrer" href="https://support.mozilla.org/">Get Firefox help<!-- --> 🌐</a></li><li data-item="Feedback" role="menuitem"><a target="_blank" rel="noopener noreferrer" href="https://stackoverflow.com/">Get web development help<!-- --> 🌐</a></li><li data-item="Feedback" role="menuitem"><a href="https://developer.mozilla.org/en-US/docs/MDN/Community">Join the MDN community</a></li><li data-item="Feedback" role="menuitem"><a target="_blank" rel="noopener noreferrer" href="https://github.com/mdn/sprints/issues/new?template=issue-template.md&amp;projects=mdn/sprints/2&amp;labels=user-report&amp;title=%2Fen-US%2Fdocs%2FWeb%2FAPI%2FWebSockets_API%2FWriting_WebSocket_servers">Report a content problem<!-- --> 🌐</a></li><li data-item="Feedback" role="menuitem"><a target="_blank" rel="noopener noreferrer" href="https://github.com/mdn/kuma/issues/new">Report an issue<!-- --> 🌐</a></li></ul></li></ul></nav><form class="header-search" id="nav-main-search" action="https://developer.mozilla.org/en-US/search" method="get" role="search"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 26 28" aria-hidden="true" class="search-icon"><path d="M18 13c0-3.859-3.141-7-7-7s-7 3.141-7 7 3.141 7 7 7 7-3.141 7-7zm8 13c0 1.094-.906 2-2 2a1.96 1.96 0 0 1-1.406-.594l-5.359-5.344a10.971 10.971 0 0 1-6.234 1.937c-6.078 0-11-4.922-11-11s4.922-11 11-11 11 4.922 11 11c0 2.219-.672 4.406-1.937 6.234l5.359 5.359c.359.359.578.875.578 1.406z"></path></svg><label for="main-q" class="visually-hidden">Search MDN</label><input type="search" class="search-input-field" id="main-q" name="q" placeholder="Search MDN" pattern="(.|\s)*\S(.|\s)*" required=""></form><a href="https://developer.mozilla.org/users/github/login?next=/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" data-service="GitHub" rel="nofollow" class="signin-link">Sign in</a></header><main role="main"><div class="titlebar-container"><div class="titlebar"><h1 class="title">Writing WebSocket servers</h1></div></div><div class="full-width-row-container"><div class="max-content-width-container"><nav class="breadcrumbs" role="navigation"><ol typeof="BreadcrumbList" vocab="https://schema.org/" aria-label="breadcrumbs"><li property="itemListElement" typeof="ListItem"><a href="https://developer.mozilla.org/en-US/docs/Web" class="breadcrumb-chevron" property="item" typeof="WebPage"><span property="name">Web technology for developers</span></a><meta property="position" content="1"></li><li property="itemListElement" typeof="ListItem"><a href="https://developer.mozilla.org/en-US/docs/Web/API" class="breadcrumb-chevron" property="item" typeof="WebPage"><span property="name">Web APIs</span></a><meta property="position" content="2"></li><li property="itemListElement" typeof="ListItem"><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" class="breadcrumb-chevron" property="item" typeof="WebPage"><span property="name">The WebSocket API (WebSockets)</span></a><meta property="position" content="3"></li><li property="itemListElement" typeof="ListItem"><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" class="crumb-current-page" property="item" typeof="WebPage"><span property="name" aria-current="page">Writing WebSocket servers</span></a><meta property="position" content="4"></li></ol></nav><div class="dropdown-container"><button id="header-language-menu" type="button" class="dropdown-menu-label" aria-haspopup="true" aria-owns="language-menu" aria-label="Current language is English. Choose your preferred language.">English<span class="dropdown-arrow-down" aria-hidden="true">▼</span></button><ul id="language-menu" class="dropdown-menu-items right" role="menu"><li lang="es" role="menuitem"><a href="https://developer.mozilla.org/es/docs/Web/API/WebSockets_API/Escribiendo_servidores_con_WebSocket" title="Spanish"><bdi>Español</bdi></a></li><li lang="fr" role="menuitem"><a href="https://developer.mozilla.org/fr/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" title="French"><bdi>Français</bdi></a></li><li lang="ja" role="menuitem"><a href="https://developer.mozilla.org/ja/docs/WebSockets-840092-dup/Writing_WebSocket_servers" title="Japanese"><bdi>日本語</bdi></a></li><li lang="ko" role="menuitem"><a href="https://developer.mozilla.org/ko/docs/WebSockets/Writing_WebSocket_servers" title="Korean"><bdi>한국어</bdi></a></li><li lang="pt-BR" role="menuitem"><a href="https://developer.mozilla.org/pt-BR/docs/WebSockets/Writing_WebSocket_servers" title="Portuguese (Brazilian)"><bdi>Português (do&nbsp;Brasil)</bdi></a></li><li lang="zh-CN" role="menuitem"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" title="Chinese (Simplified)"><bdi>中文 (简体)</bdi></a></li><li><a href="https://wiki.developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers$locales" rel="nofollow" id="translations-add">Add a translation</a></li></ul></div></div></div><div class="wiki-left-present content-layout"><aside class="document-toc-container"><section class="document-toc"><header><h2>On this Page</h2></header><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#The_WebSocket_handshake" rel="internal">The WebSocket handshake</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Exchanging_data_frames" rel="internal">Exchanging data frames</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Pings_and_Pongs_The_Heartbeat_of_WebSockets" rel="internal">Pings and Pongs: The Heartbeat of WebSockets</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Closing_the_connection" rel="internal">Closing the connection</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous_2" rel="internal">Miscellaneous</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Related" rel="internal">Related</a></li></ul></section></aside><div id="content" class="article text-content"><article id="wikiArticle"><div></div>

<p><span class="seoSummary">A WebSocket server is an application listening on any port of a TCP server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.</span></p>

<p>A WebSocket server can be written in any server-side programming language that is capable of <a class="external" href="https://en.wikipedia.org/wiki/Berkeley_sockets" rel="noopener">Berkeley sockets</a>, such as C(++), Python, <a href="https://developer.mozilla.org/en-US/docs/PHP">PHP</a>, or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Server-Side_JavaScript">server-side JavaScript</a>. This is not a tutorial in any specific language, but serves as a guide to facilitate writing your own server.</p>

<p>This article assumes you're already familiar with how <a class="glossaryLink" href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP" title="HTTP: The HyperText Transfer Protocol (HTTP) is the underlying network protocol that enables transfer of hypermedia documents on the Web, typically between a browser and a server so that humans can read them. The current version of the HTTP specification is called HTTP/2.">HTTP</a> works, and that you have a moderate level of programming experience. Depending on language support, knowledge of TCP sockets may be required. The scope of this guide is to present the minimum knowledge you need to write a WebSocket server.</p>

<div class="note">
<p><strong>Note:</strong> Read the latest official WebSockets specification, <a class="external" href="http://datatracker.ietf.org/doc/rfc6455/?include_text=1" rel="noopener">RFC 6455</a>. Sections 1 and 4-7 are especially interesting to server implementors. Section 10 discusses security and you should definitely peruse it before exposing your server.</p>
</div>

<p>A WebSocket server is explained on a very low level here. WebSocket servers are often separate and specialized servers (for load-balancing or other practical reasons), so you will often use a <a class="external" href="https://en.wikipedia.org/wiki/Reverse_proxy" rel="noopener">reverse proxy</a> (such as a regular HTTP server) to detect WebSocket handshakes, pre-process them, and send those clients to a real WebSocket server. This means that you don't have to bloat your server code with cookie and authentication handlers (for example).</p>

<h2 id="The_WebSocket_handshake">The WebSocket handshake</h2>

<p>First of all, the server must listen for incoming socket connections using a standard TCP socket. Depending on your platform, this may be handled for you automatically. For example, let's assume that your server is listening on <code>example.com</code>, port 8000, and your socket server responds to <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET" title="The HTTP GET method requests a representation of the specified resource. Requests using GET should only retrieve data."><code>GET</code></a> requests at <code>example.com/chat</code>.</p>

<div class="warning">
<p><strong>Warning:</strong> The server may listen on any port it chooses, but if it chooses any port other than 80 or 443, it may have problems with firewalls and/or proxies. Browsers generally require a secure connection for WebSockets, although they may offer an exception for local devices.</p>
</div>

<p>The handshake is the "Web" in WebSockets. It's the bridge from HTTP to WebSockets. In the handshake, details of the connection are negotiated, and either party can back out before completion if the terms are unfavorable. The server must be careful to understand everything the client asks for, otherwise security issues will be introduced.</p>

<div class="blockIndicator note">
<p><strong>Tip:</strong> The request-uri (<code>/chat</code> here) has no defined meaning in the spec. So many people cleverly use it to let one server handle multiple WebSocket applications. For example, <code>example.com/chat</code>&nbsp;could invoke a multiuser chat app, while <code>/game</code> on the same server might invoke a multiplayer game.</p>
</div>

<h3 id="Client_handshake_request">Client handshake request</h3>

<p>Even though you're building a server, a client still has to start the WebSocket handshake process by contacting the server and requesting a WebSocket connection. So you must know how to interpret the client's request. The <strong>client</strong> will send a pretty standard HTTP request with headers that looks like this (the HTTP version <strong>must</strong> be 1.1 or greater, and the method <strong>must</strong> be <code>GET</code>):</p>

<pre>GET /chat HTTP/1.1
Host: example.com:8000
<strong>Upgrade: websocket</strong>
<strong>Connection: Upgrade</strong>
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Sec-WebSocket-Version: 13

</pre>

<p>The client can solicit extensions and/or subprotocols here; see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous">Miscellaneous</a> for details. Also, common headers like <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent" title="The User-Agent request header contains a characteristic string that allows the network protocol peers to identify the application type, operating system, software vendor or software version of the requesting software user agent."><code>User-Agent</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer" title="The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example."><code>Referer</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie" title="The Cookie HTTP request header contains stored HTTP cookies previously sent by the server with the Set-Cookie header."><code>Cookie</code></a>, or authentication headers might be there as well. Do whatever you want with those; they don't directly pertain to the WebSocket. It's also safe to ignore them. In many common setups, a reverse proxy has already dealt with them.</p>

<div class="blockIndicator note">
<p><strong>Tip:</strong> All <strong>browsers</strong> will send an <a href="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Origin"><code>Origin</code> header</a>. You can use this header for security (checking for same origin, whitelisting/ blacklisting, etc.) and send a <a href="https://developer.mozilla.org/en-US/docs/HTTP/Response_codes#403">403 Forbidden</a> if you don't like what you see. However, be warned that non-browser agents can just send a faked <code>Origin</code>. Most applications will reject requests without this header.</p>
</div>

<p>If any header is not understood or has an incorrect value, the server should send a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400" title="The HyperText Transfer Protocol (HTTP) 400 Bad Request response status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."><code>400</code></a> ("Bad Request")} response and immediately close the socket. As usual, it may also give the reason why the handshake failed in the HTTP response body, but the message may never be displayed (browsers&nbsp;do not display it). If the server doesn't understand that version of WebSockets, it should send a <a class="new" rel="nofollow" title="The documentation about this has not yet been written; please consider contributing!"><code>Sec-WebSocket-Version</code></a> header back that contains the version(s) it does understand.&nbsp; In the example above, it indicates version 13 of the WebSocket protocol.</p>

<p>The most interesting header here is <a class="new" rel="nofollow" title="The documentation about this has not yet been written; please consider contributing!"><code>Sec-WebSocket-Key</code></a>. Let's look at that next.</p>

<div class="note">
<p><strong>Note:</strong> <a href="https://developer.mozilla.org/en-US/docs/HTTP/Response_codes">Regular HTTP status codes</a> can only be used before the handshake. After the handshake succeeds, you have to use a different set of codes (defined in section 7.4 of the spec).</p>
</div>

<h3 id="Server_handshake_response">Server handshake response</h3>

<p>When the <strong>server</strong> receives the handshake request, it should send back a special response that indicates that the protocol will be changing from HTTP to WebSocket. That header looks something like the following (remember each header line ends with <code>\r\n</code> and put an extra <code>\r\n</code> after the last one to indicate the end of the header):</p>

<pre><strong>HTTP/1.1 101 Switching Protocols</strong>
Upgrade: websocket
Connection: Upgrade
<strong>Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=

</strong></pre>

<p>Additionally, the server can decide on extension/subprotocol requests here; see <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Miscellaneous">Miscellaneous</a> for details. The <code>Sec-WebSocket-Accept</code> header is important in that the server must derive it from the <a class="new" rel="nofollow" title="The documentation about this has not yet been written; please consider contributing!"><code>Sec-WebSocket-Key</code></a> that the client sent to it. To get it, c<span style="line-height: 1.5em;">oncatenate the client's </span><code style="font-size: 14px;">Sec-WebSocket-Key</code><span style="line-height: 1.5em;"> and the string "</span><code style="font-size: 14px;">258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code><span style="line-height: 1.5em;">" together (it's a "</span><a class="external" href="https://en.wikipedia.org/wiki/Magic_string" rel="noopener" style="line-height: 1.5em;">magic string</a><span style="line-height: 1.5em;">"),&nbsp;</span><span style="line-height: 1.5em;">take the </span><a class="external" href="https://en.wikipedia.org/wiki/SHA-1" rel="noopener" style="line-height: 1.5em;">SHA-1 hash</a><span style="line-height: 1.5em;"> of the result, and&nbsp;</span><span style="line-height: 1.5em;">return the </span><a class="external" href="https://en.wikipedia.org/wiki/Base64" rel="noopener" style="line-height: 1.5em;">base64</a><span style="line-height: 1.5em;"> encoding of that hash.</span></p>

<div class="note">
<p><strong>Note:</strong> This seemingly overcomplicated process exists so that it's obvious to the client whether or not the server supports WebSockets. This is important because security issues might arise if the server accepts a WebSockets connection but interprets the data as a HTTP request.</p>
</div>

<p>So if the Key was "<code>dGhlIHNhbXBsZSBub25jZQ==</code>", the <code>Sec-WebSocket-Accept</code> header's value is "<code>s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</code>". Once the server sends these headers, the handshake is complete and you can start swapping data!</p>

<div class="note">
<p><strong>Note:</strong> The server can send other headers like <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie" title="The Set-Cookie HTTP response header is used to send cookies from the server to the user agent."><code>Set-Cookie</code></a>, or ask for authentication or redirects via other status codes, before sending the reply handshake.</p>
</div>

<h3 id="Keeping_track_of_clients">Keeping track of clients</h3>

<p>This doesn't directly relate to the WebSocket protocol, but it's worth mentioning here: your server will have to keep track of clients' sockets so you don't keep handshaking again with clients who have already completed the handshake. The same client IP address can try to connect multiple times (but the server can deny them if they attempt too many connections in order to save itself from <a class="external" href="https://en.wikipedia.org/wiki/Denial_of_service" rel="noopener">Denial-of-Service attacks</a>).</p>

<p>For example, you might keep a table of usernames or ID numbers along with the corresponding <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" title="The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection."><code>WebSocket</code></a> and other data that you need to associate with that connection.</p>

<h2 id="Exchanging_data_frames">Exchanging data frames</h2>

<p>Either the client or the server can choose to send a message at any time — that's the magic of WebSockets. However, extracting information from these so-called "frames" of data is a not-so-magical experience. Although all frames follow the same specific format, data going from the client to the server is masked using <a class="external" href="https://en.wikipedia.org/wiki/XOR_cipher" rel="noopener">XOR encryption</a> (with a 32-bit key). Section 5 of the specification describes this in detail.</p>

<h3 id="Format">Format</h3>

<p>Each data frame (from the client to the server or vice-versa) follows this same format:</p>

<pre class="line-numbers language-html"><code class=" language-html">Frame format:  
​​
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-------+-+-------------+-------------------------------+
     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
     |N|V|V|V|       |S|             |   (if payload len==126/127)   |
     | |1|2|3|       |K|             |                               |
     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
     |     Extended payload length continued, if payload len == 127  |
     + - - - - - - - - - - - - - - - +-------------------------------+
     |                               |Masking-key, if MASK set to 1  |
     +-------------------------------+-------------------------------+
     | Masking-key (continued)       |          Payload Data         |
     +-------------------------------- - - - - - - - - - - - - - - - +
     :                     Payload Data continued ...                :
     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     |                     Payload Data continued ...                |
     +---------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The MASK bit simply tells whether the message is encoded. Messages from the client must be masked, so your server should expect this to be 1. (In fact, <a class="external" href="http://tools.ietf.org/html/rfc6455#section-5.1" rel="noopener">section 5.1 of the spec</a> says that your server must disconnect from a client if that client sends an unmasked message.) When sending a frame back to the client, do not mask it and do not set the mask bit. We'll explain masking later. <em>Note: You have to mask messages even when using a secure socket.&nbsp;</em>RSV1-3 can be ignored, they are for extensions.</p>

<p>The opcode field defines how to interpret the payload data: <span style="font-family: courier new,andale mono,monospace; line-height: 1.5;">0x0&nbsp;</span><span style="line-height: 1.5;">for continuation,</span><span style="font-family: courier new,andale mono,monospace; line-height: 1.5;">&nbsp;</span><code style="font-style: normal; line-height: 1.5;">0x1</code><span style="line-height: 1.5;"> for text (which is always encoded in UTF-8), </span><code style="font-style: normal; line-height: 1.5;">0x2</code><span style="line-height: 1.5;"> for binary, and other so-called "control codes" that will be discussed later. In this version of WebSockets, <code>0x3</code> to <code>0x7</code> and <code>0xB</code> to <code>0xF</code> have no meaning.</span></p>

<p>The FIN bit tells whether this is the last message in a series. If it's 0, then the server will keep listening for more parts of the message; otherwise, the server should consider the message delivered. More on this later.</p>

<h3 id="Decoding_Payload_Length">Decoding Payload Length</h3>

<p>To read the payload data, you must know when to stop reading. That's why the payload length is important to know. Unfortunately, this is somewhat complicated. To read it, follow these steps:</p>

<ol>
	<li>Read bits 9-15 (inclusive) and interpret that as an unsigned integer. If it's 125 or less, then that's the length; you're <strong>done</strong>. If it's 126, go to step 2. If it's 127, go to step 3.</li>
	<li>Read the next 16 bits and interpret those as an unsigned integer. You're <strong>done</strong>.</li>
	<li>Read the next 64 bits and interpret those as an unsigned integer (The most significant bit MUST be 0). You're <strong>done</strong>.</li>
</ol>

<h3 id="Reading_and_Unmasking_the_Data">Reading and Unmasking the Data</h3>

<p>If the MASK bit was set (and it should be, for client-to-server messages), read the next 4 octets (32 bits); this is the masking key.&nbsp;<span style="line-height: 1.5;">Once the payload length and masking key is decoded, you can go ahead and read that number of bytes from the socket. Let's call the data <strong>ENCODED</strong>, and the key <strong>MASK</strong>. To get <strong>DECODED</strong>, loop through the octets (bytes a.k.a. characters for text data) of <strong>ENCODED</strong> and XOR the octet with the (i modulo 4)th octet of MASK. In pseudo-code (that happens to be valid JavaScript):</span></p>

<pre>var DECODED = "";
for (var i = 0; i &lt; ENCODED.length; i++) {
    DECODED[i] = ENCODED[i] ^ MASK[i % 4];
<span style="line-height: 1.5;">}</span></pre>

<p><span style="line-height: 1.5;">Now you can figure out what <strong>DECODED</strong> means depending on your application.</span></p>

<h3 id="Message_Fragmentation">Message Fragmentation</h3>

<p>The FIN and opcode fields work together to send a message split up into separate frames. &nbsp;This is called message fragmentation. Fragmentation is only available on opcodes <code>0x0</code> to <code>0x2</code>.</p>

<p><span style="line-height: 1.5;">Recall that the opcode tells what a frame is meant to do.&nbsp;If it's&nbsp;<code>0x1</code>, the payload is text. If it's&nbsp;<code>0x2</code>, the payload is binary data.</span><span style="line-height: 1.5;">&nbsp;However, if it's&nbsp;</span><code style="font-style: normal; line-height: 1.5;">0x0,</code><span style="line-height: 1.5;">&nbsp;the frame is a continuation frame. This means the server should concatenate the frame's payload to the last frame it received from that client.</span><span style="line-height: 1.5;">&nbsp;Here is a rough sketch, in which a server reacts to a client sending text messages. The first message is sent in a single frame, while the second message is sent across three frames. FIN and opcode details are shown only for the client:</span></p>

<pre style="font-size: 14px;"><strong>Client:</strong> FIN=1, opcode=0x1, msg="hello"
<strong>Server:</strong> <em>(process complete message immediately) </em>Hi.
<strong>Client:</strong> FIN=0, opcode=0x1, msg="and a"
<strong>Server:</strong> <em>(listening, new message containing text started)</em>
<strong>Client:</strong> FIN=0, opcode=0x0, msg="happy new"
<strong>Server:</strong> <em>(listening, payload concatenated to previous message)</em>
<strong>Client:</strong> FIN=1, opcode=0x0, msg="year!"
<strong>Server:</strong> <em>(process complete message) </em>Happy new year to you too!</pre>

<p>Notice the first frame contains an entire message (has&nbsp;<code>FIN=1</code>&nbsp;and&nbsp;<code>opcode!=0x0</code>), so the server can process or respond as it sees fit. The second frame sent by the client has a text payload (<code>opcode=0x1</code>), but the entire message has not arrived yet (<code>FIN=0</code>). All remaining parts of that message are sent with continuation frames (<code>opcode=0x0</code>), and the final frame of the message is marked by&nbsp;<code>FIN=1</code>. <a class="external" href="http://tools.ietf.org/html/rfc6455#section-5.4" rel="noopener">Section 5.4 of the spec</a>&nbsp;describes message fragmentation.</p>

<h2 id="Pings_and_Pongs_The_Heartbeat_of_WebSockets">Pings and Pongs: The Heartbeat of WebSockets</h2>

<p>At any point after the handshake, either the client or the server can choose to send a ping to the other party. When the ping is received, the recipient must send back a pong as soon as possible. You can use this to make sure that the client is still connected, for example.</p>

<p>A ping or pong is just a regular frame, but it's a <strong>control frame</strong>. Pings have an opcode of&nbsp;<code>0x9</code>, and pongs have an opcode of <code>0xA</code>. When you get a ping, send back a pong with the exact same Payload Data as the ping (for pings and pongs, the max payload length is 125). You might also get a pong without ever sending a ping; ignore this if it happens.</p>

<div class="note">
<p>If you have gotten more than one ping before you get the chance to send a pong, you only send one pong.</p>
</div>

<h2 id="Closing_the_connection">Closing the connection</h2>

<p>To close a connection either the client or server can send a control frame with data containing a specified control sequence to begin the closing handshake (detailed in <a class="external" href="http://tools.ietf.org/html/rfc6455#section-5.5.1" rel="noopener">Section 5.5.1</a>). Upon receiving such a frame,&nbsp;the other peer sends a Close frame in response. The first peer then closes the connection. Any further data received after closing of connection&nbsp;is then discarded.&nbsp;</p>

<h2 id="Miscellaneous_2"><a name="Miscellaneous">Miscellaneous</a></h2>

<div class="note">
<p>WebSocket codes, extensions, subprotocols, etc. are registered at the <a class="external" href="http://www.iana.org/assignments/websocket/websocket.xml" rel="noopener">IANA WebSocket Protocol Registry</a>.</p>
</div>

<p>WebSocket extensions and subprotocols are negotiated via headers during <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#Handshake">the handshake</a>. Sometimes extensions and subprotocols seem too similar to be different things, but there is a clear distinction. Extensions control the WebSocket <strong>frame</strong> and <strong>modify</strong> the payload, while subprotocols structure the WebSocket <strong>payload</strong> and <strong>never modify</strong> anything. Extensions are optional and generalized (like compression); subprotocols are mandatory and localized (like ones for chat and for MMORPG games).</p>

<h3 id="Extensions">Extensions</h3>

<div class="note">
<p><strong>This section needs expansion. Please edit if you are equipped to do so.</strong></p>
</div>

<p>Think of an extension as compressing a file before e-mailing it to someone. Whatever you do, you're sending the <em>same</em> data in different forms. The recipient will eventually be able to get the same data as your local copy, but it is sent differently. That's what an extension does. WebSockets defines a protocol and a simple way to send data, but an extension such as compression could allow sending the same data but in a shorter format.</p>

<div class="note">
<p>Extensions are explained in sections 5.8, 9, 11.3.2, and 11.4 of the spec.</p>
</div>

<p><em>TODO</em></p>

<h3 id="Subprotocols">Subprotocols</h3>

<p>Think of a subprotocol as a custom <a class="external" href="https://en.wikipedia.org/wiki/XML_schema" rel="noopener">XML schema</a> or <a class="external" href="https://en.wikipedia.org/wiki/Document_Type_Definition" rel="noopener">doctype declaration</a>. You're still using XML and its syntax, but you're additionally restricted by a structure you agreed on. WebSocket subprotocols are just like that. They do not introduce anything fancy, they just establish structure. Like a doctype or schema, both parties must agree on the subprotocol; unlike a doctype or schema, the subprotocol is implemented on the server and cannot be externally refered to by the client.</p>

<div class="note">
<p>Subprotocols are explained in sections 1.9, 4.2, 11.3.4, and 11.5 of the spec.</p>
</div>

<p>A client has to ask for a specific subprotocol. To do so, it will send something like this <strong>as part of the original handshake</strong>:</p>

<pre class="line-numbers language-html"><code class=" language-html">GET /chat HTTP/1.1
...
Sec-WebSocket-Protocol: soap, wamp

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>or, equivalently:</p>

<pre class="line-numbers language-html"><code class=" language-html">...
Sec-WebSocket-Protocol: soap
Sec-WebSocket-Protocol: wamp

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>Now the server must pick one of the protocols that the client suggested and it supports. If there are more than one, send the first one the client sent. Imagine our server can use both <code>soap</code> and <code>wamp</code>.&nbsp;Then, in the response handshake, it'll send:</p>

<pre class="line-numbers language-html"><code class=" language-html">Sec-WebSocket-Protocol: soap

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<div class="warning">
<p>The server can't send more than one <code>Sec-Websocket-Protocol</code> header.<br>
<span style="line-height: 1.5;">If the server doesn't want to use a</span><span style="line-height: 1.5;">ny subprotocol, </span><strong style="line-height: 1.5;">it shouldn't send any <code>Sec-WebSocket-Protocol</code> header</strong><span style="line-height: 1.5;">. Sending a blank header is incorrect.<br>
The client may close the connection if it doesn't get the subprotocol it wants.</span></p>
</div>

<p>If you want your server to obey certain subprotocols, then naturally you'll need extra code on the server. Let's imagine we're using a subprotocol <code>json</code>. In this subprotocol, all data is passed as <a class="external" href="https://en.wikipedia.org/wiki/JSON" rel="noopener">JSON</a>. If the client solicits this protocol and the server wants to use it, the server will need to have a JSON parser. Practically speaking, this will be part of a library, but the server will need to pass the data around.</p>

<div class="note">
<p><strong>Tip:</strong> To avoid name conflict, it's recommended to make your subprotocol name part of a domain string. If you are building a custom chat app that uses a proprietary format exclusive to Example Inc., then you might use this:&nbsp;<code>Sec-WebSocket-Protocol: chat.example.com</code>. Note that this isn't required, it's just an optional convention, and you can use any string you wish.</p>
</div>

<h2 id="Related">Related</h2>

<ul>
	<li><a class="external" href="https://github.com/alexhultman/libwshandshake" rel="noopener">WebSocket handshake library in C++</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/WebSockets/Writing_WebSocket_client_applications">Writing WebSocket client applications</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/WebSockets/Writing_WebSocket_server" title="/en-US/docs/WebSockets/Writing_WebSocket_server">Tutorial: Websocket server in C#</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/WebSockets/WebSocket_Server_Vb.NET">Tutorial: Websocket server in VB.NET</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java">Tutorial: Websocket server in Java</a></li>
</ul></article><div class="metadata"><section class="document-meta"><header class="visually-hidden"><h4>Metadata</h4></header> <ul><li class="last-modified"><b>Last modified:</b> <time datetime="2019-04-11T06:37:28.244122">Apr 11, 2019</time>,<!-- --> <a href="https://wiki.developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers$history" rel="nofollow">by MDN contributors</a></li></ul></section></div></div><div class="sidebar"><div class="quick-links"><div class="quick-links-head sidebar-heading">Related Topics</div><div><ol><li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/Websockets_API">Websockets API</a></strong></li><li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"><code>WebSockets_API</code></a></strong></li><li class="toggle"><details open=""><summary>Related pages for Websockets API</summary><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent"><code>CloseEvent</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent"><code>MessageEvent</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"><code>WebSocket</code></a></li></ol></details></li></ol></div></div></div></div></main><section class="newsletter-container"><div id="newsletter-form-container" class="newsletter"><form class="newsletter-form nodisable" name="newsletter-form"><section class="newsletter-head"><h2 class="newsletter-teaser">Learn the best of web development</h2><p class="newsletter-description">Get the latest and greatest from MDN delivered straight to your inbox.</p><p class="hidden" aria-hidden="true">The newsletter is offered in English only at the moment.</p></section><fieldset class="newsletter-fields"><input type="hidden" name="fmt" value="H"><input type="hidden" name="newsletters" value="app-dev"><div class="form-group newsletter-group-email"><label for="newsletter-email-input" class="form-label offscreen">E-mail</label><input type="email" id="newsletter-email-input" name="email" class="form-input newsletter-input-email" placeholder="you@example.com" required=""></div><div id="newsletter-privacy" class="hidden" aria-hidden="true"><input type="checkbox" id="newsletter-privacy-input" name="privacy" required=""><label for="newsletter-privacy-input">I’m okay with Mozilla handling my info as explained in this <a href="https://www.mozilla.org/privacy/">Privacy Policy</a>.</label></div><div class="newsletter-group-submit"><button id="newsletter-submit" type="submit" class="button neutral newsletter-submit">Sign up now</button></div></fieldset></form><button type="button" class="only-icon newsletter-hide" aria-controls="newsletter-form-container"><span>Hide Newsletter Sign-up</span><svg class="icon icon-close" xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 28"><path d="M20.281 20.656c0 .391-.156.781-.438 1.062l-2.125 2.125c-.281.281-.672.438-1.062.438s-.781-.156-1.062-.438L11 19.249l-4.594 4.594c-.281.281-.672.438-1.062.438s-.781-.156-1.062-.438l-2.125-2.125c-.281-.281-.438-.672-.438-1.062s.156-.781.438-1.062L6.751 15l-4.594-4.594c-.281-.281-.438-.672-.438-1.062s.156-.781.438-1.062l2.125-2.125c.281-.281.672-.438 1.062-.438s.781.156 1.062.438L11 10.751l4.594-4.594c.281-.281.672-.438 1.062-.438s.781.156 1.062.438l2.125 2.125c.281.281.438.672.438 1.062s-.156.781-.438 1.062L15.249 15l4.594 4.594c.281.281.438.672.438 1.062z"></path></svg></button></div></section><footer id="nav-footer" class="nav-footer"><div class="center"><a href="https://developer.mozilla.org/en-US/" class="nav-footer-logo">MDN Web Docs</a><div class="footer-group footer-group-mdn"><h2 class="footer-title">MDN</h2><ul class="footer-list"><li><a href="https://developer.mozilla.org/en-US/docs/Web">Web Technologies</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</a></li><li><a href="https://developer.mozilla.org/en-US/docs/MDN/About">About MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/MDN/Feedback">Feedback</a></li><li class="footer-social"><a href="https://twitter.com/mozdevnet"><svg class="icon icon-twitter" xmlns="http://www.w3.org/2000/svg" width="26" height="28" aria-label="Twitter" role="img" focusable="false"><path d="M25.312 6.375a10.85 10.85 0 0 1-2.531 2.609c.016.219.016.438.016.656 0 6.672-5.078 14.359-14.359 14.359-2.859 0-5.516-.828-7.75-2.266.406.047.797.063 1.219.063 2.359 0 4.531-.797 6.266-2.156a5.056 5.056 0 0 1-4.719-3.5c.313.047.625.078.953.078.453 0 .906-.063 1.328-.172a5.048 5.048 0 0 1-4.047-4.953v-.063a5.093 5.093 0 0 0 2.281.641 5.044 5.044 0 0 1-2.25-4.203c0-.938.25-1.797.688-2.547a14.344 14.344 0 0 0 10.406 5.281 5.708 5.708 0 0 1-.125-1.156 5.045 5.045 0 0 1 5.047-5.047 5.03 5.03 0 0 1 3.687 1.594 9.943 9.943 0 0 0 3.203-1.219 5.032 5.032 0 0 1-2.219 2.781c1.016-.109 2-.391 2.906-.781z"></path></svg></a></li><li class="footer-social"><a href="https://github.com/mdn/"><svg class="icon icon-github" xmlns="http://www.w3.org/2000/svg" width="24" height="28" aria-label="GitHub" role="img" focusable="false"><path d="M12 2c6.625 0 12 5.375 12 12 0 5.297-3.437 9.797-8.203 11.391-.609.109-.828-.266-.828-.578 0-.391.016-1.687.016-3.297 0-1.125-.375-1.844-.812-2.219 2.672-.297 5.484-1.313 5.484-5.922 0-1.313-.469-2.375-1.234-3.219.125-.313.531-1.531-.125-3.187-1-.313-3.297 1.234-3.297 1.234a11.28 11.28 0 0 0-6 0S6.704 6.656 5.704 6.969c-.656 1.656-.25 2.875-.125 3.187-.766.844-1.234 1.906-1.234 3.219 0 4.594 2.797 5.625 5.469 5.922-.344.313-.656.844-.766 1.609-.688.313-2.438.844-3.484-1-.656-1.141-1.844-1.234-1.844-1.234-1.172-.016-.078.734-.078.734.781.359 1.328 1.75 1.328 1.75.703 2.141 4.047 1.422 4.047 1.422 0 1 .016 1.937.016 2.234 0 .313-.219.688-.828.578C3.439 23.796.002 19.296.002 13.999c0-6.625 5.375-12 12-12zM4.547 19.234c.031-.063-.016-.141-.109-.187-.094-.031-.172-.016-.203.031-.031.063.016.141.109.187.078.047.172.031.203-.031zm.484.532c.063-.047.047-.156-.031-.25-.078-.078-.187-.109-.25-.047-.063.047-.047.156.031.25.078.078.187.109.25.047zm.469.703c.078-.063.078-.187 0-.297-.063-.109-.187-.156-.266-.094-.078.047-.078.172 0 .281s.203.156.266.109zm.656.656c.063-.063.031-.203-.063-.297-.109-.109-.25-.125-.313-.047-.078.063-.047.203.063.297.109.109.25.125.313.047zm.891.391c.031-.094-.063-.203-.203-.25-.125-.031-.266.016-.297.109s.063.203.203.234c.125.047.266 0 .297-.094zm.984.078c0-.109-.125-.187-.266-.172-.141 0-.25.078-.25.172 0 .109.109.187.266.172.141 0 .25-.078.25-.172zm.906-.156c-.016-.094-.141-.156-.281-.141-.141.031-.234.125-.219.234.016.094.141.156.281.125s.234-.125.219-.219z"></path></svg></a></li></ul></div><a href="https://mozilla.org/" class="nav-footer-mozilla">Mozilla</a><div class="footer-group footer-group-mozilla"><h2 class="footer-title">Mozilla</h2><ul class="footer-list"><li><a href="https://www.mozilla.org/about/">About</a></li><li><a href="https://www.mozilla.org/contact/">Contact Us</a></li><li><a href="https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&amp;utm_campaign=footer&amp;utm_medium=referral">Firefox</a></li><li class="footer-social"><a href="https://twitter.com/mozilla"><svg class="icon icon-twitter" xmlns="http://www.w3.org/2000/svg" width="26" height="28" aria-label="Twitter" role="img" focusable="false"><path d="M25.312 6.375a10.85 10.85 0 0 1-2.531 2.609c.016.219.016.438.016.656 0 6.672-5.078 14.359-14.359 14.359-2.859 0-5.516-.828-7.75-2.266.406.047.797.063 1.219.063 2.359 0 4.531-.797 6.266-2.156a5.056 5.056 0 0 1-4.719-3.5c.313.047.625.078.953.078.453 0 .906-.063 1.328-.172a5.048 5.048 0 0 1-4.047-4.953v-.063a5.093 5.093 0 0 0 2.281.641 5.044 5.044 0 0 1-2.25-4.203c0-.938.25-1.797.688-2.547a14.344 14.344 0 0 0 10.406 5.281 5.708 5.708 0 0 1-.125-1.156 5.045 5.045 0 0 1 5.047-5.047 5.03 5.03 0 0 1 3.687 1.594 9.943 9.943 0 0 0 3.203-1.219 5.032 5.032 0 0 1-2.219 2.781c1.016-.109 2-.391 2.906-.781z"></path></svg></a></li><li class="footer-social"><a href="https://www.instagram.com/mozillagram/"><svg class="icon icon-instagram" xmlns="http://www.w3.org/2000/svg" width="24" height="28" aria-label="Instagram" role="img" focusable="false"><path d="M16 14c0-2.203-1.797-4-4-4s-4 1.797-4 4 1.797 4 4 4 4-1.797 4-4zm2.156 0c0 3.406-2.75 6.156-6.156 6.156S5.844 17.406 5.844 14 8.594 7.844 12 7.844s6.156 2.75 6.156 6.156zm1.688-6.406c0 .797-.641 1.437-1.437 1.437S16.97 8.39 16.97 7.594s.641-1.437 1.437-1.437 1.437.641 1.437 1.437zM12 4.156c-1.75 0-5.5-.141-7.078.484-.547.219-.953.484-1.375.906s-.688.828-.906 1.375c-.625 1.578-.484 5.328-.484 7.078s-.141 5.5.484 7.078c.219.547.484.953.906 1.375s.828.688 1.375.906c1.578.625 5.328.484 7.078.484s5.5.141 7.078-.484c.547-.219.953-.484 1.375-.906s.688-.828.906-1.375c.625-1.578.484-5.328.484-7.078s.141-5.5-.484-7.078c-.219-.547-.484-.953-.906-1.375s-.828-.688-1.375-.906C17.5 4.015 13.75 4.156 12 4.156zM24 14c0 1.656.016 3.297-.078 4.953-.094 1.922-.531 3.625-1.937 5.031s-3.109 1.844-5.031 1.937c-1.656.094-3.297.078-4.953.078s-3.297.016-4.953-.078c-1.922-.094-3.625-.531-5.031-1.937S.173 20.875.08 18.953C-.014 17.297.002 15.656.002 14s-.016-3.297.078-4.953c.094-1.922.531-3.625 1.937-5.031s3.109-1.844 5.031-1.937c1.656-.094 3.297-.078 4.953-.078s3.297-.016 4.953.078c1.922.094 3.625.531 5.031 1.937s1.844 3.109 1.937 5.031C24.016 10.703 24 12.344 24 14z"></path></svg></a></li></ul></div><ul class="footer-tos"><li><a href="https://www.mozilla.org/about/legal/terms/mozilla">Terms</a></li><li><a href="https://www.mozilla.org/privacy/websites/">Privacy</a></li><li><a href="https://www.mozilla.org/privacy/websites/#cookies">Cookies</a></li></ul><div id="license" class="contentinfo"><p>© 2005-<!-- -->2020<!-- --> Mozilla and individual contributors.</p><p>Content is available under<!-- --> <a href="https://developer.mozilla.org/docs/MDN/About#Copyrights_and_licenses">these licenses</a>.</p></div></div></footer></div>
<script>window._react_data = JSON.parse("{\"locale\":\"en-US\",\"stringCatalog\":{},\"pluralExpression\":null,\"url\":\"/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\",\"documentData\":{\"locale\":\"en-US\",\"slug\":\"Web/API/WebSockets_API/Writing_WebSocket_servers\",\"enSlug\":\"Web/API/WebSockets_API/Writing_WebSocket_servers\",\"id\":79171,\"title\":\"Writing WebSocket servers\",\"summary\":\"A WebSocket server is an application listening on any port of a TCP server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.\",\"language\":\"English (US)\",\"hrefLang\":\"en\",\"absoluteURL\":\"/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\",\"wikiURL\":\"https://wiki.developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\",\"translateURL\":\"https://wiki.developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers$locales\",\"translationStatus\":null,\"bodyHTML\":\"<div></div>\\n\\n<p><span class=\\\"seoSummary\\\">A WebSocket server is an application listening on any port of a TCP server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.</span></p>\\n\\n<p>A WebSocket server can be written in any server-side programming language that is capable of <a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/Berkeley_sockets\\\" rel=\\\"noopener\\\">Berkeley sockets</a>, such as C(++), Python, <a href=\\\"/en-US/docs/PHP\\\">PHP</a>, or <a href=\\\"/en-US/docs/Web/JavaScript/Server-Side_JavaScript\\\">server-side JavaScript</a>. This is not a tutorial in any specific language, but serves as a guide to facilitate writing your own server.</p>\\n\\n<p>This article assumes you're already familiar with how <a class=\\\"glossaryLink\\\" href=\\\"/en-US/docs/Glossary/HTTP\\\" title=\\\"HTTP: The HyperText Transfer Protocol (HTTP)\u00A0is the underlying network protocol that enables transfer of hypermedia documents on the Web, typically between a browser and a server so that humans can read them. The current version of the HTTP specification is called HTTP/2.\\\">HTTP</a> works, and that you have a moderate level of programming experience. Depending on language support, knowledge of TCP sockets may be required. The scope of this guide is to present the minimum knowledge you need to write a WebSocket server.</p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Note:</strong> Read the latest official WebSockets specification, <a class=\\\"external\\\" href=\\\"http://datatracker.ietf.org/doc/rfc6455/?include_text=1\\\" rel=\\\"noopener\\\">RFC 6455</a>. Sections 1 and 4-7 are especially interesting to server implementors. Section 10 discusses security and you should definitely peruse it before exposing your server.</p>\\n</div>\\n\\n<p>A WebSocket server is explained on a very low level here. WebSocket servers are often separate and specialized servers (for load-balancing or other practical reasons), so you will often use a <a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/Reverse_proxy\\\" rel=\\\"noopener\\\">reverse proxy</a> (such as a regular HTTP server) to detect WebSocket handshakes, pre-process them, and send those clients to a real WebSocket server. This means that you don't have to bloat your server code with cookie and authentication handlers (for example).</p>\\n\\n<h2 id=\\\"The_WebSocket_handshake\\\">The WebSocket handshake</h2>\\n\\n<p>First of all, the server must listen for incoming socket connections using a standard TCP socket. Depending on your platform, this may be handled for you automatically. For example, let's assume that your server is listening on <code>example.com</code>, port 8000, and your socket server responds to <a href=\\\"/en-US/docs/Web/HTTP/Methods/GET\\\" title=\\\"The HTTP GET method requests a representation of the specified resource. Requests using GET should only retrieve data.\\\"><code>GET</code></a> requests at <code>example.com/chat</code>.</p>\\n\\n<div class=\\\"warning\\\">\\n<p><strong>Warning:</strong> The server may listen on any port it chooses, but if it chooses any port other than 80 or 443, it may have problems with firewalls and/or proxies. Browsers generally require a secure connection for WebSockets, although they may offer an exception for local devices.</p>\\n</div>\\n\\n<p>The handshake is the \\\"Web\\\" in WebSockets. It's the bridge from HTTP to WebSockets. In the handshake, details of the connection are negotiated, and either party can back out before completion if the terms are unfavorable. The server must be careful to understand everything the client asks for, otherwise security issues will be introduced.</p>\\n\\n<div class=\\\"blockIndicator note\\\">\\n<p><strong>Tip:</strong> The request-uri (<code>/chat</code> here) has no defined meaning in the spec. So many people cleverly use it to let one server handle multiple WebSocket applications. For example, <code>example.com/chat</code>\u00A0could invoke a multiuser chat app, while <code>/game</code> on the same server might invoke a multiplayer game.</p>\\n</div>\\n\\n<h3 id=\\\"Client_handshake_request\\\">Client handshake request</h3>\\n\\n<p>Even though you're building a server, a client still has to start the WebSocket handshake process by contacting the server and requesting a WebSocket connection. So you must know how to interpret the client's request. The <strong>client</strong> will send a pretty standard HTTP request with headers that looks like this (the HTTP version <strong>must</strong> be 1.1 or greater, and the method <strong>must</strong> be <code>GET</code>):</p>\\n\\n<pre>GET /chat HTTP/1.1\\nHost: example.com:8000\\n<strong>Upgrade: websocket</strong>\\n<strong>Connection: Upgrade</strong>\\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\nSec-WebSocket-Version: 13\\n\\n</pre>\\n\\n<p>The client can solicit extensions and/or subprotocols here; see <a href=\\\"#Miscellaneous\\\">Miscellaneous</a> for details. Also, common headers like <a href=\\\"/en-US/docs/Web/HTTP/Headers/User-Agent\\\" title=\\\"The User-Agent request header contains a characteristic string that allows the network protocol peers to identify the application type, operating system, software vendor or software version of the requesting software user agent.\\\"><code>User-Agent</code></a>, <a href=\\\"/en-US/docs/Web/HTTP/Headers/Referer\\\" title=\\\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\\"><code>Referer</code></a>, <a href=\\\"/en-US/docs/Web/HTTP/Headers/Cookie\\\" title=\\\"The Cookie HTTP request header contains stored HTTP cookies previously sent by the server with the Set-Cookie header.\\\"><code>Cookie</code></a>, or authentication headers might be there as well. Do whatever you want with those; they don't directly pertain to the WebSocket. It's also safe to ignore them. In many common setups, a reverse proxy has already dealt with them.</p>\\n\\n<div class=\\\"blockIndicator note\\\">\\n<p><strong>Tip:</strong> All <strong>browsers</strong> will send an <a href=\\\"https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Origin\\\"><code>Origin</code> header</a>. You can use this header for security (checking for same origin, whitelisting/ blacklisting, etc.) and send a <a href=\\\"https://developer.mozilla.org/en-US/docs/HTTP/Response_codes#403\\\">403 Forbidden</a> if you don't like what you see. However, be warned that non-browser agents can just send a faked <code>Origin</code>. Most applications will reject requests without this header.</p>\\n</div>\\n\\n<p>If any header is not understood or has an incorrect value, the server should send a <a href=\\\"/en-US/docs/Web/HTTP/Status/400\\\" title=\\\"The HyperText Transfer Protocol (HTTP) 400 Bad Request response status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\\\"><code>400</code></a> (\\\"Bad Request\\\")} response and immediately close the socket. As usual, it may also give the reason why the handshake failed in the HTTP response body, but the message may never be displayed (browsers\u00A0do not display it). If the server doesn't understand that version of WebSockets, it should send a <a class=\\\"new\\\" href=\\\"/en-US/docs/Web/HTTP/Headers/Sec-WebSocket-Version\\\" rel=\\\"nofollow\\\" title=\\\"The documentation about this has not yet been written; please consider contributing!\\\"><code>Sec-WebSocket-Version</code></a> header back that contains the version(s) it does understand.\u00A0 In the example above, it indicates version 13 of the WebSocket protocol.</p>\\n\\n<p>The most interesting header here is <a class=\\\"new\\\" href=\\\"/en-US/docs/Web/HTTP/Headers/Sec-WebSocket-Key\\\" rel=\\\"nofollow\\\" title=\\\"The documentation about this has not yet been written; please consider contributing!\\\"><code>Sec-WebSocket-Key</code></a>. Let's look at that next.</p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Note:</strong> <a href=\\\"https://developer.mozilla.org/en-US/docs/HTTP/Response_codes\\\">Regular HTTP status codes</a> can only be used before the handshake. After the handshake succeeds, you have to use a different set of codes (defined in section 7.4 of the spec).</p>\\n</div>\\n\\n<h3 id=\\\"Server_handshake_response\\\">Server handshake response</h3>\\n\\n<p>When the <strong>server</strong> receives the handshake request, it should send back a special response that indicates that the protocol will be changing from HTTP to WebSocket. That header looks something like the following (remember each header line ends with <code>\\\\r\\\\n</code> and put an extra <code>\\\\r\\\\n</code> after the last one to indicate the end of the header):</p>\\n\\n<pre><strong>HTTP/1.1 101 Switching Protocols</strong>\\nUpgrade: websocket\\nConnection: Upgrade\\n<strong>Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\\n\\n</strong></pre>\\n\\n<p>Additionally, the server can decide on extension/subprotocol requests here; see <a href=\\\"#Miscellaneous\\\">Miscellaneous</a> for details. The <code>Sec-WebSocket-Accept</code> header is important in that the server must derive it from the <a class=\\\"new\\\" href=\\\"/en-US/docs/Web/HTTP/Headers/Sec-WebSocket-Key\\\" rel=\\\"nofollow\\\" title=\\\"The documentation about this has not yet been written; please consider contributing!\\\"><code>Sec-WebSocket-Key</code></a> that the client sent to it. To get it, c<span style=\\\"line-height: 1.5em;\\\">oncatenate the client's </span><code style=\\\"font-size: 14px;\\\">Sec-WebSocket-Key</code><span style=\\\"line-height: 1.5em;\\\"> and the string \\\"</span><code style=\\\"font-size: 14px;\\\">258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code><span style=\\\"line-height: 1.5em;\\\">\\\" together (it's a \\\"</span><a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/Magic_string\\\" rel=\\\"noopener\\\" style=\\\"line-height: 1.5em;\\\">magic string</a><span style=\\\"line-height: 1.5em;\\\">\\\"),\u00A0</span><span style=\\\"line-height: 1.5em;\\\">take the </span><a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/SHA-1\\\" rel=\\\"noopener\\\" style=\\\"line-height: 1.5em;\\\">SHA-1 hash</a><span style=\\\"line-height: 1.5em;\\\"> of the result, and\u00A0</span><span style=\\\"line-height: 1.5em;\\\">return the </span><a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/Base64\\\" rel=\\\"noopener\\\" style=\\\"line-height: 1.5em;\\\">base64</a><span style=\\\"line-height: 1.5em;\\\"> encoding of that hash.</span></p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Note:</strong> This seemingly overcomplicated process exists so that it's obvious to the client whether or not the server supports WebSockets. This is important because security issues might arise if the server accepts a WebSockets connection but interprets the data as a HTTP request.</p>\\n</div>\\n\\n<p>So if the Key was \\\"<code>dGhlIHNhbXBsZSBub25jZQ==</code>\\\", the <code>Sec-WebSocket-Accept</code> header's value is \\\"<code>s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</code>\\\". Once the server sends these headers, the handshake is complete and you can start swapping data!</p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Note:</strong> The server can send other headers like <a href=\\\"/en-US/docs/Web/HTTP/Headers/Set-Cookie\\\" title=\\\"The Set-Cookie HTTP response header is used to send cookies from the server to the user agent.\\\"><code>Set-Cookie</code></a>, or ask for authentication or redirects via other status codes, before sending the reply handshake.</p>\\n</div>\\n\\n<h3 id=\\\"Keeping_track_of_clients\\\">Keeping track of clients</h3>\\n\\n<p>This doesn't directly relate to the WebSocket protocol, but it's worth mentioning here: your server will have to keep track of clients' sockets so you don't keep handshaking again with clients who have already completed the handshake. The same client IP address can try to connect multiple times (but the server can deny them if they attempt too many connections in order to save itself from <a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/Denial_of_service\\\" rel=\\\"noopener\\\">Denial-of-Service attacks</a>).</p>\\n\\n<p>For example, you might keep a table of usernames or ID numbers along with the corresponding <a href=\\\"/en-US/docs/Web/API/WebSocket\\\" title=\\\"The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.\\\"><code>WebSocket</code></a> and other data that you need to associate with that connection.</p>\\n\\n<h2 id=\\\"Exchanging_data_frames\\\">Exchanging data frames</h2>\\n\\n<p>Either the client or the server can choose to send a message at any time \u2014 that's the magic of WebSockets. However, extracting information from these so-called \\\"frames\\\" of data is a not-so-magical experience. Although all frames follow the same specific format, data going from the client to the server is masked using <a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/XOR_cipher\\\" rel=\\\"noopener\\\">XOR encryption</a> (with a 32-bit key). Section 5 of the specification describes this in detail.</p>\\n\\n<h3 id=\\\"Format\\\">Format</h3>\\n\\n<p>Each data frame (from the client to the server or vice-versa) follows this same format:</p>\\n\\n<pre>Frame format:  \\n\u200B\u200B\\n      0                   1                   2                   3\\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\\n     +-+-+-+-+-------+-+-------------+-------------------------------+\\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\\n     | |1|2|3|       |K|             |                               |\\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\\n     |     Extended payload length continued, if payload len == 127  |\\n     + - - - - - - - - - - - - - - - +-------------------------------+\\n     |                               |Masking-key, if MASK set to 1  |\\n     +-------------------------------+-------------------------------+\\n     | Masking-key (continued)       |          Payload Data         |\\n     +-------------------------------- - - - - - - - - - - - - - - - +\\n     :                     Payload Data continued ...                :\\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\\n     |                     Payload Data continued ...                |\\n     +---------------------------------------------------------------+</pre>\\n\\n<p>The MASK bit simply tells whether the message is encoded. Messages from the client must be masked, so your server should expect this to be 1. (In fact, <a class=\\\"external\\\" href=\\\"http://tools.ietf.org/html/rfc6455#section-5.1\\\" rel=\\\"noopener\\\">section 5.1 of the spec</a> says that your server must disconnect from a client if that client sends an unmasked message.) When sending a frame back to the client, do not mask it and do not set the mask bit. We'll explain masking later. <em>Note: You have to mask messages even when using a secure socket.\u00A0</em>RSV1-3 can be ignored, they are for extensions.</p>\\n\\n<p>The opcode field defines how to interpret the payload data: <span style=\\\"font-family: courier new,andale mono,monospace; line-height: 1.5;\\\">0x0\u00A0</span><span style=\\\"line-height: 1.5;\\\">for continuation,</span><span style=\\\"font-family: courier new,andale mono,monospace; line-height: 1.5;\\\">\u00A0</span><code style=\\\"font-style: normal; line-height: 1.5;\\\">0x1</code><span style=\\\"line-height: 1.5;\\\"> for text (which is always encoded in UTF-8), </span><code style=\\\"font-style: normal; line-height: 1.5;\\\">0x2</code><span style=\\\"line-height: 1.5;\\\"> for binary, and other so-called \\\"control codes\\\" that will be discussed later. In this version of WebSockets, <code>0x3</code> to <code>0x7</code> and <code>0xB</code> to <code>0xF</code> have no meaning.</span></p>\\n\\n<p>The FIN bit tells whether this is the last message in a series. If it's 0, then the server will keep listening for more parts of the message; otherwise, the server should consider the message delivered. More on this later.</p>\\n\\n<h3 id=\\\"Decoding_Payload_Length\\\">Decoding Payload Length</h3>\\n\\n<p>To read the payload data, you must know when to stop reading. That's why the payload length is important to know. Unfortunately, this is somewhat complicated. To read it, follow these steps:</p>\\n\\n<ol>\\n\\t<li>Read bits 9-15 (inclusive) and interpret that as an unsigned integer. If it's 125 or less, then that's the length; you're <strong>done</strong>. If it's 126, go to step 2. If it's 127, go to step 3.</li>\\n\\t<li>Read the next 16 bits and interpret those as an unsigned integer. You're <strong>done</strong>.</li>\\n\\t<li>Read the next 64 bits and interpret those as an unsigned integer (The most significant bit MUST be 0). You're <strong>done</strong>.</li>\\n</ol>\\n\\n<h3 id=\\\"Reading_and_Unmasking_the_Data\\\">Reading and Unmasking the Data</h3>\\n\\n<p>If the MASK bit was set (and it should be, for client-to-server messages), read the next 4 octets (32 bits); this is the masking key.\u00A0<span style=\\\"line-height: 1.5;\\\">Once the payload length and masking key is decoded, you can go ahead and read that number of bytes from the socket. Let's call the data <strong>ENCODED</strong>, and the key <strong>MASK</strong>. To get <strong>DECODED</strong>, loop through the octets (bytes a.k.a. characters for text data) of <strong>ENCODED</strong> and XOR the octet with the (i modulo 4)th octet of MASK. In pseudo-code (that happens to be valid JavaScript):</span></p>\\n\\n<pre>var DECODED = \\\"\\\";\\nfor (var i = 0; i &lt; ENCODED.length; i++) {\\n    DECODED[i] = ENCODED[i] ^ MASK[i % 4];\\n<span style=\\\"line-height: 1.5;\\\">}</span></pre>\\n\\n<p><span style=\\\"line-height: 1.5;\\\">Now you can figure out what <strong>DECODED</strong> means depending on your application.</span></p>\\n\\n<h3 id=\\\"Message_Fragmentation\\\">Message Fragmentation</h3>\\n\\n<p>The FIN and opcode fields work together to send a message split up into separate frames. \u00A0This is called message fragmentation. Fragmentation is only available on opcodes <code>0x0</code> to <code>0x2</code>.</p>\\n\\n<p><span style=\\\"line-height: 1.5;\\\">Recall that the opcode tells what a frame is meant to do.\u00A0If it's\u00A0<code>0x1</code>, the payload is text. If it's\u00A0<code>0x2</code>, the payload is binary data.</span><span style=\\\"line-height: 1.5;\\\">\u00A0However, if it's\u00A0</span><code style=\\\"font-style: normal; line-height: 1.5;\\\">0x0,</code><span style=\\\"line-height: 1.5;\\\">\u00A0the frame is a continuation frame. This means the server should concatenate the frame's payload to the last frame it received from that client.</span><span style=\\\"line-height: 1.5;\\\">\u00A0Here is a rough sketch, in which a server reacts to a client sending text messages. The first message is sent in a single frame, while the second message is sent across three frames. FIN and opcode details are shown only for the client:</span></p>\\n\\n<pre style=\\\"font-size: 14px;\\\"><strong>Client:</strong> FIN=1, opcode=0x1, msg=\\\"hello\\\"\\n<strong>Server:</strong> <em>(process complete message immediately) </em>Hi.\\n<strong>Client:</strong> FIN=0, opcode=0x1, msg=\\\"and a\\\"\\n<strong>Server:</strong> <em>(listening, new message containing text started)</em>\\n<strong>Client:</strong> FIN=0, opcode=0x0, msg=\\\"happy new\\\"\\n<strong>Server:</strong> <em>(listening, payload concatenated to previous message)</em>\\n<strong>Client:</strong> FIN=1, opcode=0x0, msg=\\\"year!\\\"\\n<strong>Server:</strong> <em>(process complete message) </em>Happy new year to you too!</pre>\\n\\n<p>Notice the first frame contains an entire message (has\u00A0<code>FIN=1</code>\u00A0and\u00A0<code>opcode!=0x0</code>), so the server can process or respond as it sees fit. The second frame sent by the client has a text payload (<code>opcode=0x1</code>), but the entire message has not arrived yet (<code>FIN=0</code>). All remaining parts of that message are sent with continuation frames (<code>opcode=0x0</code>), and the final frame of the message is marked by\u00A0<code>FIN=1</code>. <a class=\\\"external\\\" href=\\\"http://tools.ietf.org/html/rfc6455#section-5.4\\\" rel=\\\"noopener\\\">Section 5.4 of the spec</a>\u00A0describes message fragmentation.</p>\\n\\n<h2 id=\\\"Pings_and_Pongs_The_Heartbeat_of_WebSockets\\\">Pings and Pongs: The Heartbeat of WebSockets</h2>\\n\\n<p>At any point after the handshake, either the client or the server can choose to send a ping to the other party. When the ping is received, the recipient must send back a pong as soon as possible. You can use this to make sure that the client is still connected, for example.</p>\\n\\n<p>A ping or pong is just a regular frame, but it's a <strong>control frame</strong>. Pings have an opcode of\u00A0<code>0x9</code>, and pongs have an opcode of <code>0xA</code>. When you get a ping, send back a pong with the exact same Payload Data as the ping (for pings and pongs, the max payload length is 125). You might also get a pong without ever sending a ping; ignore this if it happens.</p>\\n\\n<div class=\\\"note\\\">\\n<p>If you have gotten more than one ping before you get the chance to send a pong, you only send one pong.</p>\\n</div>\\n\\n<h2 id=\\\"Closing_the_connection\\\">Closing the connection</h2>\\n\\n<p>To close a connection either the client or server can send a control frame with data containing a specified control sequence to begin the closing handshake (detailed in <a class=\\\"external\\\" href=\\\"http://tools.ietf.org/html/rfc6455#section-5.5.1\\\" rel=\\\"noopener\\\">Section 5.5.1</a>). Upon receiving such a frame,\u00A0the other peer sends a Close frame in response. The first peer then closes the connection. Any further data received after closing of connection\u00A0is then discarded.\u00A0</p>\\n\\n<h2 id=\\\"Miscellaneous_2\\\"><a name=\\\"Miscellaneous\\\">Miscellaneous</a></h2>\\n\\n<div class=\\\"note\\\">\\n<p>WebSocket codes, extensions, subprotocols, etc. are registered at the <a class=\\\"external\\\" href=\\\"http://www.iana.org/assignments/websocket/websocket.xml\\\" rel=\\\"noopener\\\">IANA WebSocket Protocol Registry</a>.</p>\\n</div>\\n\\n<p>WebSocket extensions and subprotocols are negotiated via headers during <a href=\\\"#Handshake\\\">the handshake</a>. Sometimes extensions and subprotocols seem too similar to be different things, but there is a clear distinction. Extensions control the WebSocket <strong>frame</strong> and <strong>modify</strong> the payload, while subprotocols structure the WebSocket <strong>payload</strong> and <strong>never modify</strong> anything. Extensions are optional and generalized (like compression); subprotocols are mandatory and localized (like ones for chat and for MMORPG games).</p>\\n\\n<h3 id=\\\"Extensions\\\">Extensions</h3>\\n\\n<div class=\\\"note\\\">\\n<p><strong>This section needs expansion. Please edit if you are equipped to do so.</strong></p>\\n</div>\\n\\n<p>Think of an extension as compressing a file before e-mailing it to someone. Whatever you do, you're sending the <em>same</em> data in different forms. The recipient will eventually be able to get the same data as your local copy, but it is sent differently. That's what an extension does. WebSockets defines a protocol and a simple way to send data, but an extension such as compression could allow sending the same data but in a shorter format.</p>\\n\\n<div class=\\\"note\\\">\\n<p>Extensions are explained in sections 5.8, 9, 11.3.2, and 11.4 of the spec.</p>\\n</div>\\n\\n<p><em>TODO</em></p>\\n\\n<h3 id=\\\"Subprotocols\\\">Subprotocols</h3>\\n\\n<p>Think of a subprotocol as a custom <a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/XML_schema\\\" rel=\\\"noopener\\\">XML schema</a> or <a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/Document_Type_Definition\\\" rel=\\\"noopener\\\">doctype declaration</a>. You're still using XML and its syntax, but you're additionally restricted by a structure you agreed on. WebSocket subprotocols are just like that. They do not introduce anything fancy, they just establish structure. Like a doctype or schema, both parties must agree on the subprotocol; unlike a doctype or schema, the subprotocol is implemented on the server and cannot be externally refered to by the client.</p>\\n\\n<div class=\\\"note\\\">\\n<p>Subprotocols are explained in sections 1.9, 4.2, 11.3.4, and 11.5 of the spec.</p>\\n</div>\\n\\n<p>A client has to ask for a specific subprotocol. To do so, it will send something like this <strong>as part of the original handshake</strong>:</p>\\n\\n<pre>GET /chat HTTP/1.1\\n...\\nSec-WebSocket-Protocol: soap, wamp\\n\\n</pre>\\n\\n<p>or, equivalently:</p>\\n\\n<pre>...\\nSec-WebSocket-Protocol: soap\\nSec-WebSocket-Protocol: wamp\\n\\n</pre>\\n\\n<p>Now the server must pick one of the protocols that the client suggested and it supports. If there are more than one, send the first one the client sent. Imagine our server can use both <code>soap</code> and <code>wamp</code>.\u00A0Then, in the response handshake, it'll send:</p>\\n\\n<pre>Sec-WebSocket-Protocol: soap\\n\\n</pre>\\n\\n<div class=\\\"warning\\\">\\n<p>The server can't send more than one <code>Sec-Websocket-Protocol</code> header.<br>\\n<span style=\\\"line-height: 1.5;\\\">If the server doesn't want to use a</span><span style=\\\"line-height: 1.5;\\\">ny subprotocol, </span><strong style=\\\"line-height: 1.5;\\\">it shouldn't send any <code>Sec-WebSocket-Protocol</code> header</strong><span style=\\\"line-height: 1.5;\\\">. Sending a blank header is incorrect.<br>\\nThe client may close the connection if it doesn't get the subprotocol it wants.</span></p>\\n</div>\\n\\n<p>If you want your server to obey certain subprotocols, then naturally you'll need extra code on the server. Let's imagine we're using a subprotocol <code>json</code>. In this subprotocol, all data is passed as <a class=\\\"external\\\" href=\\\"https://en.wikipedia.org/wiki/JSON\\\" rel=\\\"noopener\\\">JSON</a>. If the client solicits this protocol and the server wants to use it, the server will need to have a JSON parser. Practically speaking, this will be part of a library, but the server will need to pass the data around.</p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Tip:</strong> To avoid name conflict, it's recommended to make your subprotocol name part of a domain string. If you are building a custom chat app that uses a proprietary format exclusive to Example Inc., then you might use this:\u00A0<code>Sec-WebSocket-Protocol: chat.example.com</code>. Note that this isn't required, it's just an optional convention, and you can use any string you wish.</p>\\n</div>\\n\\n<h2 id=\\\"Related\\\">Related</h2>\\n\\n<ul>\\n\\t<li><a class=\\\"external\\\" href=\\\"https://github.com/alexhultman/libwshandshake\\\" rel=\\\"noopener\\\">WebSocket handshake library in C++</a></li>\\n\\t<li><a href=\\\"/en-US/docs/WebSockets/Writing_WebSocket_client_applications\\\">Writing WebSocket client applications</a></li>\\n\\t<li><a href=\\\"/en-US/docs/WebSockets/Writing_WebSocket_server\\\" title=\\\"/en-US/docs/WebSockets/Writing_WebSocket_server\\\">Tutorial: Websocket server in C#</a></li>\\n\\t<li><a href=\\\"/en-US/docs/WebSockets/WebSocket_Server_Vb.NET\\\">Tutorial: Websocket server in VB.NET</a></li>\\n\\t<li><a href=\\\"/en-US/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java\\\">Tutorial: Websocket server in Java</a></li>\\n</ul>\",\"quickLinksHTML\":\"<ol><li><strong><a href=\\\"/en-US/docs/Web/API/Websockets_API\\\">Websockets API</a></strong></li><li><strong><a href=\\\"/en-US/docs/Web/API/WebSockets_API\\\"><code>WebSockets_API</code></a></strong></li><li class=\\\"toggle\\\"><details open><summary>Related pages for Websockets API</summary><ol><li><a href=\\\"/en-US/docs/Web/API/CloseEvent\\\"><code>CloseEvent</code></a></li><li><a href=\\\"/en-US/docs/Web/API/MessageEvent\\\"><code>MessageEvent</code></a></li><li><a href=\\\"/en-US/docs/Web/API/WebSocket\\\"><code>WebSocket</code></a></li></ol></details></li></ol>\",\"tocHTML\":\"<li><a href=\\\"#The_WebSocket_handshake\\\" rel=\\\"internal\\\">The WebSocket handshake</a><li><a href=\\\"#Exchanging_data_frames\\\" rel=\\\"internal\\\">Exchanging data frames</a><li><a href=\\\"#Pings_and_Pongs_The_Heartbeat_of_WebSockets\\\" rel=\\\"internal\\\">Pings and Pongs: The Heartbeat of WebSockets</a><li><a href=\\\"#Closing_the_connection\\\" rel=\\\"internal\\\">Closing the connection</a><li><a href=\\\"#Miscellaneous_2\\\" rel=\\\"internal\\\">Miscellaneous</a><li><a href=\\\"#Related\\\" rel=\\\"internal\\\">Related</a>\",\"raw\":\"<div>{{APIRef(\\\"Websockets API\\\")}}</div>\\n\\n<p><span class=\\\"seoSummary\\\">A WebSocket server is an application listening on any port of a TCP server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.</span></p>\\n\\n<p>A WebSocket server can be written in any server-side programming language that is capable of <a href=\\\"https://en.wikipedia.org/wiki/Berkeley_sockets\\\">Berkeley sockets</a>, such as C(++), Python, <a href=\\\"/en-US/docs/PHP\\\">PHP</a>, or <a href=\\\"/en-US/docs/Web/JavaScript/Server-Side_JavaScript\\\">server-side JavaScript</a>. This is not a tutorial in any specific language, but serves as a guide to facilitate writing your own server.</p>\\n\\n<p>This article assumes you're already familiar with how {{Glossary(\\\"HTTP\\\")}} works, and that you have a moderate level of programming experience. Depending on language support, knowledge of TCP sockets may be required. The scope of this guide is to present the minimum knowledge you need to write a WebSocket server.</p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Note:</strong> Read the latest official WebSockets specification, <a href=\\\"http://datatracker.ietf.org/doc/rfc6455/?include_text=1\\\">RFC 6455</a>. Sections 1 and 4-7 are especially interesting to server implementors. Section 10 discusses security and you should definitely peruse it before exposing your server.</p>\\n</div>\\n\\n<p>A WebSocket server is explained on a very low level here. WebSocket servers are often separate and specialized servers (for load-balancing or other practical reasons), so you will often use a <a href=\\\"https://en.wikipedia.org/wiki/Reverse_proxy\\\">reverse proxy</a> (such as a regular HTTP server) to detect WebSocket handshakes, pre-process them, and send those clients to a real WebSocket server. This means that you don't have to bloat your server code with cookie and authentication handlers (for example).</p>\\n\\n<h2 id=\\\"The_WebSocket_handshake\\\">The WebSocket handshake</h2>\\n\\n<p>First of all, the server must listen for incoming socket connections using a standard TCP socket. Depending on your platform, this may be handled for you automatically. For example, let's assume that your server is listening on <code>example.com</code>, port 8000, and your socket server responds to {{HTTPMethod(\\\"GET\\\")}} requests at <code>example.com/chat</code>.</p>\\n\\n<div class=\\\"warning\\\">\\n<p><strong>Warning:</strong> The server may listen on any port it chooses, but if it chooses any port other than 80 or 443, it may have problems with firewalls and/or proxies. Browsers generally require a secure connection for WebSockets, although they may offer an exception for local devices.</p>\\n</div>\\n\\n<p>The handshake is the \\\"Web\\\" in WebSockets. It's the bridge from HTTP to WebSockets. In the handshake, details of the connection are negotiated, and either party can back out before completion if the terms are unfavorable. The server must be careful to understand everything the client asks for, otherwise security issues will be introduced.</p>\\n\\n<div class=\\\"blockIndicator note\\\">\\n<p><strong>Tip:</strong> The request-uri (<code>/chat</code> here) has no defined meaning in the spec. So many people cleverly use it to let one server handle multiple WebSocket applications. For example, <code>example.com/chat</code>\u00A0could invoke a multiuser chat app, while <code>/game</code> on the same server might invoke a multiplayer game.</p>\\n</div>\\n\\n<h3 id=\\\"Client_handshake_request\\\">Client handshake request</h3>\\n\\n<p>Even though you're building a server, a client still has to start the WebSocket handshake process by contacting the server and requesting a WebSocket connection. So you must know how to interpret the client's request. The <strong>client</strong> will send a pretty standard HTTP request with headers that looks like this (the HTTP version <strong>must</strong> be 1.1 or greater, and the method <strong>must</strong> be <code>GET</code>):</p>\\n\\n<pre>GET /chat HTTP/1.1\\nHost: example.com:8000\\n<strong>Upgrade: websocket</strong>\\n<strong>Connection: Upgrade</strong>\\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\nSec-WebSocket-Version: 13\\n\\n</pre>\\n\\n<p>The client can solicit extensions and/or subprotocols here; see <a href=\\\"#Miscellaneous\\\">Miscellaneous</a> for details. Also, common headers like {{HTTPHeader(\\\"User-Agent\\\")}}, {{HTTPHeader(\\\"Referer\\\")}}, {{HTTPHeader(\\\"Cookie\\\")}}, or authentication headers might be there as well. Do whatever you want with those; they don't directly pertain to the WebSocket. It's also safe to ignore them. In many common setups, a reverse proxy has already dealt with them.</p>\\n\\n<div class=\\\"blockIndicator note\\\">\\n<p><strong>Tip:</strong> All <strong>browsers</strong> will send an <a href=\\\"https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Origin\\\"><code>Origin</code> header</a>. You can use this header for security (checking for same origin, whitelisting/ blacklisting, etc.) and send a <a href=\\\"https://developer.mozilla.org/en-US/docs/HTTP/Response_codes#403\\\">403 Forbidden</a> if you don't like what you see. However, be warned that non-browser agents can just send a faked <code>Origin</code>. Most applications will reject requests without this header.</p>\\n</div>\\n\\n<p>If any header is not understood or has an incorrect value, the server should send a {{HTTPStatus(\\\"400\\\")}} (\\\"Bad Request\\\")} response and immediately close the socket. As usual, it may also give the reason why the handshake failed in the HTTP response body, but the message may never be displayed (browsers\u00A0do not display it). If the server doesn't understand that version of WebSockets, it should send a {{HTTPHeader(\\\"Sec-WebSocket-Version\\\")}} header back that contains the version(s) it does understand.\u00A0 In the example above, it indicates version 13 of the WebSocket protocol.</p>\\n\\n<p>The most interesting header here is {{HTTPHeader(\\\"Sec-WebSocket-Key\\\")}}. Let's look at that next.</p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Note:</strong> <a href=\\\"https://developer.mozilla.org/en-US/docs/HTTP/Response_codes\\\">Regular HTTP status codes</a> can only be used before the handshake. After the handshake succeeds, you have to use a different set of codes (defined in section 7.4 of the spec).</p>\\n</div>\\n\\n<h3 id=\\\"Server_handshake_response\\\">Server handshake response</h3>\\n\\n<p>When the <strong>server</strong> receives the handshake request, it should send back a special response that indicates that the protocol will be changing from HTTP to WebSocket. That header looks something like the following (remember each header line ends with <code>\\\\r\\\\n</code> and put an extra <code>\\\\r\\\\n</code> after the last one to indicate the end of the header):</p>\\n\\n<pre><strong>HTTP/1.1 101 Switching Protocols</strong>\\nUpgrade: websocket\\nConnection: Upgrade\\n<strong>Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\\n\\n</strong></pre>\\n\\n<p>Additionally, the server can decide on extension/subprotocol requests here; see <a href=\\\"#Miscellaneous\\\">Miscellaneous</a> for details. The <code>Sec-WebSocket-Accept</code> header is important in that the server must derive it from the {{HTTPHeader(\\\"Sec-WebSocket-Key\\\")}} that the client sent to it. To get it, c<span style=\\\"line-height: 1.5em;\\\">oncatenate the client's </span><code style=\\\"font-size: 14px;\\\">Sec-WebSocket-Key</code><span style=\\\"line-height: 1.5em;\\\"> and the string \\\"</span><code style=\\\"font-size: 14px;\\\">258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code><span style=\\\"line-height: 1.5em;\\\">\\\" together (it's a \\\"</span><a href=\\\"https://en.wikipedia.org/wiki/Magic_string\\\" style=\\\"line-height: 1.5em;\\\">magic string</a><span style=\\\"line-height: 1.5em;\\\">\\\"),\u00A0</span><span style=\\\"line-height: 1.5em;\\\">take the </span><a href=\\\"https://en.wikipedia.org/wiki/SHA-1\\\" style=\\\"line-height: 1.5em;\\\">SHA-1 hash</a><span style=\\\"line-height: 1.5em;\\\"> of the result, and\u00A0</span><span style=\\\"line-height: 1.5em;\\\">return the </span><a href=\\\"https://en.wikipedia.org/wiki/Base64\\\" style=\\\"line-height: 1.5em;\\\">base64</a><span style=\\\"line-height: 1.5em;\\\"> encoding of that hash.</span></p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Note:</strong> This seemingly overcomplicated process exists so that it's obvious to the client whether or not the server supports WebSockets. This is important because security issues might arise if the server accepts a WebSockets connection but interprets the data as a HTTP request.</p>\\n</div>\\n\\n<p>So if the Key was \\\"<code>dGhlIHNhbXBsZSBub25jZQ==</code>\\\", the <code>Sec-WebSocket-Accept</code> header's value is \\\"<code>s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</code>\\\". Once the server sends these headers, the handshake is complete and you can start swapping data!</p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Note:</strong> The server can send other headers like {{HTTPHeader(\\\"Set-Cookie\\\")}}, or ask for authentication or redirects via other status codes, before sending the reply handshake.</p>\\n</div>\\n\\n<h3 id=\\\"Keeping_track_of_clients\\\">Keeping track of clients</h3>\\n\\n<p>This doesn't directly relate to the WebSocket protocol, but it's worth mentioning here: your server will have to keep track of clients' sockets so you don't keep handshaking again with clients who have already completed the handshake. The same client IP address can try to connect multiple times (but the server can deny them if they attempt too many connections in order to save itself from <a href=\\\"https://en.wikipedia.org/wiki/Denial_of_service\\\">Denial-of-Service attacks</a>).</p>\\n\\n<p>For example, you might keep a table of usernames or ID numbers along with the corresponding {{domxref(\\\"WebSocket\\\")}} and other data that you need to associate with that connection.</p>\\n\\n<h2 id=\\\"Exchanging_data_frames\\\">Exchanging data frames</h2>\\n\\n<p>Either the client or the server can choose to send a message at any time \u2014 that's the magic of WebSockets. However, extracting information from these so-called \\\"frames\\\" of data is a not-so-magical experience. Although all frames follow the same specific format, data going from the client to the server is masked using <a href=\\\"https://en.wikipedia.org/wiki/XOR_cipher\\\">XOR encryption</a> (with a 32-bit key). Section 5 of the specification describes this in detail.</p>\\n\\n<h3 id=\\\"Format\\\">Format</h3>\\n\\n<p>Each data frame (from the client to the server or vice-versa) follows this same format:</p>\\n\\n<pre>Frame format:  \\n\u200B\u200B\\n      0                   1                   2                   3\\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\\n     +-+-+-+-+-------+-+-------------+-------------------------------+\\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\\n     | |1|2|3|       |K|             |                               |\\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\\n     |     Extended payload length continued, if payload len == 127  |\\n     + - - - - - - - - - - - - - - - +-------------------------------+\\n     |                               |Masking-key, if MASK set to 1  |\\n     +-------------------------------+-------------------------------+\\n     | Masking-key (continued)       |          Payload Data         |\\n     +-------------------------------- - - - - - - - - - - - - - - - +\\n     :                     Payload Data continued ...                :\\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\\n     |                     Payload Data continued ...                |\\n     +---------------------------------------------------------------+</pre>\\n\\n<p>The MASK bit simply tells whether the message is encoded. Messages from the client must be masked, so your server should expect this to be 1. (In fact, <a href=\\\"http://tools.ietf.org/html/rfc6455#section-5.1\\\">section 5.1 of the spec</a> says that your server must disconnect from a client if that client sends an unmasked message.) When sending a frame back to the client, do not mask it and do not set the mask bit. We'll explain masking later. <em>Note: You have to mask messages even when using a secure socket.\u00A0</em>RSV1-3 can be ignored, they are for extensions.</p>\\n\\n<p>The opcode field defines how to interpret the payload data: <span style=\\\"font-family: courier new,andale mono,monospace; line-height: 1.5;\\\">0x0\u00A0</span><span style=\\\"line-height: 1.5;\\\">for continuation,</span><span style=\\\"font-family: courier new,andale mono,monospace; line-height: 1.5;\\\">\u00A0</span><code style=\\\"font-style: normal; line-height: 1.5;\\\">0x1</code><span style=\\\"line-height: 1.5;\\\"> for text (which is always encoded in UTF-8), </span><code style=\\\"font-style: normal; line-height: 1.5;\\\">0x2</code><span style=\\\"line-height: 1.5;\\\"> for binary, and other so-called \\\"control codes\\\" that will be discussed later. In this version of WebSockets, <code>0x3</code> to <code>0x7</code> and <code>0xB</code> to <code>0xF</code> have no meaning.</span></p>\\n\\n<p>The FIN bit tells whether this is the last message in a series. If it's 0, then the server will keep listening for more parts of the message; otherwise, the server should consider the message delivered. More on this later.</p>\\n\\n<h3 id=\\\"Decoding_Payload_Length\\\">Decoding Payload Length</h3>\\n\\n<p>To read the payload data, you must know when to stop reading. That's why the payload length is important to know. Unfortunately, this is somewhat complicated. To read it, follow these steps:</p>\\n\\n<ol>\\n\\t<li>Read bits 9-15 (inclusive) and interpret that as an unsigned integer. If it's 125 or less, then that's the length; you're <strong>done</strong>. If it's 126, go to step 2. If it's 127, go to step 3.</li>\\n\\t<li>Read the next 16 bits and interpret those as an unsigned integer. You're <strong>done</strong>.</li>\\n\\t<li>Read the next 64 bits and interpret those as an unsigned integer (The most significant bit MUST be 0). You're <strong>done</strong>.</li>\\n</ol>\\n\\n<h3 id=\\\"Reading_and_Unmasking_the_Data\\\">Reading and Unmasking the Data</h3>\\n\\n<p>If the MASK bit was set (and it should be, for client-to-server messages), read the next 4 octets (32 bits); this is the masking key.\u00A0<span style=\\\"line-height: 1.5;\\\">Once the payload length and masking key is decoded, you can go ahead and read that number of bytes from the socket. Let's call the data <strong>ENCODED</strong>, and the key <strong>MASK</strong>. To get <strong>DECODED</strong>, loop through the octets (bytes a.k.a. characters for text data) of <strong>ENCODED</strong> and XOR the octet with the (i modulo 4)th octet of MASK. In pseudo-code (that happens to be valid JavaScript):</span></p>\\n\\n<pre>var DECODED = \\\"\\\";\\nfor (var i = 0; i &lt; ENCODED.length; i++) {\\n    DECODED[i] = ENCODED[i] ^ MASK[i % 4];\\n<span style=\\\"line-height: 1.5;\\\">}</span></pre>\\n\\n<p><span style=\\\"line-height: 1.5;\\\">Now you can figure out what <strong>DECODED</strong> means depending on your application.</span></p>\\n\\n<h3 id=\\\"Message_Fragmentation\\\">Message Fragmentation</h3>\\n\\n<p>The FIN and opcode fields work together to send a message split up into separate frames. \u00A0This is called message fragmentation. Fragmentation is only available on opcodes <code>0x0</code> to <code>0x2</code>.</p>\\n\\n<p><span style=\\\"line-height: 1.5;\\\">Recall that the opcode tells what a frame is meant to do.\u00A0If it's\u00A0<code>0x1</code>, the payload is text. If it's\u00A0<code>0x2</code>, the payload is binary data.</span><span style=\\\"line-height: 1.5;\\\">\u00A0However, if it's\u00A0</span><code style=\\\"font-style: normal; line-height: 1.5;\\\">0x0,</code><span style=\\\"line-height: 1.5;\\\">\u00A0the frame is a continuation frame. This means the server should concatenate the frame's payload to the last frame it received from that client.</span><span style=\\\"line-height: 1.5;\\\">\u00A0Here is a rough sketch, in which a server reacts to a client sending text messages. The first message is sent in a single frame, while the second message is sent across three frames. FIN and opcode details are shown only for the client:</span></p>\\n\\n<pre style=\\\"font-size: 14px;\\\"><strong>Client:</strong> FIN=1, opcode=0x1, msg=\\\"hello\\\"\\n<strong>Server:</strong> <em>(process complete message immediately) </em>Hi.\\n<strong>Client:</strong> FIN=0, opcode=0x1, msg=\\\"and a\\\"\\n<strong>Server:</strong> <em>(listening, new message containing text started)</em>\\n<strong>Client:</strong> FIN=0, opcode=0x0, msg=\\\"happy new\\\"\\n<strong>Server:</strong> <em>(listening, payload concatenated to previous message)</em>\\n<strong>Client:</strong> FIN=1, opcode=0x0, msg=\\\"year!\\\"\\n<strong>Server:</strong> <em>(process complete message) </em>Happy new year to you too!</pre>\\n\\n<p>Notice the first frame contains an entire message (has\u00A0<code>FIN=1</code>\u00A0and\u00A0<code>opcode!=0x0</code>), so the server can process or respond as it sees fit. The second frame sent by the client has a text payload (<code>opcode=0x1</code>), but the entire message has not arrived yet (<code>FIN=0</code>). All remaining parts of that message are sent with continuation frames (<code>opcode=0x0</code>), and the final frame of the message is marked by\u00A0<code>FIN=1</code>. <a href=\\\"http://tools.ietf.org/html/rfc6455#section-5.4\\\">Section 5.4 of the spec</a>\u00A0describes message fragmentation.</p>\\n\\n<h2 id=\\\"Pings_and_Pongs_The_Heartbeat_of_WebSockets\\\">Pings and Pongs: The Heartbeat of WebSockets</h2>\\n\\n<p>At any point after the handshake, either the client or the server can choose to send a ping to the other party. When the ping is received, the recipient must send back a pong as soon as possible. You can use this to make sure that the client is still connected, for example.</p>\\n\\n<p>A ping or pong is just a regular frame, but it's a <strong>control frame</strong>. Pings have an opcode of\u00A0<code>0x9</code>, and pongs have an opcode of <code>0xA</code>. When you get a ping, send back a pong with the exact same Payload Data as the ping (for pings and pongs, the max payload length is 125). You might also get a pong without ever sending a ping; ignore this if it happens.</p>\\n\\n<div class=\\\"note\\\">\\n<p>If you have gotten more than one ping before you get the chance to send a pong, you only send one pong.</p>\\n</div>\\n\\n<h2 id=\\\"Closing_the_connection\\\">Closing the connection</h2>\\n\\n<p>To close a connection either the client or server can send a control frame with data containing a specified control sequence to begin the closing handshake (detailed in <a href=\\\"http://tools.ietf.org/html/rfc6455#section-5.5.1\\\">Section 5.5.1</a>). Upon receiving such a frame,\u00A0the other peer sends a Close frame in response. The first peer then closes the connection. Any further data received after closing of connection\u00A0is then discarded.\u00A0</p>\\n\\n<h2 id=\\\"Miscellaneous_2\\\"><a name=\\\"Miscellaneous\\\">Miscellaneous</a></h2>\\n\\n<div class=\\\"note\\\">\\n<p>WebSocket codes, extensions, subprotocols, etc. are registered at the <a href=\\\"http://www.iana.org/assignments/websocket/websocket.xml\\\">IANA WebSocket Protocol Registry</a>.</p>\\n</div>\\n\\n<p>WebSocket extensions and subprotocols are negotiated via headers during <a href=\\\"#Handshake\\\">the handshake</a>. Sometimes extensions and subprotocols seem too similar to be different things, but there is a clear distinction. Extensions control the WebSocket <strong>frame</strong> and <strong>modify</strong> the payload, while subprotocols structure the WebSocket <strong>payload</strong> and <strong>never modify</strong> anything. Extensions are optional and generalized (like compression); subprotocols are mandatory and localized (like ones for chat and for MMORPG games).</p>\\n\\n<h3 id=\\\"Extensions\\\">Extensions</h3>\\n\\n<div class=\\\"note\\\">\\n<p><strong>This section needs expansion. Please edit if you are equipped to do so.</strong></p>\\n</div>\\n\\n<p>Think of an extension as compressing a file before e-mailing it to someone. Whatever you do, you're sending the <em>same</em> data in different forms. The recipient will eventually be able to get the same data as your local copy, but it is sent differently. That's what an extension does. WebSockets defines a protocol and a simple way to send data, but an extension such as compression could allow sending the same data but in a shorter format.</p>\\n\\n<div class=\\\"note\\\">\\n<p>Extensions are explained in sections 5.8, 9, 11.3.2, and 11.4 of the spec.</p>\\n</div>\\n\\n<p><em>TODO</em></p>\\n\\n<h3 id=\\\"Subprotocols\\\">Subprotocols</h3>\\n\\n<p>Think of a subprotocol as a custom <a href=\\\"https://en.wikipedia.org/wiki/XML_schema\\\">XML schema</a> or <a href=\\\"https://en.wikipedia.org/wiki/Document_Type_Definition\\\">doctype declaration</a>. You're still using XML and its syntax, but you're additionally restricted by a structure you agreed on. WebSocket subprotocols are just like that. They do not introduce anything fancy, they just establish structure. Like a doctype or schema, both parties must agree on the subprotocol; unlike a doctype or schema, the subprotocol is implemented on the server and cannot be externally refered to by the client.</p>\\n\\n<div class=\\\"note\\\">\\n<p>Subprotocols are explained in sections 1.9, 4.2, 11.3.4, and 11.5 of the spec.</p>\\n</div>\\n\\n<p>A client has to ask for a specific subprotocol. To do so, it will send something like this <strong>as part of the original handshake</strong>:</p>\\n\\n<pre>GET /chat HTTP/1.1\\n...\\nSec-WebSocket-Protocol: soap, wamp\\n\\n</pre>\\n\\n<p>or, equivalently:</p>\\n\\n<pre>...\\nSec-WebSocket-Protocol: soap\\nSec-WebSocket-Protocol: wamp\\n\\n</pre>\\n\\n<p>Now the server must pick one of the protocols that the client suggested and it supports. If there are more than one, send the first one the client sent. Imagine our server can use both <code>soap</code> and <code>wamp</code>.\u00A0Then, in the response handshake, it'll send:</p>\\n\\n<pre>Sec-WebSocket-Protocol: soap\\n\\n</pre>\\n\\n<div class=\\\"warning\\\">\\n<p>The server can't send more than one <code>Sec-Websocket-Protocol</code> header.<br>\\n<span style=\\\"line-height: 1.5;\\\">If the server doesn't want to use a</span><span style=\\\"line-height: 1.5;\\\">ny subprotocol, </span><strong style=\\\"line-height: 1.5;\\\">it shouldn't send any <code>Sec-WebSocket-Protocol</code> header</strong><span style=\\\"line-height: 1.5;\\\">. Sending a blank header is incorrect.<br>\\nThe client may close the connection if it doesn't get the subprotocol it wants.</span></p>\\n</div>\\n\\n<p>If you want your server to obey certain subprotocols, then naturally you'll need extra code on the server. Let's imagine we're using a subprotocol <code>json</code>. In this subprotocol, all data is passed as <a href=\\\"https://en.wikipedia.org/wiki/JSON\\\">JSON</a>. If the client solicits this protocol and the server wants to use it, the server will need to have a JSON parser. Practically speaking, this will be part of a library, but the server will need to pass the data around.</p>\\n\\n<div class=\\\"note\\\">\\n<p><strong>Tip:</strong> To avoid name conflict, it's recommended to make your subprotocol name part of a domain string. If you are building a custom chat app that uses a proprietary format exclusive to Example Inc., then you might use this:\u00A0<code>Sec-WebSocket-Protocol: chat.example.com</code>. Note that this isn't required, it's just an optional convention, and you can use any string you wish.</p>\\n</div>\\n\\n<h2 id=\\\"Related\\\">Related</h2>\\n\\n<ul>\\n\\t<li><a href=\\\"https://github.com/alexhultman/libwshandshake\\\">WebSocket handshake library in C++</a></li>\\n\\t<li><a href=\\\"/en-US/docs/WebSockets/Writing_WebSocket_client_applications\\\">Writing WebSocket client applications</a></li>\\n\\t<li><a href=\\\"/en-US/docs/WebSockets/Writing_WebSocket_server\\\" title=\\\"/en-US/docs/WebSockets/Writing_WebSocket_server\\\">Tutorial: Websocket server in C#</a></li>\\n\\t<li><a href=\\\"/en-US/docs/WebSockets/WebSocket_Server_Vb.NET\\\">Tutorial: Websocket server in VB.NET</a></li>\\n\\t<li><a href=\\\"/en-US/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java\\\">Tutorial: Websocket server in Java</a></li>\\n</ul>\",\"parents\":[{\"url\":\"/en-US/docs/Web\",\"title\":\"Web technology for developers\"},{\"url\":\"/en-US/docs/Web/API\",\"title\":\"Web APIs\"},{\"url\":\"/en-US/docs/Web/API/WebSockets_API\",\"title\":\"The WebSocket API (WebSockets)\"}],\"translations\":[{\"language\":\"Espa\u00F1ol\",\"hrefLang\":\"es\",\"localizedLanguage\":\"Spanish\",\"locale\":\"es\",\"url\":\"/es/docs/Web/API/WebSockets_API/Escribiendo_servidores_con_WebSocket\",\"title\":\"Escribir servidores WebSocket\"},{\"language\":\"Fran\u00E7ais\",\"hrefLang\":\"fr\",\"localizedLanguage\":\"French\",\"locale\":\"fr\",\"url\":\"/fr/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\",\"title\":\"\u00C9criture de serveurs WebSocket\"},{\"language\":\"\u65E5\u672C\u8A9E\",\"hrefLang\":\"ja\",\"localizedLanguage\":\"Japanese\",\"locale\":\"ja\",\"url\":\"/ja/docs/WebSockets-840092-dup/Writing_WebSocket_servers\",\"title\":\"WebSocket \u30B5\u30FC\u30D0\u30FC\u306E\u8A18\u8FF0\"},{\"language\":\"\uD55C\uAD6D\uC5B4\",\"hrefLang\":\"ko\",\"localizedLanguage\":\"Korean\",\"locale\":\"ko\",\"url\":\"/ko/docs/WebSockets/Writing_WebSocket_servers\",\"title\":\"\uC6F9\uC18C\uCF13 \uC11C\uBC84 \uC791\uC131\uD558\uAE30\"},{\"language\":\"Portugu\u00EAs (do\u00A0Brasil)\",\"hrefLang\":\"pt\",\"localizedLanguage\":\"Portuguese (Brazilian)\",\"locale\":\"pt-BR\",\"url\":\"/pt-BR/docs/WebSockets/Writing_WebSocket_servers\",\"title\":\"Escrevendo um servidor WebSocket\"},{\"language\":\"\u4E2D\u6587 (\u7B80\u4F53)\",\"hrefLang\":\"zh\",\"localizedLanguage\":\"Chinese (Simplified)\",\"locale\":\"zh-CN\",\"url\":\"/zh-CN/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\",\"title\":\"\u7F16\u5199 WebSocket \u670D\u52A1\u5668\"}],\"lastModified\":\"2019-04-11T06:37:28.244122\"}}");</script>


  
    
  

  <!-- site js -->
  <script defer="" type="text/javascript" src="./Writing WebSocket servers - Web APIs _ MDN_files/react-main.48270c4e4f6e.js" charset="utf-8"></script>
  
  
    <script defer="" type="text/javascript" src="./Writing WebSocket servers - Web APIs _ MDN_files/react-bcd-signal.5243efe96f7c.js" charset="utf-8"></script>
  

</body></html>
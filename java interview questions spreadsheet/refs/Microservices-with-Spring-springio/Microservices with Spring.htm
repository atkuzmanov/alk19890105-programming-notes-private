<!DOCTYPE html>
<!-- saved from url=(0059)https://spring.io/blog/2015/07/14/microservices-with-spring -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Microservices with Spring</title>
<meta content="width=device-width,initial-scale=1,shrink-to-fit=no" id="Viewport" name="viewport">
<link media="all" rel="stylesheet" type="text/css" href="./Microservices with Spring_files/main-02a2f5a1988954290775c4a3e5620587.css">
<link rel="shortcut icon" type="image/vnd.microsoft.icon" href="https://spring.io/images/favicon.ico">
<meta content="Level up your Java code and explore what Spring can do for you." name="description">
<link rel="manifest" href="https://spring.io/manifest-0e3065c2bbd1ef7a320e80861393f1a6.json">
<meta content="Spring" property="og:site_name">
<meta content="website" property="og:type">
<meta content="Spring" property="og:title">
<meta content="Level up your Java code and explore what Spring can do for you." property="og:description">
<meta content="https://www.spring.io" property="og:url">
<meta content="/images/OG-Spring.png" property="og:image">
<meta content="1200" property="og:image:width">
<meta content="600" property="og:image:height">
<meta content="Spring" name="twitter:title">
<meta content="Level up your Java code and explore what Spring can do for you." name="twitter:description">
<meta content="https://www.spring.io" name="twitter:url">
<meta content="@springcentral" name="twitter:site">
<meta content="@springcentral" name="twitter:creator">
<meta content="summary_large_image" name="twitter:card">
<meta content="https://spring.io/images/OG-Spring.png" name="twitter:image">
<meta content="#6db33f" name="theme-color">
<meta content="spring" name="apple-mobile-web-app-title">
<meta content="yes" name="apple-mobile-web-app-capable">
<meta content="default" name="apple-mobile-web-app-status-bar-style">

<script async="" src="./Microservices with Spring_files/gtm.js"></script><script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
        'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-KZM7GF6');</script>

<script src="./Microservices with Spring_files/run_prettify-bdb6c0e9428310779b92eabb94d723c6.js"></script><link rel="stylesheet" type="text/css" href="./Microservices with Spring_files/prettify.css">
<link rel="stylesheet" type="text/css" href="./Microservices with Spring_files/blog-fd701c288dcc09e4016818fa3bbfd9f9.css">

<meta content="summary" name="twitter:card">
<meta content="@springcentral" name="twitter:site">
<meta name="twitter:title" content="Microservices with Spring">
<meta name="twitter:description" content="&lt;h1&gt;&lt;a href=&quot;#introduction&quot; class=&quot;anchor&quot; name=&quot;introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;&lt;a href=&quot;#recent-updates&quot;&gt;Revised July 2019&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A simple example of setting up a microservices system using Spring, Spring Boot and Spring Cloud.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;Microservices&lt;/a&gt; allow large systems to be built up from a number of collaborating components. It does at the process level what Spring has always done at the component level: loosely coupled processes instead of loosely coupled components.&lt;/p&gt;
&lt;a href=&quot;https://raw.githubusercontent.com/paulc4/microservices-demo/master/shopping-system.jpg&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulc4/microservices-demo/master/shopping-system.jpg&quot; title=&quot;Click to enlarge&quot; alt=&quot;Shopping Application&quot; style=&quot;width: 400px; float: right; margin: 0px 5px 5px 10px&quot;&gt;&lt;/a&gt;
&lt;p&gt;For example imagine an online shop with separate microservices for user-accounts, product-catalog order-processing and shopping carts:&lt;/p&gt;
">
<meta name="twitter:image:src" content="https://gravatar.com/avatar/0b0bedf6c0dab07b13a322eed9350873?s=200">

<meta property="og:title" content="Microservices with Spring">
<meta property="og:image" content="https://gravatar.com/avatar/0b0bedf6c0dab07b13a322eed9350873?s=200">
<meta property="og:description" content="&lt;h1&gt;&lt;a href=&quot;#introduction&quot; class=&quot;anchor&quot; name=&quot;introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;&lt;a href=&quot;#recent-updates&quot;&gt;Revised July 2019&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A simple example of setting up a microservices system using Spring, Spring Boot and Spring Cloud.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;Microservices&lt;/a&gt; allow large systems to be built up from a number of collaborating components. It does at the process level what Spring has always done at the component level: loosely coupled processes instead of loosely coupled components.&lt;/p&gt;
&lt;a href=&quot;https://raw.githubusercontent.com/paulc4/microservices-demo/master/shopping-system.jpg&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulc4/microservices-demo/master/shopping-system.jpg&quot; title=&quot;Click to enlarge&quot; alt=&quot;Shopping Application&quot; style=&quot;width: 400px; float: right; margin: 0px 5px 5px 10px&quot;&gt;&lt;/a&gt;
&lt;p&gt;For example imagine an online shop with separate microservices for user-accounts, product-catalog order-processing and shopping carts:&lt;/p&gt;
">
<meta content="article" property="og:type">
<meta property="og:article:published_time" content="2015-07-14 06:28:00.0">
<script async="" src="./Microservices with Spring_files/embed.js"></script><script async="" src="./Microservices with Spring_files/count.js"></script><script src="./Microservices with Spring_files/count-data.js"></script><link rel="prefetch" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.15d8f2a22cfa6b9f96345c682b01a08f.css"><link rel="prefetch" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.b9167d06dc7bd01b59d6d6332d6aafa1.js"><link rel="prefetch" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.3c28b73070ee14be97ecb734e8aca3b4.js"><link rel="prefetch" as="script" href="https://disqus.com/next/config.js"><link id="mktoForms2BaseStyle" rel="stylesheet" type="text/css" href="./Microservices with Spring_files/forms2.css"><link id="mktoForms2ThemeStyle" rel="stylesheet" type="text/css" href="./Microservices with Spring_files/forms2-theme-simple.css"></head>
<body id="blog">
<header>
<nav id="nav">
<div class="container flex jc-between ai-center" id="nav-inner">
<a href="https://spring.io/" id="logo-focus" tabindex="1">
<img alt="Spring" class="block" id="springlogo" src="./Microservices with Spring_files/spring-logo-fc4350c59999bb62c468361537212419.svg">
</a>
<ul class="flex jc-between" id="nav-items">
<li><div class="has-menu" id="why-hov"><span tabindex="2">Why Spring</span><div class="nav-arrow"></div></div></li>
<li><div class="has-menu" id="learn-hov"><span tabindex="11">Learn</span><div class="nav-arrow"></div></div></li>
<li><div class="has-menu" id="projects-hov"><span tabindex="17">Projects</span><div class="nav-arrow"></div></div></li>
<li><a class="z-5 rel" href="https://spring.io/training" tabindex="30">Training</a></li>
<li><a class="z-5 rel" href="https://spring.io/support" tabindex="31">Support</a></li>
<li><a class="has-menu" id="community-hov"><span tabindex="32">Community</span><div class="nav-arrow"></div></a></li>

</ul>
</div>
<div class="container rel" id="dropdown-menus">
<div class="abs rad-5" id="scope"></div>
<div class="drop-menu" id="why-items">
<div class="drop-target" id="why-target"></div>
<ul>
<li><a href="https://spring.io/why-spring" tabindex="3">Overview</a></li>
<li><a href="https://spring.io/microservices" tabindex="4">Microservices</a></li>
<li><a href="https://spring.io/reactive" tabindex="5">Reactive</a></li>
<li><a href="https://spring.io/event-driven" tabindex="6">Event Driven</a></li>
<li><a href="https://spring.io/cloud" tabindex="7">Cloud</a></li>
<li><a href="https://spring.io/web-applications" tabindex="8">Web Applications</a></li>
<li><a href="https://spring.io/serverless" tabindex="9">Serverless</a></li>
<li><a href="https://spring.io/batch" tabindex="10">Batch</a></li>
</ul>
</div>
<div class="drop-menu" id="learn-items">
<div class="drop-target" id="learn-target"></div>
<ul>
<li><a href="https://spring.io/learn" tabindex="12">Overview</a></li>
<li><a href="https://spring.io/quickstart" tabindex="13">Quickstart</a></li>
<li><a href="https://spring.io/guides" tabindex="14">Guides</a></li>

<li><a href="https://spring.io/blog" tabindex="16">Blog</a></li>
</ul>
</div>
<div class="drop-menu" id="project-items">
<div class="drop-target" id="project-target"></div>
<ul>
<li><a href="https://spring.io/projects" tabindex="18">Overview</a></li>
<li><a href="https://spring.io/projects/spring-boot" tabindex="19">Spring Boot</a></li>
<li><a href="https://spring.io/projects/spring-framework" tabindex="20">Spring Framework</a></li>
<li><a href="https://spring.io/projects/spring-cloud" tabindex="21">Spring Cloud</a></li>
<li><a href="https://spring.io/projects/spring-cloud-dataflow" tabindex="22">Spring Cloud Data Flow</a></li>
<li><a href="https://spring.io/projects/spring-data" tabindex="23">Spring Data</a></li>
<li><a href="https://spring.io/projects/spring-integration" tabindex="24">Spring Integration</a></li>
<li><a href="https://spring.io/projects/spring-batch" tabindex="25">Spring Batch</a></li>
<li><a href="https://spring.io/projects/spring-security" tabindex="26">Spring Security</a></li>
<li><a class="blue mb-2 inline-block" href="https://spring.io/projects" tabindex="27">View all projects</a></li>
<li class="uppercase smallest">Development Tools</li>
<li><a href="https://spring.io/tools" tabindex="28">Spring Tools 4</a></li>
<li><a href="https://start.spring.io/" tabindex="29">Spring Initialzr <svg class="external-link-icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" points="15 10.94 15 15 1 15 1 1 5.06 1" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><polyline fill="none" points="8.93 1 15 1 15 7.07" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><line fill="none" stroke="#333" stroke-miterlimit="10" stroke-width="2" x1="15" x2="8" y1="1" y2="8"></line></svg></a></li>
</ul>
</div>
<div class="drop-menu" id="community-items">
<div class="drop-target" id="community-target"></div>
<ul>
<li><a href="https://spring.io/community" tabindex="33">Overview</a></li>
<li><a href="https://spring.io/events" tabindex="34">Events</a></li>
<li><a href="https://spring.io/team" tabindex="35">Team</a></li>
<li><a href="http://store.pivotal.io/" tabindex="36">Store <svg class="external-link-icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" points="15 10.94 15 15 1 15 1 1 5.06 1" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><polyline fill="none" points="8.93 1 15 1 15 7.07" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><line fill="none" stroke="#333" stroke-miterlimit="10" stroke-width="2" x1="15" x2="8" y1="1" y2="8"></line></svg></a></li>
</ul>
</div>
</div>
</nav>
<div class="pointer" id="mobile-nav-open">
<div id="hamburger">
<div class="burger-bar"></div>
<div class="burger-bar"></div>
<div class="burger-bar"></div>
</div>
<svg class="mobile-close pointer" id="Layer_1" style="enable-background:new 0 0 14.6 14.6;" version="1.1" viewBox="0 0 14.6 14.6" x="0px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" y="0px"><style type="text/css">.st0{fill:none;stroke:#000000;stroke-width:3;stroke-miterlimit:10;}</style><title>close</title><line class="st0" x1="1.5" x2="13.1" y1="1.5" y2="13.1"></line><line class="st0" x1="13.1" x2="1.5" y1="1.5" y2="13.1"></line></svg>
</div>
<nav class="border-box rel" id="mobile-nav">
<div class="rel">
<div class="mobile-category flex jc-between ai-center" id="mobile-why">
<div class="mobile-title antialiased cursor-d">Why Spring</div>
<div class="mobile-nav-arrow"></div>
</div>
<div class="mobile-expanded-category" id="mobile-why-items">
<ul>
<li><a href="https://spring.io/why-spring">Overview</a></li>
<li><a href="https://spring.io/microservices">Microservices</a></li>
<li><a href="https://spring.io/reactive">Reactive</a></li>
<li><a href="https://spring.io/event-driven">Event Driven</a></li>
<li><a href="https://spring.io/cloud">Cloud</a></li>
<li><a href="https://spring.io/web-applications">Web Applications</a></li>
<li><a href="https://spring.io/serverless">Serverless</a></li>
<li><a href="https://spring.io/batch">Batch</a></li>
</ul>
</div>
<div class="mobile-category flex jc-between ai-center" id="mobile-learn">
<div class="mobile-title antialiased cursor-d">Learn</div>
<div class="mobile-nav-arrow"></div>
</div>
<div class="mobile-expanded-category" id="mobile-learn-items">
<ul>
<li><a href="https://spring.io/learn">Overview</a></li>
<li><a href="https://spring.io/quickstart">Quickstart</a></li>
<li><a href="https://spring.io/guides">Guides</a></li>

<li><a href="https://spring.io/blog">Blog</a></li>
</ul>
</div>
<div class="mobile-category flex jc-between ai-center" id="mobile-projects">
<div class="mobile-title antialiased cursor-d">Projects</div>
<div class="mobile-nav-arrow"></div>
</div>
<div class="mobile-expanded-category" id="mobile-project-items">
<ul>
<li><a href="https://spring.io/projects">Overview</a></li>
<li><a href="https://spring.io/projects/spring-boot">Spring Boot</a></li>
<li><a href="https://spring.io/projects/spring-framework">Spring Framework</a></li>
<li><a href="https://spring.io/projects/spring-cloud">Spring Cloud</a></li>
<li><a href="https://spring.io/projects/spring-cloud-dataflow">Spring Cloud Data Flow</a></li>
<li><a href="https://spring.io/projects/spring-data">Spring Data</a></li>
<li><a href="https://spring.io/projects/spring-integration">Spring Integration</a></li>
<li><a href="https://spring.io/projects/spring-batch">Spring Batch</a></li>
<li><a href="https://spring.io/projects/spring-security">Spring Security</a></li>
<li><a class="blue mb-2 inline-block" href="https://spring.io/projects">View all projects</a></li>
<p class="uppercase smallest white">Development Tools</p>
<li><a href="https://spring.io/tools">Spring Tools 4</a></li>
<li><a href="https://start.spring.io/">Spring Initialzr <svg class="external-link-icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" points="15 10.94 15 15 1 15 1 1 5.06 1" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><polyline fill="none" points="8.93 1 15 1 15 7.07" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><line fill="none" stroke="#333" stroke-miterlimit="10" stroke-width="2" x1="15" x2="8" y1="1" y2="8"></line></svg></a></li>
</ul>
</div>
<a class="mobile-link block" href="https://spring.io/training"><div class="mobile-title antialiased">Training</div></a>
<a class="mobile-link block" href="https://spring.io/support"><div class="mobile-title antialiased">Support</div></a>
<div class="mobile-category flex jc-between ai-center" id="mobile-community">
<div class="mobile-title antialiased cursor-d">Community</div>
<div class="mobile-nav-arrow"></div>
</div>
<div class="mobile-expanded-category" id="mobile-community-items">
<ul>
<li><a href="https://spring.io/community">Overview</a></li>
<li><a href="https://spring.io/events">Events</a></li>
<li><a href="https://spring.io/team">Team</a></li>
<li><a href="http://store.pivotal.io/">Store <svg class="external-link-icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" points="15 10.94 15 15 1 15 1 1 5.06 1" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><polyline fill="none" points="8.93 1 15 1 15 7.07" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><line fill="none" stroke="#333" stroke-miterlimit="10" stroke-width="2" x1="15" x2="8" y1="1" y2="8"></line></svg></a></li>
</ul>
</div>

</div>
</nav>
<div id="search-nav" role="search">
<div class="container relative">
<form accept-charset="UTF-8" action="https://spring.io/search" id="searchheaderform" method="get"><input name="utf8" type="hidden" value="✓">
<input autocomplete="off" id="searchheaderinput" name="q" placeholder="Search for documentation, guides, and posts..." type="text">
<input data-disable-with="" id="searchheadersubmit" type="submit" value="">
</form>

</div>
</div>
</header>
<div id="main">
<main class="body--container container-fluid">
<div class="main-body--wrapper">
<div class="desktop-only">
<h1 class="blog-category active content--title">
Spring Blog
</h1>
<ul class="right-pane-widget--container secondary-nav with-icon">
<li class="blog-category">
<a href="https://spring.io/blog">All Posts</a>
<a class="pull-right" href="https://spring.io/blog/category/blog.atom"><i class="fas fa-rss-square"></i></a>
</li>
<li class="blog-category">
<a href="https://spring.io/blog/category/engineering">Engineering</a>
<a class="pull-right" href="https://spring.io/blog/category/engineering.atom"><i class="fas fa-rss-square"></i></a>
</li>
<li class="blog-category">
<a href="https://spring.io/blog/category/releases">Releases</a>
<a class="pull-right" href="https://spring.io/blog/category/releases.atom"><i class="fas fa-rss-square"></i></a>
</li>
<li class="blog-category">
<a href="https://spring.io/blog/category/news">News and Events</a>
<a class="pull-right" href="https://spring.io/blog/category/news.atom"><i class="fas fa-rss-square"></i></a>
</li>
</ul>
</div>
<div class="row-fluid blog--wrapper">
<div class="span8 mobile-left-pane">
<article class="blog--container blog-preview" id="content">
<h2 class="blog--title">
<a href="https://spring.io/blog/2015/07/14/microservices-with-spring">Microservices with Spring</a>
</h2>
<header class="meta-data--container">
<div class="meta-data--item desktop-only">
<div class="meta-data--icon icon blog-icon engineering"></div>
<a class="category" href="https://spring.io/blog/category/engineering">Engineering</a>
</div>
<div class="meta-data--item">
<img class="meta-data--icon" src="./Microservices with Spring_files/0b0bedf6c0dab07b13a322eed9350873.png">
<span class="author">Paul Chapman</span>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon calendar"></div>
<time class="date" pubdate="" datetime="2015-07-14 06:28:00.0">July 14, 2015</time>
</div>
<div class="meta-data--item">
<div class="meta-data--icon icon blog-icon comments"></div>
<a class="comments" data-disqus-identifier="2181" href="https://spring.io/blog/2015/07/14/microservices-with-spring#disqus_thread">171 Comments</a></div>
</header>
<section class="blog--post desktop-only">
<div><h1><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#introduction" class="anchor" name="introduction"></a>Introduction</h1>
<p><strong>NOTE:</strong> <em><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#recent-updates">Revised July 2019</a></em></p>
<p>A simple example of setting up a microservices system using Spring, Spring Boot and Spring Cloud.</p>
<p><a href="http://martinfowler.com/articles/microservices.html">Microservices</a> allow large systems to be built up from a number of collaborating components. It does at the process level what Spring has always done at the component level: loosely coupled processes instead of loosely coupled components.</p>
<a href="./Microservices with Spring_files/shopping-system.jpg"><img src="./Microservices with Spring_files/shopping-system.jpg" title="Click to enlarge" alt="Shopping Application" style="width: 400px; float: right; margin: 0px 5px 5px 10px"></a>
<p>For example imagine an online shop with separate microservices for user-accounts, product-catalog order-processing and shopping carts:</p>
<p>Inevitably there are a number of moving parts that you have to setup and configure to build such a system. How to get them working together is not obvious - you need to have good familiarity with Spring Boot since Spring Cloud leverages it heavily, several Netflix or other OSS projects are required and, of course, there is some Spring configuration “magic”!</p>
<a href="./Microservices with Spring_files/mini-system.jpg"><img src="./Microservices with Spring_files/mini-system.jpg" title="Click to enlarge" alt="Demo Application" style="width: 400px; float: left; margin: 5px 10px 5px 0"></a>
<p>In this article I aim to clarify how things work by building the simplest possible system step-by-step. Therefore, I will only implement a small part of the big system - the user account service.</p>
<p>The <em>Web-Application</em> will make requests to the <em>Account-Service</em> microservice using a RESTful API. We will also need to add a <em>discovery</em> service – so the other processes can find each other.</p>
<p>The code for this application is here: <a href="https://github.com/paulc4/microservices-demo">https://github.com/paulc4/microservices-demo</a>.</p>
<p>The description of how it works is deliberately detailed. Impatient readers may prefer to simply look at the <a href="https://github.com/paulc4/microservices-demo">code</a>. Note that it contains <em>three</em> microservices in a single project.</p><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#learn-more" class="anchor" name="learn-more"></a>Learn More</h2>
<ul>
<li>Sign up for <a href="https://springoneplatform.io/">SpringOne Platform 2019</a> – the premier conference for building scalable microservice applications with Spring. This year we’re in Austin, TX from October 7th to 10th. Use the discount code <strong>S1P_Save200</strong> to save money on your ticket. Need help convincing your manager? Use <a href="https://springoneplatform.io/2019/convince-your-manager">this page</a>.</li>
<li>Get the free eBook <a href="https://content.pivotal.io/ebooks/migrating-to-cloud-native-application-architectures">Migrating to Cloud-Native Architectures</a> by Matt Stine</li>
<li>This <a href="https://content.pivotal.io/webinars/mar-21-tools-and-recipes-to-replatform-monolithic-apps-to-modern-cloud-environments-webinar">webinar</a> discusses tools and recipes to help you re-platform your monolithic apps to modern cloud environments.</li>
</ul>
<a name="recent-updates"></a><h2><a name="recent-updates"></a><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#updates-june-2018" class="anchor" name="updates-june-2018"></a>Updates (June 2018)</h2>
<p>A number of changes since I originally wrote this blog:</p>
<ol>
<li>A <a href="https://spring.io/blog/2015/07/14/microservices-with-spring#configuration-options">discussion</a> of using multiple instances of the same service on the same host.. Demo application updated to match.</li>
<li>A <a href="https://spring.io/blog/2015/07/14/microservices-with-spring#load-balanced-resttemplate">discussion</a> of <code>@LoadBalanced</code> - how this works <em>has changed</em> since the <em>Brixton</em> release-train (<a href="https://projects.spring.io/spring-cloud">Spring Cloud</a> 1.1.0.RELEASE).</li>
<li>Refactored <a href="https://spring.io/blog/2015/07/14/microservices-with-spring#accountsconfiguration-class">configuration</a> of Accounts microservice into its own class <code>AccountsConfiguration</code>.</li>
<li>Upgraded to Spring Boot 2, so a few Boot classes have changed package.</li>
<li>Upgraded <a href="https://spring.io/blog/2015/07/14/microservices-with-spring#running-the-system">demo application</a> to Spring Cloud <em>Finchley</em> release-train (including various fixes from the comments at the end - thanks for the feedback).</li>
<li>The Eureka server dependency has changed to <code>spring-cloud-starter-netflix-eureka-server</code>.</li>
</ol>
<p>Previous version, using Spring Boot 1.5.10 and Spring Cloud Edgeware SR3, is available as git tag v1.2.0.</p>
<p>&nbsp;</p>
<p><em>OK, let’s get started …</em></p><h1><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#service-registration" class="anchor" name="service-registration"></a>Service Registration</h1>
<p>When you have multiple processes working together they need to find each other. If you have ever used Java’s RMI mechanism you may recall that it relied on a central registry so that RMI processes could find each other. Microservices has the same requirement.</p>
<p>The developers at Netflix had this problem when building their systems and created a registration server called Eureka (“I have found it” in Greek). Fortunately for us, they made their discovery server open-source and Spring has incorporated into Spring Cloud, making it even easier to run up a Eureka server. Here is the <em>complete</em> discovery-server application:</p>
<pre><code class="prettyprint java prettyprinted" style=""><span class="lit">@SpringBootApplication</span><span class="pln">
</span><span class="lit">@EnableEurekaServer</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ServiceRegistrationServer</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// Tell Boot to look for registration-server.yml</span><span class="pln">
    </span><span class="typ">System</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="str">"spring.config.name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"registration-server"</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">SpringApplication</span><span class="pun">.</span><span class="pln">run</span><span class="pun">(</span><span class="typ">ServiceRegistrationServer</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln"> args</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>It really is that simple!</p>
<p>Spring Cloud is built on Spring Boot and utilizes parent and starter POMs. The important parts of the <a href="https://github.com/paulc4/microservices-demo/blob/master/pom.xml">POM</a> are:</p>
<pre><code class="prettyprint xml prettyprinted" style=""><span class="pln">    </span><span class="tag">&lt;parent&gt;</span><span class="pln">
        </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework.boot</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
        </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-boot-starter-parent</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
        </span><span class="tag">&lt;version&gt;</span><span class="pln">2.0.1.RELEASE</span><span class="tag">&lt;/version&gt;</span><span class="pln">
    </span><span class="tag">&lt;/parent&gt;</span><span class="pln">

    </span><span class="tag">&lt;dependencies&gt;</span><span class="pln">
        </span><span class="tag">&lt;dependency&gt;</span><span class="pln">
            </span><span class="com">&lt;!-- Setup Spring Boot --&gt;</span><span class="pln">
            </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework.boot</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
            </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-boot-starter</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
        </span><span class="tag">&lt;/dependency&gt;</span><span class="pln">

        </span><span class="tag">&lt;dependency&gt;</span><span class="pln">
            </span><span class="com">&lt;!-- Setup Spring MVC &amp; REST, use Embedded Tomcat --&gt;</span><span class="pln">
            </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework.boot</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
            </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-boot-starter-web</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
        </span><span class="tag">&lt;/dependency&gt;</span><span class="pln">

        </span><span class="tag">&lt;dependency&gt;</span><span class="pln">
            </span><span class="com">&lt;!-- Spring Cloud starter --&gt;</span><span class="pln">
            </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework.cloud</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
            </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-cloud-starter</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
        </span><span class="tag">&lt;/dependency&gt;</span><span class="pln">

        </span><span class="tag">&lt;dependency&gt;</span><span class="pln">
            </span><span class="com">&lt;!-- Eureka for service registration --&gt;</span><span class="pln">
            </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework.cloud</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
            </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-cloud-starter-eureka-server</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
        </span><span class="tag">&lt;/dependency&gt;</span><span class="pln">
    </span><span class="tag">&lt;/dependencies&gt;</span><span class="pln">

   </span><span class="com">&lt;!-- Spring Cloud dependencies --&gt;</span><span class="pln">
    </span><span class="tag">&lt;dependencyManagement&gt;</span><span class="pln">
        </span><span class="tag">&lt;dependencies&gt;</span><span class="pln">
            </span><span class="tag">&lt;dependency&gt;</span><span class="pln">
                </span><span class="tag">&lt;groupId&gt;</span><span class="pln">org.springframework.cloud</span><span class="tag">&lt;/groupId&gt;</span><span class="pln">
                </span><span class="tag">&lt;artifactId&gt;</span><span class="pln">spring-cloud-dependencies</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln">
                </span><span class="tag">&lt;version&gt;</span><span class="pln">Finchley.RELEASE</span><span class="tag">&lt;/version&gt;</span><span class="pln">
                </span><span class="tag">&lt;type&gt;</span><span class="pln">pom</span><span class="tag">&lt;/type&gt;</span><span class="pln">
                </span><span class="tag">&lt;scope&gt;</span><span class="pln">import</span><span class="tag">&lt;/scope&gt;</span><span class="pln">
            </span><span class="tag">&lt;/dependency&gt;</span><span class="pln">
        </span><span class="tag">&lt;/dependencies&gt;</span><span class="pln">
    </span><span class="tag">&lt;/dependencyManagement&gt;</span></code></pre>
<p>This POM has changed since I originally wrote the article to use Spring Boot as its parent not Spring Cloud. Spring Cloud dependencies are provided via the dependency management section.</p>
<p>An sample gradle build file is also included in the github code.</p>

<style>
.infoblock {
border: 1px solid #AAF;
    background-color: white;
    color: #303030;
    margin: 0 0 0 0.5em;
    padding: 0.5em 0 0.5em 1em;
    float: right;
    font-size: 88%;
    width: 45%
}
</style>
<div class="infoblock">
<p style="margin: 0 0 0 0;">
<b>Note: </b> <i>Finchley.RELEASE</i> is the current "release train" - a set of co-ordinated releases -- see note on Spring Cloud <a href="https://projects.spring.io/spring-cloud/#release-trains">home page</a>.
</p>
</div>
<p>By default Spring Boot applications look for an <code>application.properties</code> or <code>application.yml</code> file for configuration. By setting the <code>spring.config.name</code> property we can tell Spring Boot to look for a different file - useful if you have multiple Spring Boot applications in the same project - as I will do shortly.</p>
<p>This application looks for <code>registration-server.properties</code> or <code>registration-server.yml</code>. Here is the relevant configuration from <code>registration-server.yml</code>:</p>
<pre><code class="prettyprint yml prettyprinted" style=""><span class="com"># Configure this Discovery Server</span><span class="pln">
eureka</span><span class="pun">:</span><span class="pln">
  instance</span><span class="pun">:</span><span class="pln">
    hostname</span><span class="pun">:</span><span class="pln"> localhost
  client</span><span class="pun">:</span><span class="pln">  </span><span class="com"># Not a client, don't register with yourself (unless running</span><span class="pln">
           </span><span class="com"># multiple discovery servers for redundancy)</span><span class="pln">
    registerWithEureka</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pln">
    fetchRegistry</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pln">

server</span><span class="pun">:</span><span class="pln">
  port</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1111</span><span class="pln">   </span><span class="com"># HTTP (Tomcat) port</span></code></pre>
<p>By default Eureka runs on port 8761, but here we will use port <code>1111</code> instead. Also by including the registration code in my process I might be a server or a client. The configuration specifies that I am not a client and stops the server process trying to register with itself.</p>

<div class="infoblock">
<h2 style="margin: 10px 0 15px -1em">Using Consul</h2>
<p style="margin-bottom: 10px">
Spring Cloud also supports <a href="https://www.consul.io/">Consul</a> as an alternative to Eureka. You start the Consul Agent (its registration server) using a script and then clients use it to find their microservices. For details, see this blog <a href="https://spring.io/blog/2015/05/27/spring-cloud-consul-1-0-0-m1-available-now">article</a> or project <a href="https://cloud.spring.io/spring-cloud-consul">home page</a>.
</p>
</div>
<p>Try running the <em>RegistrationServer</em> now (see <a href="https://spring.io/blog/2015/07/14/microservices-with-spring#running-the-system">below</a> for help on running the application). You can open the Eureka dashboard here: <a href="http://localhost:1111/">http://localhost:1111</a> and the section showing Applications will be empty.</p>
<p>From now on we will refer to the <em>discovery-server</em> since it could be Eureka or Consul (see side panel).</p><h1><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#creating-a-microservice-em-account-service-em" class="anchor" name="creating-a-microservice-em-account-service-em"></a>Creating a Microservice: <em>Account-Service</em></h1>
<p>A microservice is a stand-alone process that handles a well-defined requirement. </p>
<a href="./Microservices with Spring_files/beans-vs-processes.jpg"><img src="./Microservices with Spring_files/beans-vs-processes.jpg" title="Click to enlarge" alt="Beans vs Processes" style="width: 400px; float: right; margin: 10px 0 5px 15px"></a>
<p>When configuring applications with Spring we emphasize Loose Coupling and Tight Cohesion, These are not new concepts (Larry Constantine is credited with first defining these in the late 1960s - <a href="https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29">reference</a>) but now we are applying them, not to interacting components (Spring Beans), but to interacting processes.</p>
<p>In this example, I have a simple Account management microservice that uses Spring Data to implement a JPA <code>AccountRepository</code> and Spring REST to provide a RESTful interface to account information. In most respects this is a straightforward Spring Boot application.</p>
<p>What makes it special is that it registers itself with the <em>discovery-server</em> at start-up. Here is the Spring Boot startup class:</p>
<pre><code class="prettyprint java prettyprinted" style=""><span class="lit">@EnableAutoConfiguration</span><span class="pln">
</span><span class="lit">@EnableDiscoveryClient</span><span class="pln">
</span><span class="lit">@Import</span><span class="pun">(</span><span class="typ">AccountsWebApplication</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AccountsServer</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="lit">@Autowired</span><span class="pln">
    </span><span class="typ">AccountRepository</span><span class="pln"> accountRepository</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// Will configure using accounts-server.yml</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="str">"spring.config.name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"accounts-server"</span><span class="pun">);</span><span class="pln">

        </span><span class="typ">SpringApplication</span><span class="pun">.</span><span class="pln">run</span><span class="pun">(</span><span class="typ">AccountsServer</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln"> args</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>The annotations do the work:</p>
<ol>
<li><code>@EnableAutoConfiguration</code> - defines this as a Spring Boot application.</li>
<li><code>@EnableDiscoveryClient</code> - this enables service registration and discovery. In this case, this process registers itself with the <em>discovery-server</em> service using its application name (see below).</li>
<li><code>@Import(AccountsWebApplication.class)</code> - this Java Configuration class sets up everything else (see <a href="https://spring.io/blog/2015/07/14/microservices-with-spring#accountswebapplication-configuration">below</a> for more details).</li>
</ol>
<p>What makes this a microservice is the registration with the <em>discovery-server</em> via <code>@EnableDiscoveryClient</code> and its YML configuration completes the setup:</p>
<pre><code class="prettyprint yml prettyprinted" style=""><span class="com"># Spring properties</span><span class="pln">
spring</span><span class="pun">:</span><span class="pln">
  application</span><span class="pun">:</span><span class="pln">
     name</span><span class="pun">:</span><span class="pln"> accounts</span><span class="pun">-</span><span class="pln">service

</span><span class="com"># Discovery Server Access</span><span class="pln">
eureka</span><span class="pun">:</span><span class="pln">
  client</span><span class="pun">:</span><span class="pln">
    serviceUrl</span><span class="pun">:</span><span class="pln">
      defaultZone</span><span class="pun">:</span><span class="pln"> http</span><span class="pun">:</span><span class="com">//localhost:1111/eureka/</span><span class="pln">

</span><span class="com"># HTTP Server</span><span class="pln">
server</span><span class="pun">:</span><span class="pln">
  port</span><span class="pun">:</span><span class="pln"> </span><span class="lit">2222</span><span class="pln">   </span><span class="com"># HTTP (Tomcat) port</span></code></pre>
<p>Note that this file</p>
<ol>
<li>Sets the application name as <code>accounts-service</code>. This service registers under this name and can also be accessed by this name - see below.</li>
<li>Specifies a custom port to listen on (2222). All my processes are using Tomcat, they can’t all listen on port 8080.</li>
<li>The URL of the Eureka Service process - from the previous section.</li>
</ol>
<a href="./Microservices with Spring_files/dashboard.png"><img src="./Microservices with Spring_files/dashboard.png" title="Click to enlarge" alt="Eureka Dashboard" style="width: 450px; float: right; margin: 0px 5px 5px 10px"></a>
<p>Run the <em>AccountsService</em> application now and let it finish initializing. Refresh the dashboard <a href="http://localhost:1111/">http://localhost:1111</a> and you should see the ACCOUNTS-SERVICE listed under Applications. Registration takes up to 30 seconds (by default) so be patient - check the log output from <em>RegistrationService</em></p>

<div class="infoblock">
<p style="margin: 0 0 0 0;">
<b>Warning: </b>Do not try to display XML output using the internal web-viewer of Eclipse/STS because it cannot do so. Use your favorite web browser instead.
</p>
</div>
<p>For more detail, go here: <a href="http://localhost:1111/eureka/apps/">http://localhost:1111/eureka/apps/</a> and you should see something like this:</p>
<pre><code class="prettyprint xml prettyprinted" style=""><span class="tag">&lt;applications&gt;</span><span class="pln">
    </span><span class="tag">&lt;versions__delta&gt;</span><span class="pln">1</span><span class="tag">&lt;/versions__delta&gt;</span><span class="pln">
    </span><span class="tag">&lt;apps__hashcode&gt;</span><span class="pln">UP_1_</span><span class="tag">&lt;/apps__hashcode&gt;</span><span class="pln">
    </span><span class="tag">&lt;application&gt;</span><span class="pln">
        </span><span class="tag">&lt;name&gt;</span><span class="pln">ACCOUNTS-SERVICE</span><span class="tag">&lt;/name&gt;</span><span class="pln">
        </span><span class="tag">&lt;instance&gt;</span><span class="pln">
            </span><span class="tag">&lt;hostName&gt;</span><span class="pln">autgchapmp1m1.corp.emc.com</span><span class="tag">&lt;/hostName&gt;</span><span class="pln">
            </span><span class="tag">&lt;app&gt;</span><span class="pln">ACCOUNTS-SERVICE</span><span class="tag">&lt;/app&gt;</span><span class="pln">
            </span><span class="tag">&lt;ipAddr&gt;</span><span class="pln">172.16.84.1</span><span class="tag">&lt;/ipAddr&gt;&lt;status&gt;</span><span class="pln">UP</span><span class="tag">&lt;/status&gt;</span><span class="pln">
            </span><span class="tag">&lt;overriddenstatus&gt;</span><span class="pln">UNKNOWN</span><span class="tag">&lt;/overriddenstatus&gt;</span><span class="pln">
            </span><span class="tag">&lt;port</span><span class="pln"> </span><span class="atn">enabled</span><span class="pun">=</span><span class="atv">"true"</span><span class="tag">&gt;</span><span class="pln">3344</span><span class="tag">&lt;/port&gt;</span><span class="pln">
            </span><span class="tag">&lt;securePort</span><span class="pln"> </span><span class="atn">enabled</span><span class="pun">=</span><span class="atv">"false"</span><span class="tag">&gt;</span><span class="pln">443</span><span class="tag">&lt;/securePort&gt;</span><span class="pln">
            ...
        </span><span class="tag">&lt;/instance&gt;</span><span class="pln">
    </span><span class="tag">&lt;/application&gt;</span><span class="pln">
</span><span class="tag">&lt;/applications&gt;</span><span class="pln">
</span></code></pre>
<p>Alternatively go to <a href="http://localhost:1111/eureka/apps/ACCOUNTS-SERVICE">http://localhost:1111/eureka/apps/ACCOUNTS-SERVICE</a> and see just the details for <em>AccountsService</em> - if it’s not registered you will get a 404. </p><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#configuration-options" class="anchor" name="configuration-options"></a>Configuration Options</h2>
<p><strong>Registration Time:</strong> Registration takes up to 30s because that is the default client refresh time. You can change this by setting the <code>eureka.instance.leaseRenewalIntervalInSeconds</code> property to a smaller number (in the demo application I have set it to 5). This <em>is not recommended</em> in <a href="https://cloud.spring.io/spring-cloud-static/docs/1.0.x/spring-cloud.html#_why_is_it_so_slow_to_register_a_service">production</a>. See <a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/373">also</a>.</p>
<pre><code class="prettyprint yml prettyprinted" style=""><span class="pln">eureka</span><span class="pun">:</span><span class="pln">
  instance</span><span class="pun">:</span><span class="pln">
    leaseRenewalIntervalInSeconds</span><span class="pun">:</span><span class="pln"> </span><span class="lit">5</span><span class="pln">         </span><span class="com"># DO NOT DO THIS IN PRODUCTION</span></code></pre>
<p><strong>Registration Id:</strong> A process (microservice) registers with the discovery-service using a unique id. If another process registers with the <em>same</em> id, it is treated as a restart (for example some sort of failover or recovery) and the first process registration is discarded. This gives us the fault-tolerant system we desire. </p>
<p>To run multiple instances of the <em>same</em> process (for load-balancing and resilience) they need to register with a unique id. When I first wrote this blog, that was automatic and since the <em>Brixton</em> release-train, it is again.</p>
<p>Under the <em>Angel</em> release train, the instance-id, used by a client to register with a discovery server, was derived from the client’s service name (the same as the Spring application name) and also the client’s host name. The same processes running on the same host would therefore have the same id, so only one could ever register.</p>
<p>Fortunately you could set the id property manually via the client’s Eureka metadata map, like this:</p>
<pre><code class="prettyprint yml prettyprinted" style=""><span class="pln">eureka</span><span class="pun">:</span><span class="pln">
  instance</span><span class="pun">:</span><span class="pln">
    metadataMap</span><span class="pun">:</span><span class="pln">
      instanceId</span><span class="pun">:</span><span class="pln"> $</span><span class="pun">{</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">application</span><span class="pun">.</span><span class="pln">name</span><span class="pun">}:</span><span class="pln">$</span><span class="pun">{</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">application</span><span class="pun">.</span><span class="pln">instance_id</span><span class="pun">:</span><span class="pln">$</span><span class="pun">{</span><span class="pln">server</span><span class="pun">.</span><span class="pln">port</span><span class="pun">}}</span></code></pre>
<p>Since the <em>Brixton</em> release train, <em>this is now the default</em>. So what does it do?</p>
<p>We are setting the <code>instanceId</code> to <code>application-name:instance_id</code>, but if <code>instance_id</code> is not defined, we will use <code>application-name::server-port</code> instead. Note that the <code>spring.application.instance_id</code> is <em>only</em> set when using Cloud Foundry but it conveniently provides a unique id number for each instance of the same application. We can do something similar when running elsewhere by using the server-port (since different instances on the same machine <em>must</em> listen on different ports. Another example you will often see is <code>${spring.application.name}:${spring.application.instance_id:${random.value}}</code> but I personally find using the port number makes each instance easy to identify - the random values are just long strings that don’t mean anything.</p>
<p><strong>Note:</strong> The syntax <code>${x:${y}}</code> is Spring property shorthand for <code>${x} != null ? ${x} : ${y}</code>.</p>
<p>Since the <em>Brixton</em> release there is also a dedicated property for this:</p>
<pre><code class="prettyprint yml prettyprinted" style=""><span class="pln">eureka</span><span class="pun">:</span><span class="pln">
  instance</span><span class="pun">:</span><span class="pln">
    instanceId</span><span class="pun">:</span><span class="pln"> $</span><span class="pun">{</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">application</span><span class="pun">.</span><span class="pln">name</span><span class="pun">}:</span><span class="pln">$</span><span class="pun">{</span><span class="pln">spring</span><span class="pun">.</span><span class="pln">application</span><span class="pun">.</span><span class="pln">instance_id</span><span class="pun">:</span><span class="pln">$</span><span class="pun">{</span><span class="pln">random</span><span class="pun">.</span><span class="kwd">value</span><span class="pun">}}</span></code></pre><h1><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#accessing-the-microservice-em-web-service-em" class="anchor" name="accessing-the-microservice-em-web-service-em"></a>Accessing the Microservice: <em>Web-Service</em></h1>
<p>To consume a RESTful service, Spring provides the <code>RestTemplate</code> class. This allows you to send HTTP requests to a RESTful server and fetch data in a number of formats - such as JSON and XML.</p>

<div class="infoblock" style="width: 50%">
<p style="margin: 0 0 0 0">
<b>Note: </b>The Accounts microservice provides a RESTful interface over HTTP, but any suitable protocol could be used. Messaging using <a href="https://rabbitmq.docs.pivotal.io/">AMQP</a> or JMS is an obvious alternative (in
which case the Discovery Server is no longer needed - instead processes need to know the
names of the queues to talk to, consider using the <a href="https://cloud.spring.io/spring-cloud-config/">Spring Cloud Configuration Server</a><a> for this).
</a></p><a>
</a></div><a>
<p>Which formats can be used depends on the presence of marshaling classes on the classpath - for example JAXB is always detected since it is a standard part of Java. JSON is supported if Jackson jars are present in the classpath.</p>
<p>A microservice (discovery) client can use a <code>RestTemplate</code> and Spring will automatically configure it to be microservice aware (more of this in a moment).</p></a><h2><a></a><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#encapsulating-microservice-access" class="anchor" name="encapsulating-microservice-access"></a>Encapsulating Microservice Access</h2>
<p>Here is part of the <code>WebAccountService</code> for my <em>client</em> application:</p>
<pre><code class="prettyprint java prettyprinted" style=""><span class="lit">@Service</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">WebAccountsService</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="lit">@Autowired</span><span class="pln">        </span><span class="com">// NO LONGER auto-created by Spring Cloud (see below)</span><span class="pln">
    </span><span class="lit">@LoadBalanced</span><span class="pln">     </span><span class="com">// Explicitly request the load-balanced template</span><span class="pln">
                      </span><span class="com">// with Ribbon built-in</span><span class="pln">
    </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">RestTemplate</span><span class="pln"> restTemplate</span><span class="pun">;</span><span class="pln"> 

    </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> serviceUrl</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">WebAccountsService</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> serviceUrl</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">serviceUrl </span><span class="pun">=</span><span class="pln"> serviceUrl</span><span class="pun">.</span><span class="pln">startsWith</span><span class="pun">(</span><span class="str">"http"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln">
               serviceUrl </span><span class="pun">:</span><span class="pln"> </span><span class="str">"http://"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> serviceUrl</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Account</span><span class="pln"> getByNumber</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> accountNumber</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Account</span><span class="pln"> account </span><span class="pun">=</span><span class="pln"> restTemplate</span><span class="pun">.</span><span class="pln">getForObject</span><span class="pun">(</span><span class="pln">serviceUrl
                </span><span class="pun">+</span><span class="pln"> </span><span class="str">"/accounts/{number}"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Account</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln"> accountNumber</span><span class="pun">);</span><span class="pln">

        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">account </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AccountNotFoundException</span><span class="pun">(</span><span class="pln">accountNumber</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">else</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> account</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Note that my <code>WebAccountService</code> is just a wrapper for the RestTemplate fetching data from the microservice. The interesting parts are the <code>serviceUrl</code> and the <code>RestTemplate</code>.</p><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#accessing-the-microservice" class="anchor" name="accessing-the-microservice"></a>Accessing the Microservice</h2>
<p>As shown below, the <code>serviceUrl</code> is provided by the main program to the <code>WebAccountController</code> (which in turn passes it to the <code>WebAccountService</code>):</p>
<pre><code class="prettyprint java prettyprinted" style=""><span class="lit">@SpringBootApplication</span><span class="pln">
</span><span class="lit">@EnableDiscoveryClient</span><span class="pln">
</span><span class="lit">@ComponentScan</span><span class="pun">(</span><span class="pln">useDefaultFilters</span><span class="pun">=</span><span class="kwd">false</span><span class="pun">)</span><span class="pln">  </span><span class="com">// Disable component scanner</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">WebServer</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="com">// Case insensitive: could also use: http://accounts-service</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> ACCOUNTS_SERVICE_URL
                                        </span><span class="pun">=</span><span class="pln"> </span><span class="str">"http://ACCOUNTS-SERVICE"</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// Will configure using web-server.yml</span><span class="pln">
        </span><span class="typ">System</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="str">"spring.config.name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"web-server"</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">SpringApplication</span><span class="pun">.</span><span class="pln">run</span><span class="pun">(</span><span class="typ">WebServer</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln"> args</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="lit">@LoadBalanced</span><span class="pln">    </span><span class="com">// Make sure to create the load-balanced template</span><span class="pln">
    </span><span class="lit">@Bean</span><span class="pln">
    </span><span class="typ">RestTemplate</span><span class="pln"> restTemplate</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RestTemplate</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">/**
     * Account service calls microservice internally using provided URL.
     */</span><span class="pln">
    </span><span class="lit">@Bean</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">WebAccountsService</span><span class="pln"> accountsService</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">WebAccountsService</span><span class="pun">(</span><span class="pln">ACCOUNTS_SERVICE_URL</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="lit">@Bean</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">WebAccountsController</span><span class="pln"> accountsController</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
         </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">WebAccountsController</span><span class="pln">
                       </span><span class="pun">(</span><span class="pln">accountsService</span><span class="pun">());</span><span class="pln">  </span><span class="com">// plug in account-service</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>A few points to note:</p>
<ol>
<li>The <code>WebController</code> is a typical Spring MVC view-based controller returning HTML. The application uses Thymeleaf as the view-technology (for generating dynamic HTML)</li>
<li><code>WebServer</code> is also a <code>@EnableDiscoveryClient</code> but in this case as well as registering itself with the <em>discovery-server</em> (which is not necessary since it offers no services of its own) it uses Eureka to locate the account service.</li>
<li>The default component-scanner setup inherited from Spring Boot looks for <code>@Component</code> classes and, in this case, finds my <code>WebAccountController</code> and tries to create it. However, I want to create it myself, so I disable the scanner like this <code>@ComponentScan(useDefaultFilters=false)</code>.</li>
<li>The <em>service-url</em> I am passing to the <code>WebAccountController</code> is the name the service used to register itself with the <em>discovery-server</em> - by default this is the same as the <code>spring.application.name</code> for the process which is <code>account-service</code> - see <code>account-service.yml</code> above. The use of upper-case is not required but it does help emphasize that <em>ACCOUNTS-SERVICE</em> is a logical host (that will be obtained via discovery) not an actual host.</li>
</ol><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#load-balanced-resttemplate" class="anchor" name="load-balanced-resttemplate"></a>Load Balanced RestTemplate</h2>
<p>The <code>RestTemplate</code> bean will be intercepted and auto-configured by Spring Cloud (due to the <code>@LoadBalanced</code> annotation) to use a custom <code>HttpRequestClient</code> that uses Netflix <a href="http://techblog.netflix.com/2013/01/announcing-ribbon-tying-netflix-mid.html">Ribbon</a> to do the microservice lookup. Ribbon is also a load-balancer so if you have multiple instances of a service available, it picks one for you. (Neither Eureka nor Consul on their own perform load-balancing so we use Ribbon to do it instead).</p>
<p><strong>Note:</strong> From the <em>Brixton</em> Release Train (Spring Cloud 1.1.0.RELEASE), the RestTemplate is no longer created automatically. Originally it was created for you, which caused confusion and potential conflicts (sometimes Spring can be <em>too</em> helpful!).</p>
<p>Note that this instance is qualified using <code>@LoadBalanced</code>. (The <a href="https://github.com/spring-cloud/spring-cloud-commons/blob/master/spring-cloud-commons/src/main/java/org/springframework/cloud/client/loadbalancer/LoadBalanced.java">annotation</a> is itself annotated with <code>@Qualifier</code> - see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-autowired-annotation-qualifiers">here</a> for details). Thus if you have more than one RestTemplate bean, you can make sure to inject the right one, like this:</p>
<pre><code class="prettyprint java prettyprinted" style=""><span class="pln">    </span><span class="lit">@Autowired</span><span class="pln">
    </span><span class="lit">@LoadBalanced</span><span class="pln">     </span><span class="com">// Make sure to inject the load-balanced template</span><span class="pln">
    </span><span class="kwd">protected</span><span class="pln"> </span><span class="typ">RestTemplate</span><span class="pln"> restTemplate</span><span class="pun">;</span></code></pre>
<p>If you look in the <a href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/ribbon/RibbonClientHttpRequestFactory.java">RibbonClientHttpRequestFactory</a> you will see this code:</p>
<pre><code class="prettyprint java prettyprinted" style=""><span class="pln">    </span><span class="typ">String</span><span class="pln"> serviceId </span><span class="pun">=</span><span class="pln"> originalUri</span><span class="pun">.</span><span class="pln">getHost</span><span class="pun">();</span><span class="pln">
    </span><span class="typ">ServiceInstance</span><span class="pln"> instance </span><span class="pun">=</span><span class="pln">
             loadBalancer</span><span class="pun">.</span><span class="pln">choose</span><span class="pun">(</span><span class="pln">serviceId</span><span class="pun">);</span><span class="pln">  </span><span class="com">// loadBalancer uses Ribbon</span><span class="pln">
    </span><span class="pun">...</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> instance non</span><span class="pun">-</span><span class="kwd">null</span><span class="pln"> </span><span class="pun">(</span><span class="pln">service exists</span><span class="pun">)</span><span class="pln"> </span><span class="pun">...</span><span class="pln">
    URI uri </span><span class="pun">=</span><span class="pln"> loadBalancer</span><span class="pun">.</span><span class="pln">reconstructURI</span><span class="pun">(</span><span class="pln">instance</span><span class="pun">,</span><span class="pln"> originalUri</span><span class="pun">);</span></code></pre>
<p>The <code>loadBalancer</code> takes the logical service-name (as registered with the <em>discovery-server</em>) and converts it to the actual hostname of the chosen microservice.</p>
<p>A <code>RestTemplate</code> instance is thread-safe and can be used to access any number of services in different parts of your application (for example, I might have a <code>CustomerService</code> wrapping the same <code>RestTemplate</code> instance accessing a customer data microservice).</p><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#configuration" class="anchor" name="configuration"></a>Configuration</h2>
<p>Below the relevant configuration from <code>web-server.yml</code>. It is used to:</p>
<ol>
<li>Set the application name</li>
<li>Define the URL for accessing the discovery server</li>
<li>Set the Tomcat port to 3333</li>
</ol>
<pre><code class="prettyprint yml prettyprinted" style=""><span class="com"># Spring Properties</span><span class="pln">
spring</span><span class="pun">:</span><span class="pln">
  application</span><span class="pun">:</span><span class="pln">
     name</span><span class="pun">:</span><span class="pln"> web</span><span class="pun">-</span><span class="pln">service

</span><span class="com"># Discovery Server Access</span><span class="pln">
eureka</span><span class="pun">:</span><span class="pln">
  client</span><span class="pun">:</span><span class="pln">
    serviceUrl</span><span class="pun">:</span><span class="pln">
      defaultZone</span><span class="pun">:</span><span class="pln"> http</span><span class="pun">:</span><span class="com">//localhost:1111/eureka/</span><span class="pln">

</span><span class="com"># HTTP Server</span><span class="pln">
server</span><span class="pun">:</span><span class="pln">
  port</span><span class="pun">:</span><span class="pln"> </span><span class="lit">3333</span><span class="pln">   </span><span class="com"># HTTP (Tomcat) port</span></code></pre>
<a name="running-the-system"></a><h1><a name="running-the-system"></a><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#how-to-run-the-demo" class="anchor" name="how-to-run-the-demo"></a>How to Run the Demo</h1>
<p>A small demo of this system is at <a href="https://github.com/paulc4/microservices-demo">http://github.com/paulc4/microservices-demo</a>. Clone it and either load into your favorite IDE or use maven directly. Suggestions on how to run the demo are included in the <a href="https://github.com/paulc4/microservices-demo/blob/master/README.md">README</a> on the project homepage.</p>
<hr style="height:6px"><h1><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#extra-notes" class="anchor" name="extra-notes"></a>Extra Notes</h1>
<p>Some notes about Spring Boot usage by these applications. If you are not familiar with Spring Boot, this explains some of the “magic”!</p><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#view-templating-engines" class="anchor" name="view-templating-engines"></a>View Templating Engines</h2>
<p>The Eureka dashboard (inside <code>RegistrationServer</code>) is implemented using FreeMarker templates but the other two applications use Thymeleaf. To make sure each uses the right view engine, there is extra configuration in each YML file.</p>
<p>This is at the end of <code>registration-server.yml</code> to disable Thymeleaf.</p>
<pre><code class="prettyprint yml prettyprinted" style=""><span class="pun">...</span><span class="pln">
</span><span class="com"># Discovery Server Dashboard uses FreeMarker.  Don't want Thymeleaf templates</span><span class="pln">
spring</span><span class="pun">:</span><span class="pln">
  thymeleaf</span><span class="pun">:</span><span class="pln">
    enabled</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pln">     </span><span class="com"># Disable Thymeleaf spring:</span></code></pre>
<p>Since both <code>AccountService</code> and <code>WebService</code> use thymeleaf, we also need to point each at their own templates. Here is part of <code>account-server.yml</code>:</p>
<pre><code class="prettyprint yml prettyprinted" style=""><span class="com"># Spring properties</span><span class="pln">
spring</span><span class="pun">:</span><span class="pln">
  application</span><span class="pun">:</span><span class="pln">
     name</span><span class="pun">:</span><span class="pln"> accounts</span><span class="pun">-</span><span class="pln">service  </span><span class="com"># Service registers under this name</span><span class="pln">
  freemarker</span><span class="pun">:</span><span class="pln">
    enabled</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pln">      </span><span class="com"># Ignore Eureka dashboard FreeMarker templates</span><span class="pln">
  thymeleaf</span><span class="pun">:</span><span class="pln">
    cache</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pln">        </span><span class="com"># Allow Thymeleaf templates to be reloaded at runtime</span><span class="pln">
    prefix</span><span class="pun">:</span><span class="pln"> classpath</span><span class="pun">:</span><span class="str">/accounts-server/</span><span class="pln">templates</span><span class="pun">/</span><span class="pln">
                        </span><span class="com"># Template location for this application only</span><span class="pln">
</span><span class="pun">...</span></code></pre>
<p><code>web-server.yml</code> is similar but its templates are defined by</p>
<pre><code class="prettyprint yml prettyprinted" style=""><span class="pln">   prefix</span><span class="pun">:</span><span class="pln"> classpath</span><span class="pun">:</span><span class="str">/web-server/</span><span class="pln">templates</span><span class="pun">/</span></code></pre>
<p>Note the / on the end of each <code>spring.thymeleaf.prefix</code> classpath - this is <em>crucial</em>.</p><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#command-line-execution" class="anchor" name="command-line-execution"></a>Command-Line Execution</h2>
<p>The jar is compiled to automatically run <code>io.pivotal.microservices.services.Main</code> when invoked from the command-line - see <a href="https://github.com/paulc4/microservices-demo/blob/master/src/main/java/io/pivotal/microservices/services/Main.java">Main.java</a>.</p>
<p>The Spring Boot option to set the <code>start-class</code> can be seen in the <a href="https://github.com/paulc4/microservices-demo/blob/master/pom.xml">POM</a>:</p>
<pre><code class="prettyprint xml prettyprinted" style=""><span class="pln">    </span><span class="tag">&lt;properties&gt;</span><span class="pln">
        </span><span class="com">&lt;!-- Stand-alone RESTFul application for testing only --&gt;</span><span class="pln">
        </span><span class="tag">&lt;start-class&gt;</span><span class="pln">io.pivotal.microservices.services.Main</span><span class="tag">&lt;/start-class&gt;</span><span class="pln">
    </span><span class="tag">&lt;/properties&gt;</span></code></pre><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#accountsconfiguration-class" class="anchor" name="accountsconfiguration-class"></a>AccountsConfiguration class</h2>
<pre><code class="prettyprint java prettyprinted" style=""><span class="lit">@SpringBootApplication</span><span class="pln">
</span><span class="lit">@EntityScan</span><span class="pun">(</span><span class="str">"io.pivotal.microservices.accounts"</span><span class="pun">)</span><span class="pln">
</span><span class="lit">@EnableJpaRepositories</span><span class="pun">(</span><span class="str">"io.pivotal.microservices.accounts"</span><span class="pun">)</span><span class="pln">
</span><span class="lit">@PropertySource</span><span class="pun">(</span><span class="str">"classpath:db-config.properties"</span><span class="pun">)</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AccountsWebApplication</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
</span><span class="pun">...</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>This is the main configuration class for AccountService which is a classic Spring Boot application using Spring Data. The annotations do most of the work:</p>
<ol>
<li><code>@SpringBootApplication</code> - defines this as a Spring Boot application. This convenient annotation combines <code>@EnableAutoConfiguration</code>, <code>@Configuration</code> and <code>@ComponentScan</code> (which, by default, causes Spring to search the package containing this class, and its sub-packages, for components - potential Spring Beans: <code>AccountController</code> and <code>AccountRepository</code>) .</li>
<li><code>@EntityScan("io.pivotal.microservices.accounts")</code> - because I am using JPA, I need to specify where the <code>@Entity</code> classes are. Normally this is an option you specify in JPA’s <code>persistence.xml</code> or when creating a <code>LocalContainerEntityManagerFactoryBean</code>. Spring Boot will create this factory-bean for me because the <code>spring-boot-starter-data-jpa</code> dependency is on the class path. So an alternative way of specifying where to find the <code>@Entity</code> classes is by using<code>@EntityScan</code>. This will find <code>Account</code>.</li>
<li><code>@EnableJpaRepositories("io.pivotal.microservices.accounts")</code>- look for classes extending Spring Data’s <code>Repository</code> marker interface and automatically implement them using JPA - see <a href="https://projects.spring.io/spring-data-jpa">Spring Data JPA</a>.</li>
<li><code>@PropertySource("classpath:db-config.properties")</code> - properties to configure my <code>DataSource</code> – see <a href="https://github.com/paulc4/microservices-demo/blob/master/src/main/resources/db-config.properties">db-config.properties</a>.</li>
</ol><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#configuring-properties" class="anchor" name="configuring-properties"></a>Configuring Properties</h2>
<p>As mentioned above, Spring Boot applications look for either <code>application.properties</code> or <code>application.yml</code> to configure themselves. Since all three servers used in this application are in the same project, they would automatically use the same configuration.</p>
<p>To avoid that, each specifies an alternative file by setting the <code>spring.config.name</code> property.</p>
<p>For example here is part of <code>WebServer.java</code>.</p>
<pre><code class="prettyprint java prettyprinted" style=""><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="com">// Tell server to look for web-server.properties or web-server.yml</span><span class="pln">
  </span><span class="typ">System</span><span class="pun">.</span><span class="pln">setProperty</span><span class="pun">(</span><span class="str">"spring.config.name"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"web-server"</span><span class="pun">);</span><span class="pln">
  </span><span class="typ">SpringApplication</span><span class="pun">.</span><span class="pln">run</span><span class="pun">(</span><span class="typ">WebServer</span><span class="pun">.</span><span class="kwd">class</span><span class="pun">,</span><span class="pln"> args</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>At runtime, the application will find and use <code>web-server.yml</code> in <code>src/main/resources</code>.</p><h2><a href="https://spring.io/blog/2015/07/14/microservices-with-spring#logging" class="anchor" name="logging"></a>Logging</h2>
<p>Spring Boot sets up INFO level logging for Spring by default. Since we need to examine the logs for evidence of our microservices working, I have raised the level to WARN to reduce the amount of logging.</p>
<p>To do this, the logging level would need to be specified in each of the <code>xxxx-server.yml</code> configuration files. This is usually the best place to define them as logging properties <em>cannot</em> be specified in property files (logging has already been initialized before @PropertySource directives are processed). There is a note on this in the Spring Boot manual, but it’s easy to miss.</p>
<p>Rather than duplicate the logging configuration in each YAML file, I instead opted to put it in the logback configuration file, since Spring Boot uses logback - see <a href="https://github.com/paulc4/microservices-demo/blob/master/src/main/resources/logback.xml">src/main/resources/logback.xml</a>. All three services will share the same <code>logback.xml</code>.</p>
</div>
</section>
<section id="disqus_thread"><iframe id="dsq-app56" name="dsq-app56" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./Microservices with Spring_files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 8569px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></section>
<script type="text/javascript">
      var disqus_shortname = 'spring-io';
      var disqus_identifier = 2181;

      (function(disqus_shortname, document) {
        injectScript('//' + disqus_shortname + '.disqus.com/embed.js');
        injectScript('//' + disqus_shortname + '.disqus.com/count.js');

        function injectScript(url) {
          var s = document.createElement('script');
          s.async = true;
          s.src = url;
          (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(s);
        }

      }(disqus_shortname, document));
    </script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

</article>
</div>
<aside class="span4 mobile-right-pane" id="sidebar">
<div>
<div>
<div id="blog-sidebar-newsletter">
<p>Get the Spring newsletter</p>
<script src="./Microservices with Spring_files/forms2.min.js"></script>
<form id="mktoForm_4723" novalidate="novalidate" class="mktoForm mktoHasWidth mktoLayoutLeft" style="font-family: Helvetica, Arial, sans-serif; font-size: 13px; color: rgb(51, 51, 51); width: 419px;"><style type="text/css">.mktoForm .mktoButtonWrap.mktoSimple .mktoButton {
color:#fff;
border:1px solid #75ae4c;
padding:0.4em 1em;
font-size:1em;
background-color:#99c47c;
background-image: -webkit-gradient(linear, left top, left bottom, from(#99c47c), to(#75ae4c));
background-image: -webkit-linear-gradient(top, #99c47c, #75ae4c);
background-image: -moz-linear-gradient(top, #99c47c, #75ae4c);
background-image: linear-gradient(to bottom, #99c47c, #75ae4c);
}
.mktoForm .mktoButtonWrap.mktoSimple .mktoButton:hover {
border:1px solid #447f19;
}
.mktoForm .mktoButtonWrap.mktoSimple .mktoButton:focus {
outline:none;
border:1px solid #447f19;
}
.mktoForm .mktoButtonWrap.mktoSimple .mktoButton:active{
background-color:#75ae4c;
background-image: -webkit-gradient(linear, left top, left bottom, from(#75ae4c), to(#99c47c));
background-image: -webkit-linear-gradient(top, #75ae4c, #99c47c);
background-image: -moz-linear-gradient(top, #75ae4c, #99c47c);
background-image: linear-gradient(to bottom, #75ae4c, #99c47c);
}
</style><div class="mktoFormRow"><div class="mktoFieldDescriptor mktoFormCol" style="margin-bottom: 10px;"><div class="mktoOffset" style="width: 10px;"></div><div class="mktoFieldWrap mktoRequiredField"><label for="Email" class="mktoLabel mktoHasWidth" style="width: 0px;"><div class="mktoAsterix">*</div></label><div class="mktoGutter mktoHasWidth" style="width: 10px;"></div><input id="Email" name="Email" placeholder="Email Address" maxlength="255" type="email" class="mktoField mktoEmailField mktoHasWidth mktoRequired" style="width: 150px;"><div class="mktoClear"></div></div><div class="mktoClear"></div></div><div class="mktoClear"></div></div><div class="mktoFormRow"><div class="mktoFieldDescriptor mktoFormCol" style="margin-bottom: 10px;"><div class="mktoOffset" style="width: 10px;"></div><div class="mktoFieldWrap mktoRequiredField"><label for="gdprconsent" class="mktoLabel mktoHasWidth" style="width: 0px;"><div class="mktoAsterix">*</div></label><div class="mktoGutter mktoHasWidth" style="width: 10px;"></div><div class="mktoLogicalField mktoCheckboxList mktoHasWidth mktoRequired" style="width: 280px;"><input name="gdprconsent" id="mktoCheckbox_73768_0" type="checkbox" value="yes" class="mktoField"><label for="mktoCheckbox_73768_0">Yes, I would like to be contacted by The Spring Team and Pivotal for newsletters, promotions and events per the terms of Pivotal’s <a href="https://pivotal.io/privacy-policy" target="_blank">Privacy Policy</a> </label></div><div class="mktoClear"></div></div><div class="mktoClear"></div></div><div class="mktoClear"></div></div><div class="mktoButtonRow"><span class="mktoButtonWrap mktoSimple" style="margin-left: 120px;"><button type="submit" class="mktoButton">Subscribe</button></span></div><input type="hidden" name="formid" class="mktoField mktoFieldDescriptor" value="4723"><input type="hidden" name="munchkinId" class="mktoField mktoFieldDescriptor" value="625-IUJ-009"></form>
<script>
                  MktoForms2.setOptions({formXDPath : "/rs/pivotal/images/marketo-xdframe-relative.html"});
                  MktoForms2.loadForm("//connect.pivotal.io", "625-IUJ-009", 4723, function(form){
                      form.onSuccess(function(values, followUpUrl) {
                          form.getFormElem().html("<p>Thank you!</p>");
                          return false;
                      });
                  });
              </script>
</div>
</div>
</div>
</aside>
</div>
</div>
</main>
</div>
<footer>
<div id="top">
<div class="container flex jc-between mx-auto">
<div id="green-circle-sm"></div>

<img alt="" id="circle-grid" src="./Microservices with Spring_files/footer-circles-dc4b03d4edc1f3b7b42a45bdcce411c8.svg">
<div class="third">
<h2 class="bold h3 antialiased">Get ahead</h2>
<p>Pivotal offers training and certification to turbo-charge your progress.</p>
<a class="blue link-animate" href="https://spring.io/training">Learn more</a>
</div>
<div class="third">
<h2 class="bold h3 antialiased">Get support</h2>
<p>Spring Runtime offers support and binaries for OpenJDK™, Spring, and Apache Tomcat® in one simple subscription.</p>
<a class="blue link-animate" href="https://spring.io/support">Learn more</a>
</div>
<div class="third">
<h2 class="bold h3 antialiased">Upcoming events</h2>
<div class="footer-event">
<a class="blue link-animate" href="https://springoneplatform.io/">SpringOne Platform</a>
<p>Sep 21–24, Seattle</p>
</div>
<br>
<div class="footer-event">
<a class="blue link-animate" href="https://springonetour.io/">SpringOne Tour</a>
<p>The best Cloud-Native Java content brought directly to you.</p>
</div>
</div>
</div>
</div>
<div id="bottom">
<div id="bottom-top">
<div class="mx-auto" id="footer-over">
<div class="container flex jc-between mx-auto">
<div class="left">
<div class="flex jc-between">
<div class="footer-column">
<p><strong><a href="https://spring.io/why-spring">Why Spring</a></strong></p>
<ul>
<li><a href="https://spring.io/microservices">Microservices</a></li>
<li><a href="https://spring.io/reactive">Reactive</a></li>
<li><a href="https://spring.io/event-driven">Event Driven</a></li>
<li><a href="https://spring.io/cloud">Cloud</a></li>
<li><a href="https://spring.io/web-applications">Web Applications</a></li>
<li><a href="https://spring.io/serverless">Serverless</a></li>
<li><a href="https://spring.io/batch">Batch</a></li>
</ul>
</div>
<div class="footer-column">
<p><strong><a href="https://spring.io/learn">Learn</a></strong></p>
<ul>
<li><a href="https://spring.io/quickstart">Quickstart</a></li>
<li><a href="https://spring.io/guides">Guides</a></li>
<li><a href="https://spring.io/blog">Blog</a></li>
</ul>
</div>
<div class="footer-column">
<p><strong><a href="https://spring.io/community">Community</a></strong></p>
<ul>
<li><a href="https://spring.io/events">Events</a></li>
<li><a href="https://spring.io/team">Team</a></li>
<li><a href="https://store.pivotal.io/">Store <svg class="external-link-icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" points="15 10.94 15 15 1 15 1 1 5.06 1" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><polyline fill="none" points="8.93 1 15 1 15 7.07" stroke="#333" stroke-miterlimit="10" stroke-width="2"></polyline><line fill="none" stroke="#333" stroke-miterlimit="10" stroke-width="2" x1="15" x2="8" y1="1" y2="8"></line></svg></a></li>
</ul>
</div>
<div class="footer-column">
<p><strong><a href="https://spring.io/projects">Projects</a></strong></p>
<p><strong><a href="https://spring.io/training">Training</a></strong></p>
<p><strong><a href="https://spring.io/support">Support</a></strong></p>
<p><strong><a href="https://spring.io/thank-you">Thank You</a></strong></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="bottom-bottom">
<div class="flex container jc-between">
<div id="spring-links">
<img alt="Spring" id="springlogo-foot" src="./Microservices with Spring_files/spring-logo-fc4350c59999bb62c468361537212419.svg">
<p class="smallest antialiased">© <script>var d = new Date();
                    document.write(d.getFullYear());</script>2020 <a href="https://pivotal.io/">Pivotal Software</a>, Inc. All Rights Reserved. <a href="https://pivotal.io/legal">Terms of Use</a> • <a href="https://pivotal.io/privacy-policy" rel="noopener noreferrer">Privacy</a> • <a href="https://spring.io/trademarks">Trademark Guidelines</a> <span id="thank-you-mobile">• <a href="https://spring.io/thank-you">Thank you</a></span> <span id="teconsent" consent="0,1,2" style="display: inline;"><script src="./Microservices with Spring_files/v1.7-30" async="async" crossorigin=""></script><a id="icon-id0617437846785241" tabindex="0" role="button" lang="en" style="cursor: pointer;">Cookie Preferences</a></span></p>
<p class="smallest antialiased">Apache®, Apache Tomcat®, Apache Kafka®, Apache Cassandra™, and Apache Geode™ are trademarks or registered trademarks of the Apache Software Foundation in the United States and/or other countries. Java™, Java™ SE, Java™ EE, and OpenJDK™ are trademarks of Oracle and/or its affiliates. Kubernetes® is a registered trademark of the Linux Foundation in the United States and other countries. Linux® is the registered trademark of Linus Torvalds in the United States and other countries. Windows® and Microsoft® Azure are registered trademarks of Microsoft Corporation. “AWS” and “Amazon Web Services” are trademarks or registered trademarks of Amazon.com Inc. or its affiliates. All other trademarks and copyrights are property of their respective owners and are only mentioned for informative purposes. Other names may be trademarks of their respective owners.</p>
</div>
<div class="flex jc-between" id="social-icons">
<a href="https://www.youtube.com/user/SpringSourceDev" title="Youtube"><svg id="youtube-icon" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><defs><style>#youtube-icon .cls-1{fill:#191E1E;}#youtube-icon .cls-2{fill:#fff;}</style></defs><circle class="cls-1" cx="20" cy="20" r="20"></circle><path class="cls-2" d="M30.91,14.53a2.89,2.89,0,0,0-2-2C27.12,12,20,12,20,12s-7.12,0-8.9.47a2.9,2.9,0,0,0-2,2A30.56,30.56,0,0,0,8.63,20a30.44,30.44,0,0,0,.46,5.47,2.89,2.89,0,0,0,2,2C12.9,28,20,28,20,28s7.12,0,8.9-.47a2.87,2.87,0,0,0,2-2A30.56,30.56,0,0,0,31.37,20,28.88,28.88,0,0,0,30.91,14.53ZM17.73,23.41V16.59L23.65,20Z"></path></svg></a>
<a href="https://github.com/spring-projects" title="Github"><svg id="github-icon" viewBox="0 0 75.93 75.93" xmlns="http://www.w3.org/2000/svg"><defs><style>#github-icon .cls-1{fill:#191E1E;}#github-icon .cls-2{fill:#fff;fill-rule:evenodd;}</style></defs><path class="cls-1" d="M38,0a38,38,0,1,0,38,38A38,38,0,0,0,38,0Z"></path><path class="cls-2" d="M38,15.59A22.95,22.95,0,0,0,30.71,60.3c1.15.21,1.57-.5,1.57-1.11s0-2,0-3.9c-6.38,1.39-7.73-3.07-7.73-3.07A6.09,6.09,0,0,0,22,48.86c-2.09-1.42.15-1.39.15-1.39a4.81,4.81,0,0,1,3.52,2.36c2,3.5,5.37,2.49,6.67,1.91a4.87,4.87,0,0,1,1.46-3.07c-5.09-.58-10.45-2.55-10.45-11.34a8.84,8.84,0,0,1,2.36-6.15,8.29,8.29,0,0,1,.23-6.07s1.92-.62,6.3,2.35a21.82,21.82,0,0,1,11.49,0c4.38-3,6.3-2.35,6.3-2.35a8.29,8.29,0,0,1,.23,6.07,8.84,8.84,0,0,1,2.36,6.15c0,8.81-5.37,10.75-10.48,11.32a5.46,5.46,0,0,1,1.56,4.25c0,3.07,0,5.54,0,6.29s.42,1.33,1.58,1.1A22.94,22.94,0,0,0,38,15.59Z"></path></svg></a>
<a href="https://twitter.com/springcentral" title="Twitter"><svg id="twitter-icon" viewBox="0 0 75.93 75.93" xmlns="http://www.w3.org/2000/svg"><defs><style>#twitter-icon .cls-1{fill:#191E1E;}#twitter-icon .cls-2{fill:#fff;}</style></defs><circle class="cls-1" cx="37.97" cy="37.97" r="37.97"></circle><path class="cls-2" d="M55.2,22.73a15.43,15.43,0,0,1-4.88,1.91,7.56,7.56,0,0,0-5.61-2.49A7.78,7.78,0,0,0,37,30a7.56,7.56,0,0,0,.2,1.79,21.63,21.63,0,0,1-15.84-8.23,8,8,0,0,0,2.37,10.52,7.66,7.66,0,0,1-3.48-1v.09A7.84,7.84,0,0,0,26.45,41a7.54,7.54,0,0,1-2,.28A7.64,7.64,0,0,1,23,41.09a7.71,7.71,0,0,0,7.18,5.47,15.21,15.21,0,0,1-9.55,3.37,15.78,15.78,0,0,1-1.83-.11,21.41,21.41,0,0,0,11.78,3.54c14.13,0,21.86-12,21.86-22.42,0-.34,0-.68,0-1a15.67,15.67,0,0,0,3.83-4.08,14.9,14.9,0,0,1-4.41,1.24A7.8,7.8,0,0,0,55.2,22.73Z" data-name="Twitter" id="Twitter-2"></path></svg></a>
</div>
</div>
</div>
</div>
</footer>
<script src="./Microservices with Spring_files/main-96ff27c0e58e8198e728d760d3bf350b.js"></script>
<script type="text/javascript" id="truste_0.9924980597879967" src="./Microservices with Spring_files/notice"></script><iframe style="display: none;" src="./Microservices with Spring_files/saved_resource(1).html"></iframe><div id="mktoStyleLoaded" style="display: none; border-top-color: rgb(18, 52, 86);"></div><form novalidate="novalidate" class="mktoForm mktoHasWidth mktoLayoutLeft" style="font-family: Helvetica, Arial, sans-serif; font-size: 13px; color: rgb(51, 51, 51); visibility: hidden; position: absolute; top: -500px; left: -1000px; width: 1905px;"></form><iframe name="mktoFormsXDIframe0.9706115856368478" id="MktoForms2XDIframe" src="./Microservices with Spring_files/marketo-xdframe-relative.html" style="display: none;"></iframe><script type="text/javascript" id="">var imgur=document.querySelectorAll(".gravatar-wrapper-32 img");console.log(imgur);for(var i=0;i<imgur.length;++i){var src=imgur[i].src;src&&-1<src.indexOf("imgur")?imgur[i].parentNode.removeChild(imgur[i]):src&&-1<src.indexOf("gravatar")&&imgur[i].parentNode.removeChild(imgur[i])};</script></body></html>
<!DOCTYPE html>
<!-- saved from url=(0099)https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><!--<base href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples">--><base href="."><meta name="keywords" content="Java, Fork, Join, framework, tutorial, example"><meta name="description" content="How to execute tasks in true parallel fashion using Java Fork/Join framwework"><meta name="generator" content="Joomla! - Open Source Content Management"><title>Understanding Java Fork-Join Framework with Examples</title><link href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples" rel="canonical"><link href="https://www.codejava.net/templates/protostar/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon"><link rel="stylesheet" href="./Understanding Java Fork-Join Framework with Examples_files/e930ac8b6a8d11b90e6d1ed29c4ab0d9.css" type="text/css"><link rel="stylesheet" href="./Understanding Java Fork-Join Framework with Examples_files/font-awesome.min.css" type="text/css"><style type="text/css">@media(max-width:768px){.jf_mm_trigger,#jf_mm_menu{display:block}}
			.jf_mm_trigger{background-color:#4a5052;color:#f5f5f5}
			.jf_mm_wrapper .levelHolderClass,.jf_mm_wrapper .jf_mm_inactive{background-color:#4a5052}
			.jf_mm_wrapper li{background-color:#4a5052}
			.jf_mm_wrapper li:hover{background-color:#434749}
			.jf_mm_wrapper .backItemClass{background-color:#444444}
			.jf_mm_wrapper .backItemClass:hover{background-color:#333333}
			.jf_mm_wrapper li,.jf_mm_wrapper li:last-child,.jf_mm_wrapper .backItemClass{border-color:#5a5e5f}
			.jf_mm_wrapper h2{color:#888888}
			.jf_mm_wrapper a,.jf_mm_wrapper a:hover{color:#eeeeee}
			.jf_mm_wrapper .ltr,.jf_mm_wrapper .rtl{-webkit-box-shadow:5px 0 5px -5px #202020;-moz-box-shadow:5px 0 5px -5px #202020;box-shadow:5px 0 5px -5px #202020;}
		
#jf_mm_menu.jf_hidden{display:none!important}</style><script type="text/javascript" async="" src="./Understanding Java Fork-Join Framework with Examples_files/analytics.js"></script><script type="text/javascript" async="" src="./Understanding Java Fork-Join Framework with Examples_files/recaptcha__en_gb.js"></script><script src="./Understanding Java Fork-Join Framework with Examples_files/api.js" type="text/javascript"></script><link href="./Understanding Java Fork-Join Framework with Examples_files/css" rel="stylesheet" type="text/css"><style type="text/css">h1,h2,h3,h4,h5,h6{
        font-family: 'Open Sans', sans-serif;
      }</style><!--[if lt IE 9]><script src="/media/jui/js/html5.js"></script><![endif]--><script async="" src="./Understanding Java Fork-Join Framework with Examples_files/js"></script><script>window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-29498384-2');</script></head><body class="site com_content view-article no-layout no-task itemid-965"><!-- Body --><div class="body"><div class="container"><!-- Header --><header class="header" role="banner"><div class="header-inner clearfix"><a class="brand pull-left" href="https://www.codejava.net/"><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><font size="45" color="white">Code</font><font size="45" color="red">Java</font></b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i><font size="4" color="white">Coding Your Passion</font></i></a><div id="jf_mm_menu" class="" style="height: 100px; min-height: 100px; width: 0px;"><nav id="jf_mm_menu_multilevelpushmenu" class="jf_mm_wrapper" style="min-height: 100px; height: 100%;"><div class="levelHolderClass ltr jf_mm_inactive" data-level="0" style="margin-left: -200px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="fa fa-times floatRight cursorPointer"></i>CodeJava.net</h2><ul style="display: none;"><li class="item-101 default active" style="text-align: left"><a href="https://www.codejava.net/"><img class="jf_mm_a_img menu-image" src="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples" style="">Home</a></li><li class="item-465 deeper parent" style="text-align: left"><a href="https://www.codejava.net/java-core"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Java Core</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Java Core</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-499" style="text-align: left"><a href="https://www.codejava.net/java-core/the-java-language">The Java Language</a></li><li class="item-856" style="text-align: left"><a href="https://www.codejava.net/java-core/collections">Generics &amp; Collections</a></li><li class="item-859" style="text-align: left"><a href="https://www.codejava.net/java-core/tools">Tools</a></li><li class="item-964" style="text-align: left"><a href="https://www.codejava.net/java-core/exception">Exception Handling</a></li><li class="item-965" style="text-align: left"><a href="https://www.codejava.net/java-core/concurrency">Concurrency</a></li></ul></div></li><li class="item-850 deeper parent" style="text-align: left"><a href="https://www.codejava.net/java-se"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Java SE</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Java SE</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-851" style="text-align: left"><a href="https://www.codejava.net/java-se/swing">Swing</a></li><li class="item-852" style="text-align: left"><a href="https://www.codejava.net/java-se/applet">Applet</a></li><li class="item-853" style="text-align: left"><a href="https://www.codejava.net/java-se/file-io">File I/O</a></li><li class="item-854" style="text-align: left"><a href="https://www.codejava.net/java-se/graphics">2D/3D Graphics</a></li><li class="item-855" style="text-align: left"><a href="https://www.codejava.net/java-se/networking">Networking</a></li><li class="item-857 current" style="text-align: left"><a href="https://www.codejava.net/java-se/ftp">FTP Networking</a></li><li class="item-858" style="text-align: left"><a href="https://www.codejava.net/java-se/jdbc">JDBC</a></li></ul></div></li><li class="item-840 deeper parent" style="text-align: left"><a href="https://www.codejava.net/java-ee"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Java EE</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Java EE</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-848" style="text-align: left"><a href="https://www.codejava.net/java-ee/servlet">Servlet</a></li><li class="item-510" style="text-align: left"><a href="https://www.codejava.net/java-ee/javamail">JavaMail</a></li><li class="item-849" style="text-align: left"><a href="https://www.codejava.net/java-ee/jstl">JSTL</a></li><li class="item-513" style="text-align: left"><a href="https://www.codejava.net/java-ee/jsp">JavaServer Pages (JSP)</a></li><li class="item-980" style="text-align: left"><a href="https://www.codejava.net/java-ee/jpa">Java Persistence API</a></li><li class="item-512" style="text-align: left"><a href="https://www.codejava.net/java-ee/web-services">Web Services</a></li></ul></div></li><li class="item-470 deeper parent" style="text-align: left"><a href="https://www.codejava.net/frameworks"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Frameworks</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Frameworks</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-515" style="text-align: left"><a href="https://www.codejava.net/frameworks/spring">Spring</a></li><li class="item-981" style="text-align: left"><a href="https://www.codejava.net/frameworks/spring-boot">Spring Boot</a></li><li class="item-514" style="text-align: left"><a href="https://www.codejava.net/frameworks/hibernate">Hibernate</a></li><li class="item-516" style="text-align: left"><a href="https://www.codejava.net/frameworks/struts">Struts</a></li></ul></div></li><li class="item-472 deeper parent" style="text-align: left"><a href="https://www.codejava.net/servers"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Servers</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Servers</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-518" style="text-align: left"><a href="https://www.codejava.net/servers/tomcat">Tomcat</a></li></ul></div></li><li class="item-473" style="text-align: left"><a href="https://www.codejava.net/coding">Coding</a></li><li class="item-471 deeper parent" style="text-align: left"><a href="https://www.codejava.net/ides"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>IDEs</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>IDEs</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-517" style="text-align: left"><a href="https://www.codejava.net/ides/eclipse">Eclipse</a></li><li class="item-954" style="text-align: left"><a href="https://www.codejava.net/ides/netbeans">NetBeans</a></li></ul></div></li><li class="item-498" style="text-align: left"><a href="https://www.codejava.net/books">Books</a></li><li class="item-960 deeper parent" style="text-align: left"><a href="https://www.codejava.net/videos"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Videos</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Videos</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-967" style="text-align: left"><a href="https://www.codejava.net/videos/top-trending">Top Trending</a></li><li class="item-968" style="text-align: left"><a href="https://www.codejava.net/videos/top-java-core-and-java-ee">Top Java Core and Java EE</a></li><li class="item-969" style="text-align: left"><a href="https://www.codejava.net/videos/top-spring-and-hibernate">Top Spring and Hibernate</a></li></ul></div></li><li class="item-970" style="text-align: left"><a href="https://www.codejava.net/java-certifications">Certifications</a></li><li class="item-973" style="text-align: left"><a href="https://www.codejava.net/testing">Testing</a></li></ul></div></nav></div><div class="jf_mm_trigger"><i class="fa fa-bars"></i></div><div class="jf_mm_backout"></div><div class="bannergroup"><div class="banneritem"><script data-cfasync="false" type="text/javascript" src="./Understanding Java Fork-Join Framework with Examples_files/728x90below_res.js"></script><div class="clr"></div></div></div></div></header><nav class="navigation" role="navigation"><ul class="nav menu nav-pills">
<li class="item-101"><a href="https://www.codejava.net/">Home</a></li><li class="item-465 active deeper parent dropdown"><a href="https://www.codejava.net/java-core" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Java Core</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-499"><a href="https://www.codejava.net/java-core/the-java-language">The Java Language</a></li><li class="item-856"><a href="https://www.codejava.net/java-core/collections">Generics &amp; Collections</a></li><li class="item-859"><a href="https://www.codejava.net/java-core/tools">Tools</a></li><li class="item-964"><a href="https://www.codejava.net/java-core/exception">Exception Handling</a></li><li class="item-965 current active"><a href="https://www.codejava.net/java-core/concurrency">Concurrency</a></li></ul></li><li class="item-850 deeper parent dropdown"><a href="https://www.codejava.net/java-se" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Java SE</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-851"><a href="https://www.codejava.net/java-se/swing">Swing</a></li><li class="item-852"><a href="https://www.codejava.net/java-se/applet">Applet</a></li><li class="item-853"><a href="https://www.codejava.net/java-se/file-io">File I/O</a></li><li class="item-854"><a href="https://www.codejava.net/java-se/graphics">2D/3D Graphics</a></li><li class="item-855"><a href="https://www.codejava.net/java-se/networking">Networking</a></li><li class="item-857"><a href="https://www.codejava.net/java-se/ftp">FTP Networking</a></li><li class="item-858"><a href="https://www.codejava.net/java-se/jdbc">JDBC</a></li></ul></li><li class="item-840 deeper parent dropdown"><a href="https://www.codejava.net/java-ee" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Java EE</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-848"><a href="https://www.codejava.net/java-ee/servlet">Servlet</a></li><li class="item-510"><a href="https://www.codejava.net/java-ee/javamail">JavaMail</a></li><li class="item-849"><a href="https://www.codejava.net/java-ee/jstl">JSTL</a></li><li class="item-513"><a href="https://www.codejava.net/java-ee/jsp">JavaServer Pages (JSP)</a></li><li class="item-980"><a href="https://www.codejava.net/java-ee/jpa">Java Persistence API</a></li><li class="item-512"><a href="https://www.codejava.net/java-ee/web-services">Web Services</a></li></ul></li><li class="item-470 deeper parent dropdown"><a href="https://www.codejava.net/frameworks" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Frameworks</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-515"><a href="https://www.codejava.net/frameworks/spring">Spring</a></li><li class="item-981"><a href="https://www.codejava.net/frameworks/spring-boot">Spring Boot</a></li><li class="item-514"><a href="https://www.codejava.net/frameworks/hibernate">Hibernate</a></li><li class="item-516"><a href="https://www.codejava.net/frameworks/struts">Struts</a></li></ul></li><li class="item-472 deeper parent dropdown"><a href="https://www.codejava.net/servers" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Servers</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-518"><a href="https://www.codejava.net/servers/tomcat">Tomcat</a></li></ul></li><li class="item-473"><a href="https://www.codejava.net/coding">Coding</a></li><li class="item-471 deeper parent dropdown"><a href="https://www.codejava.net/ides" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">IDEs</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-517"><a href="https://www.codejava.net/ides/eclipse">Eclipse</a></li><li class="item-954"><a href="https://www.codejava.net/ides/netbeans">NetBeans</a></li></ul></li><li class="item-498"><a href="https://www.codejava.net/books">Books</a></li><li class="item-960 deeper parent dropdown"><a href="https://www.codejava.net/videos" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Videos</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-967"><a href="https://www.codejava.net/videos/top-trending">Top Trending</a></li><li class="item-968"><a href="https://www.codejava.net/videos/top-java-core-and-java-ee">Top Java Core and Java EE</a></li><li class="item-969"><a href="https://www.codejava.net/videos/top-spring-and-hibernate">Top Spring and Hibernate</a></li></ul></li><li class="item-970"><a href="https://www.codejava.net/java-certifications">Certifications</a></li><li class="item-973"><a href="https://www.codejava.net/testing">Testing</a></li></ul>

<ul class="breadcrumb">
	&nbsp;&nbsp;<li><a href="https://www.codejava.net/" class="pathway">Home</a><span class="divider">&gt;</span></li><li><a href="https://www.codejava.net/java-core" class="pathway">Java Core</a><span class="divider">&gt;</span></li><li><span>Concurrency</span></li></ul>

</nav><div class="row-fluid"><style>.moduletable_search{
            margin-right: 0!important;
          }
          #sidebar{
            width: 21%!important;
            margin-left: 5px!important;
          }
          #content{
            margin-left: 10px!important;
          }</style><!-- Begin Sidebar --><div id="sidebar" class="span3"><div class="sidebar-nav"><aside><div class="moduletable"><div class="bannergroup"><div class="banneritem"><table class="rightmoduletable"><tbody><tr class="RowHeader"><td><font color="white"><b>Learn Java Concurrency:</b><br></font></td></tr><tr><td><nav><br><ul><li><a href="https://www.codejava.net/java-core/concurrency/how-to-use-threads-in-java-create-start-pause-interrupt-and-join">Java Thread Basics</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-thread-states-thread-life-cycle-in-java">Java Thread Life Cycle</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-thread-priorities-and-daemon-thread-in-java">Thread Priorities and Daemon Thread</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-thread-group-in-java">Thread Group</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-synchronization-tutorial-part-1-the-problems-of-unsynchronized-code">Java Synchronization Part 1</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-synchronization-tutorial-part-2-using-lock-and-condition-objects">Java Synchronization Part 2</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-synchronization-tutorial-part-3-using-synchronized-keyword-intrinsic-locking">Java Synchronization Part 3</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java">Deadlock, Livelock and Starvation</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-atomic-variables-in-java">Java Atomic Variables</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrency-understanding-thread-pool-and-executors">Thread Pool and Executors</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrency-executing-value-returning-tasks-with-callable-and-future">Callable and Future</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-readwritelock-and-reentrantreadwritelock-example">ReadWriteLock and ReentrantReadWriteLock</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-arrayblockingqueue-examples">ArrayBlockingQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-delayqueue-examples">DelayQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-linkedblockingqueue-example">LinkedBlockingQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-priorityblockingqueue-examples">PriorityBlockingQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-synchronousqueue-examples">SynchronousQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrent-collection-concurrenthashmap-examples">ConcurrentHashMap Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrent-collection-copyonwritearraylist-examples">CopyOnWriteArrayList Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrent-collection-copyonwritearrayset-example">CopyOnWriteArraySet Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples">Java Fork-Join Framework </a><br><br></li></ul></nav></td><td></td></tr></tbody></table><div class="clr"></div></div></div></div><div class="moduletable"><div class="bannergroup"><div class="banneritem"><div id="sidebarads" class="sticky"><style>.sticky {
		  position: fixed;
		  top: 0;
		}</style><br><script data-cfasync="false" type="text/javascript" src="./Understanding Java Fork-Join Framework with Examples_files/160x600_responsive.js"></script><script>window.onscroll = function() {myFunction()};

var sidebarads = document.getElementById("sidebarads");
var sticky = sidebarads.offsetTop;

function myFunction() {
  if (window.pageYOffset >= sticky) {
	sidebarads.classList.add("sticky")
  } else {
	sidebarads.classList.remove("sticky");
  }
}</script></div><div class="clr"></div></div></div></div></aside></div></div><!-- End Sidebar --><main id="content" role="main" class="span9"><!-- Begin Content --><div id="system-message-container"><div id="system-message"></div></div><div class="item-page"><div class="page-header"><h1><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples"> Understanding Java Fork-Join Framework with Examples</a></h1></div><div class="article-info muted"><dl class="article-info"><dt class="article-info-term">Details</dt><dd class="createdby">Written by &nbsp;<cite><a href="https://www.codejava.net/nam-ha-minh" rel="author">Nam Ha Minh</a></cite></dd><dd class="modified"><span class="icon-calendar"></span> Last Updated on 13 August 2019						&nbsp; | &nbsp;<a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples?tmpl=component&amp;print=1&amp;page=" title="Print" onclick="window.open(this.href,&#39;win2&#39;,&#39;status=no,toolbar=no,scrollbars=yes,titlebar=no,menubar=no,resizable=yes,width=640,height=480,directories=no,location=no&#39;); return false;" rel="nofollow"><span class="icon-print"></span>&nbsp;Print&nbsp;</a><a href="https://www.codejava.net/component/mailto/?tmpl=component&amp;template=protostar&amp;link=47e0845e08e482157512a9389f6c571ef9cabb58" title="Email" onclick="window.open(this.href,&#39;win2&#39;,&#39;width=400,height=350,menubar=yes,resizable=yes&#39;); return false;"><span class="icon-envelope"></span> Email</a></dd></dl></div>This tutorial helps you understand and experiment with Fork/Join framework, which is used by several new features in Java 7 and Java 8. You will be able to write programs that <i>run tasks in parallel</i> utilized multicore processors which are very popular today (perhaps your computer’s CPU has at least 2 or 4 cores, doesn’t it?).<p></p>Notice that parallel execution is different than concurrent execution:<p></p><p style="margin-left: 30px;">- In parallel execution, each thread is executed in a separate processing core. Therefore, tasks are really executed in true parallel fashion.</p><p style="margin-left: 30px;">- In concurrent execution, the threads are executed on a same core. That means tasks are actually executed in interleave fashion, sharing processing time of a processing core.</p>Don’t worry if you think parallel programming is complex and difficult, as you will see the Fork/Join framework makes it easy for programmers.<p></p>Continue reading because parallel programming will be part of every programmer’s future.<p></p>&nbsp;<p></p><h2><span style="line-height: 115%;">1. What is Fork/Join Framework?</span></h2>Fork/Join framework is a set of APIs that allow programmers to take advantage of parallel execution supported by multicore processors. It uses ‘divide-and-conquer’ strategy: divide a very large problem into smaller parts, which in turn, the small part can be divided further into smaller ones, recursively until a part can be solved directly. This is called ‘fork’.<p></p>Then all parts are executed in parallel on multiple processing cores. The results of each part are ‘joined’ together to produce the final result. Hence the name of the framework ‘Fork/Join’.<p></p>The following pseudo code illustrates how the divide and conquer strategies work with Fork/Join framework:<p></p><p style="margin-left: 0.5in;"><i><span style="font-size: 10pt; line-height: 115%;">if (problemSize &lt; threshold) </span></i></p><p style="margin-left: 0.5in;"><i><span style="font-size: 10pt; line-height: 115%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; solve problem directly</span></i></p><p style="margin-left: 0.5in;"><i><span style="font-size: 10pt; line-height: 115%;">else {</span></i></p><p style="margin-left: 0.5in;"><i><span style="font-size: 10pt; line-height: 115%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break problem into subproblems</span></i></p><p style="margin-left: 0.5in;"><i><span style="font-size: 10pt; line-height: 115%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; recursively solve each problem</span></i></p><p style="margin-left: 0.5in;"><i><span style="font-size: 10pt; line-height: 115%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; combine the results</span></i></p><p style="margin-left: 0.5in;"><i><span style="font-size: 10pt; line-height: 115%;">}</span></i></p>Fork/Join framework is added to JDK since Java 7 and improved in Java 8. It is used by several new features in the Java programming language, including Streams API and sorting an array in parallel.<p></p><div><script data-cfasync="false" type="text/javascript" src="./Understanding Java Fork-Join Framework with Examples_files/336x280_responsive.js"></script></div>Fork/Join framework simplifies parallel programming because:<p></p><p style="margin-left: 30px;">- It simplifies thread creation. Threads are created and managed automatically.</p><p style="margin-left: 30px;">- It automatically makes use of multiple processors so programs can scale to make use of available processors.</p>With support for true parallel execution, Fork/Join framework can significantly reduce computation time and increase performance in solving very large problems such as image processing, video processing, big data processing, etc.<p></p>One interesting point about Fork/Join framework: it uses a <i>work stealing algorithm</i> to balance the load among threads: if a worker thread runs out of things to do, it can steal tasks from other threads that are still busy.<p></p>&nbsp;<p></p><h2><span style="line-height: 115%;">2. Understand Fork/Join Framework’s API</span></h2>The Fork/Join framework API is implemented in the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">java.util.concurrent&nbsp;</span>package. At its core are the following 4 classes:<p></p><ul><li><span style="color: #800000;"><strong><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">ForkJoinTask&lt;V&gt;</span></strong></span>: an abstract class that defines a task that runs within a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool</span>.</li></ul><ul><li><strong><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool</span></strong>: a thread pool that manages the execution of <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask</span>s.</li></ul><ul><li><strong><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveAction</span></strong>: a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask</span>’s subclass for tasks that don’t return values.</li></ul><ul><li><span style="color: #800000;"><strong><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">RecursiveTask&lt;V&gt;</span></strong></span>: a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask</span>’s subclass for tasks that return values.</li></ul>Basically, you implement code for solving problems in a subclass of either <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveAction </span>or <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveTask</span>. And then submit the task to be executed by a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool</span>, which handles everything from threads management to utilization of multicore processor.<p></p>Let’s dive deeper into each of these classes before going through some code examples.<p></p><h2>&nbsp;</h2><h3><span style="line-height: 115%;">ForkJoinTask&lt;V&gt;</span></h3>This is the abstract base class for tasks that run within a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool</span>. The type parameter <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">V </span>specifies the result type of the task. A <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask </span>is a thread-like entity that represents lightweight abstraction of a task, rather than an actual thread of execution. This mechanism allows a large number o tasks to be managed by a small number of actual threads in a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool</span>. Its key methods are:<p></p><ul><li><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">final ForkJoinTask&lt;V&gt; <strong>fork</strong>()</span></li></ul><ul><li><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">final V <strong>join</strong>()</span></li></ul><ul><li><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">final V <strong>invoke</strong>()</span></li></ul>The <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">fork()</span> method submits the task to execute asynchronously. This method return this (<span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask</span>) and the calling thread continues to run.<p></p>The <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">join()</span> method waits until the task is done and returns the result.<p></p>The <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">invoke()</span> method combines <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">fork()</span> and <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">join()</span> in a single call. It starts the task, waits for it to end and return the result.<p></p>In addition, the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask </span>class provides a couple of static methods for invoking more than one task at a time:<p></p><ul><li><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">static void <strong>invokeAll</strong>(ForkJoinTask&lt;?&gt; task1, ForkJoinTask&lt;?&gt; task2)</span>: execute two tasks.</li></ul><ul><li><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">static void <strong>invokeAll</strong>(ForkJoinTask&lt;?&gt;… taskList)</span>: execute a list of tasks.</li></ul>&nbsp;<p></p><h3><span style="line-height: 115%;">RecursiveAction:</span></h3>This is a recursive <span style="color: #800000;"><strong><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">ForkJoinTask</span></strong></span>that doesn’t return a result. “Recursive” means that the task can be split into subtasks of itself by divide-and-conquer strategy (you’ll see how to divide in the code examples in the next section below).<p></p>You must override its abstract method <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">compute()</span> in which computational code is put.<p></p><p style="margin-left: 30px;"><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">protected abstract void <strong>compute</strong>();</span></p>&nbsp;<p></p><h3><span style="line-height: 115%;">RecursiveTask&lt;V&gt;:</span></h3>Similar to <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveAction</span>, but a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveTask </span>returns a result whose type is specified by the type parameter <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">V</span>. You also must to put computational code by overriding the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">compute()</span> method:<p></p><p style="margin-left: 30px;"><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">protected abstract <strong>V compute</strong>();</span></p>&nbsp;<p></p><h3><span style="line-height: 115%;">ForkJoinPool:</span></h3>This class is the heart of Fork/Join framework. It’s responsible for the management of threads and execution of <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask</span>s. You must first have an instance of <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>in order to execute <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask</span>s.<p></p>There are two ways for acquiring a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>instance. The first way creates a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>object using one of its constructors:<p></p><ul><li><strong><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool()</span></strong>: creates a default pool that supports a level of parallelism equal to the number of processors available in the system.</li></ul><ul><li><span style="color: #800000;"><strong><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">ForkJoinPool(int parallelism)</span></strong></span>: creates a pool with a custom level of parallelism which must be greater than 0 and not more than the actual number of processors available.</li></ul>The level of parallelism determines the number of threads that can execute concurrently. In other words, it determines the number of tasks that can be executed simultaneously - but cannot exceed the number of processors.<p></p>However, that doesn’t limit the number of tasks that can be managed by the pool. A <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>can manage many more tasks than its level of parallelism.<p></p>The second way to acquire a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>instance is obtaining the common pool instance using the following <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool</span>’s static method:<p></p><p style="margin-left: 30px;"><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">public static ForkJoinPool <strong>commonPool</strong>()</span></p>The common pool is statically constructed and automatically available for use.<p></p>&nbsp;<p></p><h3><span style="line-height: 115%;">Execute ForkJoinTasks in a ForkJoinPool</span></h3>After you have created an instance of <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool</span>, you can start executing a task using one of the following methods:<p></p><ul><li><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">&lt;T&gt; T <strong>invoke</strong>(ForkJoinTask&lt;T&gt; task)</span>: executes the specified task and returns its result upon completion. This call is synchronous, meaning that the calling thread waits until this method returns. For a resultless task (<span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveAction</span>), the type parameter <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;"><span style="color: #800000;">T</span></span>is <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">Void</span>.</li></ul><ul><li><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">void <strong>execute</strong>(ForkJoinTask&lt;?&gt; task)</span>: executes the specified task asynchronously - the calling code doesn’t wait for the task’s completion - it continues to run.</li></ul>Alternatively, you can execute a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask </span>by calling its own methods<span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;"> fork()</span> or <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">invoke()</span>. In this case, the common pool will be used automatically, if the task is not already running within a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool</span>.<p></p>A noteworthy point: <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>uses daemon threads that are terminated when all user threads are terminated. That means you don’t have to explicitly shutdown a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>(though it is possible). In the case of common pool, calling <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">shutdown()</span> has no effect because the pool is always available for use.<p></p>Okay, that’s enough for the theory.<p></p>In the next email, you will see some examples in action.<p></p>Okay, that’s enough for the theory. It’s time to see some examples in action.<p></p>&nbsp;<p></p><h2><span style="line-height: 115%;">3. Example #1 - Using RecursiveAction</span></h2>In this first example, you will learn how to use the Fork/Join framework to execute a task that doesn’t return a result, by extending the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveAction </span>class.<p></p>Suppose that we need to do a transformation on a very large array of numbers. For the sake of simplicity, the transformation is simply multiply every element in the array by a specified number. The following code is for the transformation task:<p></p><div><div id="highlighter_85888" class="syntaxhighlighter  java "><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.concurrent.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java preprocessor">/**</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This class illustrates how to create a ForkJoinTask that does not return</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* a result.</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number8 index7 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ArrayTransform </code><code class="java keyword">extends</code> <code class="java plain">RecursiveAction {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code><code class="java plain">[] array;</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">number;</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">threshold = 100_000;</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">start;</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">end;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ArrayTransform(</code><code class="java keyword">int</code><code class="java plain">[] array, </code><code class="java keyword">int</code> <code class="java plain">number, </code><code class="java keyword">int</code> <code class="java plain">start, </code><code class="java keyword">int</code> <code class="java plain">end) {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.array = array;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.number = number;</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.start = start;</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.end = end;</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java keyword">void</code> <code class="java plain">compute() {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(end - start &lt; threshold) {</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">computeDirectly();</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">else</code> <code class="java plain">{</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">middle = (end + start) / </code><code class="java value">2</code><code class="java plain">;</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayTransform subTask1 = </code><code class="java keyword">new</code> <code class="java plain">ArrayTransform(array, number, start, middle);</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayTransform subTask2 = </code><code class="java keyword">new</code> <code class="java plain">ArrayTransform(array, number, middle, end);</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">invokeAll(subTask1, subTask2);</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java keyword">void</code> <code class="java plain">computeDirectly() {</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = start; i &lt; end; i++) {</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">array[i] = array[i] * number;</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number40 index39 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>As you can see, this is a subclass of <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveAction </span>and it implements the computation in the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">compute()</span> method.<p></p>The array and number are passed from its constructor. The parameters start and end specify the range of elements in the array to be processed. This helps splitting the array into sub arrays if its size is greater than a threshold, otherwise perform the computation on the whole array directly.<p></p>Look at the code snippet in the else block in the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">compute()</span> method:<p></p><div><div id="highlighter_630227" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">protected</code> <code class="java keyword">void</code> <code class="java plain">compute() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(end - start &lt; threshold) {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">computeDirectly();</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">else</code> <code class="java plain">{</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">middle = (end + start) / </code><code class="java value">2</code><code class="java plain">;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayTransform subTask1 = </code><code class="java keyword">new</code> <code class="java plain">ArrayTransform(array, number, start, middle);</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayTransform subTask2 = </code><code class="java keyword">new</code> <code class="java plain">ArrayTransform(array, number, middle, end);</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">invokeAll(subTask1, subTask2);</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number12 index11 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>Here we divide the array into 2 parts and create two subtasks that process each. In turn, the subtask may be also divided further into smaller subtasks recursively until the size is less than the threshold, which invokes the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">computeDirectly()</span> method.<p></p>And then you can execute the main task on a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>like this:<p></p><div><div id="highlighter_831670" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">ArrayTransform mainTask = </code><code class="java keyword">new</code> <code class="java plain">ArrayTransform(array, number, </code><code class="java value">0</code><code class="java plain">, SIZE);</code></div><div class="line number2 index1 alt1"><code class="java plain">ForkJoinPool pool = </code><code class="java keyword">new</code> <code class="java plain">ForkJoinPool();</code></div><div class="line number3 index2 alt2"><code class="java plain">pool.invoke(mainTask);</code></div></div></td></tr></tbody></table></div></div>or execute the task on the common pool:<p></p><div><div id="highlighter_541804" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">ArrayTransform mainTask = </code><code class="java keyword">new</code> <code class="java plain">ArrayTransform(array, number, </code><code class="java value">0</code><code class="java plain">, SIZE);</code></div><div class="line number2 index1 alt1"><code class="java plain">mainTask.invoke();</code></div></div></td></tr></tbody></table></div></div>Here’s the full source code of the test program:<p></p><div><div id="highlighter_857691" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.*;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.concurrent.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java preprocessor">/**</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This program demonstrates how to execute a resultless ForkJoinTask in</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* a ForkJoinPool</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number9 index8 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ForkJoinRecursiveActionTest {</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java keyword">int</code> <code class="java plain">SIZE = 10_000_000;</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">int</code><code class="java plain">[] array = randomArray();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args) {</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">number = </code><code class="java value">9</code><code class="java plain">;</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"First 10 elements of the array before: "</code><code class="java plain">);</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">print();</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayTransform mainTask = </code><code class="java keyword">new</code> <code class="java plain">ArrayTransform(array, number, </code><code class="java value">0</code><code class="java plain">, SIZE);</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ForkJoinPool pool = </code><code class="java keyword">new</code> <code class="java plain">ForkJoinPool();</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">pool.invoke(mainTask);</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"First 10 elements of the array after: "</code><code class="java plain">);</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">print();</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">int</code><code class="java plain">[] randomArray() {</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code><code class="java plain">[] array = </code><code class="java keyword">new</code> <code class="java keyword">int</code><code class="java plain">[SIZE];</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Random random = </code><code class="java keyword">new</code> <code class="java plain">Random();</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; SIZE; i++) {</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">array[i] = random.nextInt(</code><code class="java value">100</code><code class="java plain">);</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">array;</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number38 index37 alt1">&nbsp;</div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">print() {</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; </code><code class="java value">10</code><code class="java plain">; i++) {</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.print(array[i] + </code><code class="java string">", "</code><code class="java plain">);</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println();</code></div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number45 index44 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>As you can see, we test with an array of 10 million elements that are randomly generated. As the array is too large, we print only the first 10 elements before and after the computation to see the effect:<p></p><div><div id="highlighter_520190" class="syntaxhighlighter  text"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="text plain">First 10 elements of the array before:</code></div><div class="line number2 index1 alt1"><code class="text plain">42, 98, 43, 14, 9, 92, 33, 18, 18, 76,</code></div><div class="line number3 index2 alt2"><code class="text plain">First 10 elements of the array after:</code></div><div class="line number4 index3 alt1"><code class="text plain">378, 882, 387, 126, 81, 828, 297, 162, 162, 684,</code></div></div></td></tr></tbody></table></div></div>&nbsp;<p></p><h2><span style="line-height: 115%;">4. Example #2 - Using RecursiveTask</span></h2>In this second example, you will learn how to implement a task that returns a result. The following task counts the occurrences of even numbers in a large array:<p></p><div><div id="highlighter_100053" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.concurrent.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java preprocessor">/**</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This class illustrates how to create a ForkJoinTask that returns a result.</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number7 index6 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ArrayCounter </code><code class="java keyword">extends</code> <code class="java plain">RecursiveTask&lt;Integer&gt; {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code><code class="java plain">[] array;</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">threshold = 100_000;</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">start;</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">end;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ArrayCounter(</code><code class="java keyword">int</code><code class="java plain">[] array, </code><code class="java keyword">int</code> <code class="java plain">start, </code><code class="java keyword">int</code> <code class="java plain">end) {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.array = array;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.start = start;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.end = end;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java plain">Integer compute() {</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(end - start &lt; threshold) {</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">computeDirectly();</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">else</code> <code class="java plain">{</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">middle = (end + start) / </code><code class="java value">2</code><code class="java plain">;</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayCounter subTask1 = </code><code class="java keyword">new</code> <code class="java plain">ArrayCounter(array, start, middle);</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayCounter subTask2 = </code><code class="java keyword">new</code> <code class="java plain">ArrayCounter(array, middle, end);</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">invokeAll(subTask1, subTask2);</code></div><div class="line number29 index28 alt2">&nbsp;</div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">subTask1.join() + subTask2.join();</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number34 index33 alt1">&nbsp;</div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java plain">Integer computeDirectly() {</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Integer count = </code><code class="java value">0</code><code class="java plain">;</code></div><div class="line number37 index36 alt2">&nbsp;</div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = start; i &lt; end; i++) {</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(array[i] % </code><code class="java value">2</code> <code class="java plain">== </code><code class="java value">0</code><code class="java plain">) {</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">count++;</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number43 index42 alt2">&nbsp;</div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">count;</code></div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number46 index45 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>As you can see, this class extends the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveTask </span>and overrides the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">compute()</span> method that returns a result (an <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">Integer </span>in this case).<p></p>And note that we use the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">join()</span> method to combine the results of subtasks:<p></p><div><div id="highlighter_735327" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">return</code> <code class="java plain">subTask1.join() + subTask2.join();</code></div></div></td></tr></tbody></table></div></div>The test program is similar to the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveAction </span>example:<p></p><div><div id="highlighter_833166" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.*;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.concurrent.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java preprocessor">/**</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This program demonstrates how to execute a ForkJoinTask that returns</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* a result in a ForkJoinPool</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number9 index8 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ForkJoinRecursiveTaskTest {</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java keyword">int</code> <code class="java plain">SIZE = 10_000_000;</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">int</code><code class="java plain">[] array = randomArray();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args) {</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayCounter mainTask = </code><code class="java keyword">new</code> <code class="java plain">ArrayCounter(array, </code><code class="java value">0</code><code class="java plain">, SIZE);</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ForkJoinPool pool = </code><code class="java keyword">new</code> <code class="java plain">ForkJoinPool();</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Integer evenNumberCount = pool.invoke(mainTask);</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Number of even numbers: "</code> <code class="java plain">+ evenNumberCount);</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">int</code><code class="java plain">[] randomArray() {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code><code class="java plain">[] array = </code><code class="java keyword">new</code> <code class="java keyword">int</code><code class="java plain">[SIZE];</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Random random = </code><code class="java keyword">new</code> <code class="java plain">Random();</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; SIZE; i++) {</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">array[i] = random.nextInt(</code><code class="java value">100</code><code class="java plain">);</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number29 index28 alt2">&nbsp;</div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">array;</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>Run this program and you will see the output something like this:<p></p><div><div id="highlighter_840458" class="syntaxhighlighter  text"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="text plain">Number of even numbers: 5000045</code></div></div></td></tr></tbody></table></div></div>&nbsp;<p></p><h2><span style="line-height: 115%;">5. Example #3 - Experiment with Parallelism</span></h2>In this last example, you will learn how the level of parallelism affects the computation time.<p></p>The <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ArrayCounter </span>class is rewritten to have the threshold passed from constructor like this:<p></p><div><div id="highlighter_416086" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div><div class="line number44 index43 alt1">44</div><div class="line number45 index44 alt2">45</div><div class="line number46 index45 alt1">46</div><div class="line number47 index46 alt2">47</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.concurrent.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java preprocessor">/**</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This class illustrates how to create a ForkJoinTask that returns a result.</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number7 index6 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ArrayCounter </code><code class="java keyword">extends</code> <code class="java plain">RecursiveTask&lt;Integer&gt; {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code><code class="java plain">[] array;</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">threshold;</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">start;</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">end;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">ArrayCounter(</code><code class="java keyword">int</code><code class="java plain">[] array, </code><code class="java keyword">int</code> <code class="java plain">start, </code><code class="java keyword">int</code> <code class="java plain">end, </code><code class="java keyword">int</code> <code class="java plain">threshold) {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.array = array;</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.start = start;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.end = end;</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.threshold = threshold;</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java plain">Integer compute() {</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(end - start &lt; threshold) {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">computeDirectly();</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">else</code> <code class="java plain">{</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">middle = (end + start) / </code><code class="java value">2</code><code class="java plain">;</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayCounter subTask1 = </code><code class="java keyword">new</code> <code class="java plain">ArrayCounter(array, start, middle, threshold);</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayCounter subTask2 = </code><code class="java keyword">new</code> <code class="java plain">ArrayCounter(array, middle, end, threshold);</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">invokeAll(subTask1, subTask2);</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">subTask1.join() + subTask2.join();</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">protected</code> <code class="java plain">Integer computeDirectly() {</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Integer count = </code><code class="java value">0</code><code class="java plain">;</code></div><div class="line number38 index37 alt1">&nbsp;</div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = start; i &lt; end; i++) {</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">if</code> <code class="java plain">(array[i] % </code><code class="java value">2</code> <code class="java plain">== </code><code class="java value">0</code><code class="java plain">) {</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">count++;</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number44 index43 alt1">&nbsp;</div><div class="line number45 index44 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">count;</code></div><div class="line number46 index45 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number47 index46 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>And in the test program, the level of parallelism and threshold are passed as arguments to the program:<p></p><div><div id="highlighter_844207" class="syntaxhighlighter  java "><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.util.*;</code></div><div class="line number2 index1 alt1"><code class="java keyword">import</code> <code class="java plain">java.util.concurrent.*;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java preprocessor">/**</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This program allows you to easily test performance for ForkJoinPool</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* with different values of parallelism and threshold.</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number9 index8 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ParallelismTest {</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java keyword">int</code> <code class="java plain">SIZE = 10_000_000;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">int</code><code class="java plain">[] array = randomArray();</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args) {</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">threshold = Integer.parseInt(args[</code><code class="java value">0</code><code class="java plain">]);</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">parallelism = Integer.parseInt(args[</code><code class="java value">1</code><code class="java plain">]);</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">long</code> <code class="java plain">startTime = System.currentTimeMillis();</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ArrayCounter mainTask = </code><code class="java keyword">new</code> <code class="java plain">ArrayCounter(array, </code><code class="java value">0</code><code class="java plain">, SIZE, threshold);</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ForkJoinPool pool = </code><code class="java keyword">new</code> <code class="java plain">ForkJoinPool(parallelism);</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Integer evenNumberCount = pool.invoke(mainTask);</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">long</code> <code class="java plain">endTime = System.currentTimeMillis();</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Number of even numbers: "</code> <code class="java plain">+ evenNumberCount);</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">long</code> <code class="java plain">time = (endTime - startTime);</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Execution time: "</code> <code class="java plain">+ time + </code><code class="java string">" ms"</code><code class="java plain">);</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">int</code><code class="java plain">[] randomArray() {</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code><code class="java plain">[] array = </code><code class="java keyword">new</code> <code class="java keyword">int</code><code class="java plain">[SIZE];</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Random random = </code><code class="java keyword">new</code> <code class="java plain">Random();</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; SIZE; i++) {</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">array[i] = random.nextInt(</code><code class="java value">100</code><code class="java plain">);</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number39 index38 alt2">&nbsp;</div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">array;</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number42 index41 alt1">&nbsp;</div><div class="line number43 index42 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>This program allows you to easily test the performance with different values of parallelism and threshold. Note that it prints the execution time at the end. Try to run this program several times with different arguments and observe the execution time. Here are the suggested commands:<p></p><div><div id="highlighter_348529" class="syntaxhighlighter  text"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="text plain">java ParallelismTest 1 100000</code></div><div class="line number2 index1 alt1"><code class="text plain">java ParallelismTest 2 100000</code></div><div class="line number3 index2 alt2"><code class="text plain">java ParallelismTest 3 100000</code></div><div class="line number4 index3 alt1"><code class="text plain">java ParallelismTest 4 100000</code></div><div class="line number5 index4 alt2"><code class="text plain">java ParallelismTest 2 500000</code></div><div class="line number6 index5 alt1"><code class="text plain">java ParallelismTest 4 500000</code></div><div class="line number7 index6 alt2"><code class="text plain">…</code></div></div></td></tr></tbody></table></div></div>&nbsp;<p></p><h3><span style="line-height: 115%;">6. Conclusion</span></h3>So far I have walked you through a lesson about Fork/Join framework. Here are the key points to remember:<p></p><p style="margin-left: 30px;">- Fork/Join framework is designed to simplify parallel programming for Java programmers.</p><p style="margin-left: 30px;">- <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>is the heart of Fork/Join framework. It allows many <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask</span>s to be executed by a small number of actual threads, with each thread running on a separate processing core.</p><p style="margin-left: 30px;">- You can obtain an instance of <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>by either using its constructor or static method <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">commonPool()</span> that returns the common pool.</p><p style="margin-left: 30px;">- <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask </span>is an abstract class that represents a task that is lighter weight than a normal thread. You implement the computation logic by overriding its<span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;"> compute()</span> method.</p><p style="margin-left: 30px;">- <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveAction </span>is a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask </span>that doesn’t return a result.</p><p style="margin-left: 30px;">- <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">RecursiveTask </span>is a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask </span>that returns a result.</p><p style="margin-left: 30px;">- <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>is different than other pools as it uses work stealing algorithm which allows a thread that runs out of things to do, to steal tasks from other threads that are still busy.</p><p style="margin-left: 30px;">- Threads in <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>are daemon. You don’t have to explicitly shutdown the pool.</p><p style="margin-left: 30px;">- You can execute a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask </span>either by invoking its own methods <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">invoke()</span> or <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">fork()</span>, or by submitting the task to a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinPool </span>and then call <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">invoke()</span> or <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">execute()</span> on the pool.</p><p style="margin-left: 30px;">- Calling <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">invoke()</span> or <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">fork()</span> on a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask </span>will cause the task to run in the common pool, if it is not already running in a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;"><span style="color: #800000;">ForkJoinPool</span>.</span></p><p style="margin-left: 30px;">- Use the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">join()</span> method on <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">ForkJoinTask</span>s to combine the results.</p><p style="margin-left: 30px;">- The <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">invoke()</span> method waits for the task’s completion, but the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;; color: #800000;">execute()</span> method does not.</p>&nbsp;<p></p><h3><span style="line-height: 115%;">API References:</span></h3><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html" rel="nofollow" target="_blank">ForkJoinPool Javadoc</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html" rel="nofollow" target="_blank">ForkJoinTask Javadoc</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html" rel="nofollow" target="_blank">RecursiveAction Javadoc</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html" rel="nofollow" target="_blank">RecursiveTask Javadoc</a></li></ul>&nbsp;<p></p><h3 style="padding: 0px; font-family: &#39;Open Sans&#39;, sans-serif; color: #333333;">Other Java Concurrency Tutorials:</h3><ul style="font-family: Arial, Helvetica, sans-serif; font-size: 14.3px;"><li style="margin: 0px; padding: 0px;"><a style="margin: 0px; padding: 0px; color: #095197; cursor: pointer;" href="https://www.codejava.net/java-core/concurrency/how-to-use-threads-in-java-create-start-pause-interrupt-and-join" target="_blank">How to use Threads in Java (create, start, pause, interrupt and join)</a></li><li style="margin: 0px; padding: 0px;"><a style="margin: 0px; padding: 0px; color: #095197; cursor: pointer;" href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java" target="_blank">Understanding Deadlock, Livelock and Starvation with Code Examples in Java</a></li><li style="margin: 0px; padding: 0px;"><a style="margin: 0px; padding: 0px; color: #095197; cursor: pointer;" href="https://www.codejava.net/java-core/concurrency/java-synchronization-tutorial-part-1-the-problems-of-unsynchronized-code" target="_blank">Java Synchronization Tutorial</a></li><li style="margin: 0px; padding: 0px;"><a style="margin: 0px; padding: 0px; color: #095197; cursor: pointer;" href="https://www.codejava.net/java-core/concurrency/java-concurrency-understanding-thread-pool-and-executors" target="_blank">Understand Thread Pool and Executors</a></li><li style="margin: 0px; padding: 0px;"><a style="margin: 0px; padding: 0px; color: #095197; cursor: pointer;" href="https://www.codejava.net/java-core/concurrency/understanding-atomic-variables-in-java" target="_blank">Understanding Atomic Variables in Java</a></li></ul><div><br><h3>About the Author:</h3><img src="./Understanding Java Fork-Join Framework with Examples_files/NamAuthor.png" align="left" style="padding: 0px 10px 15px 0px"><cite><a href="https://www.codejava.net/nam-ha-minh" target="_blank" rel="author">Nam Ha Minh</a></cite> is certified Java programmer (SCJP and SCWCD). He started programming with Java in the time of Java 1.4 and has been falling in love with Java since then. Make friend with him on <a href="https://www.facebook.com/namjavaprogrammer" rel="nofollow" target="_blank">Facebook</a>.<br><br><script data-cfasync="false" type="text/javascript" src="./Understanding Java Fork-Join Framework with Examples_files/750x300.js"></script></div><input type="hidden" id="jcaid" value="702"><div id="jc"><h4>Add comment</h4><a id="addcomments" href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#addcomments"></a><form id="comments-form" name="comments-form" action="javascript:void(null);"><p><span><input id="comments-form-name" type="text" name="name" maxlength="20" size="22" tabindex="1" placeholder="Name" required=""> &nbsp;&nbsp;&nbsp; <input id="comments-form-email" type="text" name="email" value="" size="22" tabindex="2" placeholder="E-mail" required=""></span></p><p><span><span class="bbcode" style="display: block;"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" id="bbcode-b" title="Bold" class="bbcode-b" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" id="bbcode-i" title="Italic" class="bbcode-i" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" id="bbcode-u" title="Underlined" class="bbcode-u" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" id="bbcode-s" title="Striked" class="bbcode-s" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" id="bbcode-img" title="Image" class="bbcode-img" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" id="bbcode-url" title="Link" class="bbcode-url" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" id="bbcode-quote" title="Quote" class="bbcode-quote" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" id="bbcode-list" title="List" class="bbcode-list" style="display: block;"></a></span><textarea id="comments-form-comment" name="comment" cols="50" rows="6" tabindex="5" placeholder="comment" required=""></textarea><div class="grippie"><span class="counter"> <span>500</span>  symbols left</span></div></span></p><p><span><input class="checkbox" id="comments-form-subscribe" type="checkbox" name="subscribe" value="1" tabindex="5"><label for="comments-form-subscribe">Notify me of follow-up comments</label><br></span></p><p><span></span></p><div class="g-recaptcha" data-sitekey="6Leb1UsUAAAAAMz79FhT2G1eTmOUpvd2E82eUp2F"><div style="width: 304px; height: 78px;"><div><iframe src="./Understanding Java Fork-Join Framework with Examples_files/anchor.html" width="304" height="78" role="presentation" name="a-x119usmh8gyw" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox"></iframe></div><textarea id="g-recaptcha-response" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div></div><p></p><div id="comments-form-buttons"><div class="btn" id="comments-form-send"><button id="btnSendComment" title="Send (Ctrl+Enter)">Send</button></div><div class="btn" id="comments-form-cancel" style="display:none;"><div><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" tabindex="8" onclick="return false;" title="Cancel">Cancel</a></div></div><div style="clear:both;"></div></div><div><input type="hidden" id="object_id" name="object_id" value="702"><input type="hidden" id="object_group" name="object_group" value="com_content"></div></form><div id="comments"><h4><a id="comment" name="comment">Comments</a><a class="refresh" href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" title="Refresh comments list" id="btnRefreshComment1">&nbsp;</a></h4><div id="comments-list" class="comments-list"><div class="even" id="comment-item-16670"><div class="rbox"><div class="comment-box"><a class="comment-anchor" href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#comment-16670" id="comment-16670">#5</a><span class="comment-author">venkat</span><span class="comment-date">2019-08-11 00:43</span><div class="comment-body" id="comment-body-16670">I have read all tutorials in this series. Got good understanding on councurrency. Thank you.</div><span class="comments-buttons"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" class="qclnk" qid="16670">Quote</a></span></div><div class="clear"></div></div></div><div class="odd" id="comment-item-16434"><div class="rbox"><div class="comment-box"><a class="comment-anchor" href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#comment-16434" id="comment-16434">#4</a><span class="comment-author">Bhargava</span><span class="comment-date">2019-04-22 03:09</span><div class="comment-body" id="comment-body-16434">Very well explained. Thanks for your article</div><span class="comments-buttons"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" class="qclnk" qid="16434">Quote</a></span></div><div class="clear"></div></div></div><div class="even" id="comment-item-15448"><div class="rbox"><div class="comment-box"><a class="comment-anchor" href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#comment-15448" id="comment-15448">#3</a><span class="comment-author">Nam</span><span class="comment-date">2018-11-27 23:35</span><div class="comment-body" id="comment-body-15448">Yes, you're right Kevin.</div><span class="comments-buttons"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" class="qclnk" qid="15448">Quote</a></span></div><div class="clear"></div></div></div><div class="odd" id="comment-item-15442"><div class="rbox"><div class="comment-box"><a class="comment-anchor" href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#comment-15442" id="comment-15442">#2</a><span class="comment-author">Kevin</span><span class="comment-date">2018-11-27 00:28</span><div class="comment-body" id="comment-body-15442">First off, excellent write-up, really simplified things for me.<br><br>But would you be able to clarify - You say, <em>"you can execute a ForkJoinTask by calling its own methods fork() or invoke(). In this case, the common pool will be used automatically"</em>. <br><br>How does this differ from using the pool's invoke method? Is the implication that the pool's invoke method might opt not to use the commonPool?</div><span class="comments-buttons"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" class="qclnk" qid="15442">Quote</a></span></div><div class="clear"></div></div></div><div class="even" id="comment-item-5929"><div class="rbox"><div class="comment-box"><a class="comment-anchor" href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#comment-5929" id="comment-5929">#1</a><span class="comment-author">MAHENDAR REDDY BAJJU</span><span class="comment-date">2017-08-11 23:38</span><div class="comment-body" id="comment-body-5929">Please Make tutorial for java 8</div><span class="comments-buttons"><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" class="qclnk" qid="5929">Quote</a></span></div><div class="clear"></div></div></div></div><div id="comments-list-footer"><a class="refresh" href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples#" title="Refresh comments list" id="btnRefreshComment2">Refresh comments list</a></div></div></div></div><!-- End Content --></main></div></div></div><!-- Footer --><footer class="footer" role="contentinfo"><div class="container"><p><font size="+1">About CodeJava.net:</font><br> CodeJava.net shares Java tutorials, code examples and sample projects for programmers at all levels.<br> CodeJava.net is created and managed by <a href="https://www.codejava.net/nam-ha-minh">Nam Ha Minh</a> - a passionate programmer. <br></p><nav class="nav-footer"><a href="https://www.codejava.net/about">About</a>&nbsp; <a href="https://www.codejava.net/contact">Contact</a>&nbsp; <a href="https://www.codejava.net/terms">Terms of Use</a>&nbsp; <a href="https://www.codejava.net/privacy-policy">Privacy Policy</a>&nbsp; <a href="https://www.codejava.net/sitemap">Sitemap</a>&nbsp; <a href="https://www.facebook.com/codejava" target="_blank" rel="nofollow"><b>F</b>acebook</a>&nbsp; <a href="https://twitter.com/codejavadotnet" target="_blank" rel="nofollow"><b>T</b>witter</a>&nbsp;<a href="https://www.youtube.com/codejava" target="_blank" rel="nofollow"><b>Y</b>ouTube</a>&nbsp; </nav><p><br><font size="-3">Copyright © 2012 - 2020 CodeJava.net, all rights reserved.</font></p></div></footer><script src="./Understanding Java Fork-Join Framework with Examples_files/ee519081b2451f336765eca967cf07c4.js" defer="" type="text/javascript"></script><noscript>JavaScript is currently disabled.</noscript><div style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility 0s linear 0.3s, opacity 0.3s linear 0s; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;"><div style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;"></div><div class="g-recaptcha-bubble-arrow" style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;"></div><div class="g-recaptcha-bubble-arrow" style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;"></div><div style="z-index: 2000000000; position: relative;"><iframe title="recaptcha challenge" src="./Understanding Java Fork-Join Framework with Examples_files/bframe.html" name="c-x119usmh8gyw" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox" style="width: 100%; height: 100%;"></iframe></div></div></body></html>
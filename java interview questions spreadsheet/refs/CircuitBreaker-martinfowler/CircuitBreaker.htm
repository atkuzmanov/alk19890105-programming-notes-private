<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0050)https://martinfowler.com/bliki/CircuitBreaker.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta content="uft-8" name="charset">

<title>CircuitBreaker</title>

<meta content="summary_large_image" name="twitter:card">

<meta content="16665197" name="twitter:site:id">

<meta content="bliki: CircuitBreaker" property="og:title">

<meta content="https://martinfowler.com/bliki/CircuitBreaker.html" property="og:url">

<meta content="You use software circuit breakers on connections to remote services. These breakers trip when the supplier becomes unresponsive, once tripped the breaker no longer calls the supplier until reset." property="og:description">

<meta content="https://martinfowler.com/bliki/images/circuitBreaker/sketch.png" property="og:image">

<meta content="martinfowler.com" property="og:site_name">

<meta content="article" property="og:type">

<meta content="2014-03-06 09:28:00 -0500" property="og:article:modified_time">

<meta content="width=device-width, initial-scale=1" name="viewport">

<link href="./CircuitBreaker_files/entry.css" rel="stylesheet" type="text/css">
</head>

<body><header id="banner" style="background-image: url(&quot;/img/zakim.png&quot;); background-repeat: no-repeat">

<div class="name-logo"><a href="https://martinfowler.com/"><img src="./CircuitBreaker_files/mf-name-white.png"></a></div>
  <div class="search">
    <!-- SiteSearch Google -->
    <form method="GET" action="https://www.google.com/search">
      <input type="hidden" name="ie" value="UTF-8">
      <input type="hidden" name="oe" value="UTF-8">
      <input class="field" type="text" name="q" size="15" maxlength="255" value="">
      <button class="button" type="submit" name="btnG" value=" " title="Search">
      <input type="hidden" name="domains" value="martinfowler.com">
      <input type="hidden" name="sitesearch" value=""> 
      <input type="hidden" name="sitesearch" value="martinfowler.com">
    
  </button></form></div>

<div class="menu-button navmenu-button"><a class="icon icon-bars" href="https://martinfowler.com/bliki/CircuitBreaker.html#navmenu-bottom"></a></div>

<nav class="top-menu">
<ul>
<li><a class="" href="https://refactoring.com/">Refactoring</a></li>

<li><a class="" href="https://martinfowler.com/agile.html">Agile</a></li>

<li><a class="" href="https://martinfowler.com/architecture">Architecture</a></li>

<li><a class="" href="https://martinfowler.com/aboutMe.html">About</a></li>

<li><a class="tw" href="https://www.thoughtworks.com/">ThoughtWorks</a></li>

<li><a class="icon icon-rss" href="https://martinfowler.com/feed.atom" title="feed"></a></li>

<li><a class="icon icon-twitter" href="https://www.twitter.com/martinfowler" title="twitter stream"></a></li>
</ul>
</nav>
</header>
<nav id="top-navmenu">
<nav class="navmenu">
<div class="nav-head">  <div class="search">
    <!-- SiteSearch Google -->
    <form method="GET" action="https://www.google.com/search">
      <input type="hidden" name="ie" value="UTF-8">
      <input type="hidden" name="oe" value="UTF-8">
      <input class="field" type="text" name="q" size="15" maxlength="255" value="">
      <button class="button" type="submit" name="btnG" value=" " title="Search">
      <input type="hidden" name="domains" value="martinfowler.com">
      <input type="hidden" name="sitesearch" value=""> 
      <input type="hidden" name="sitesearch" value="martinfowler.com">
    
  </button></form></div>

<div class="closediv">
<span class="close" title="close"></span>
</div>
</div>

<div class="nav-body">
<div class="topics">
<h2>Topics</h2>

<p><a href="https://martinfowler.com/architecture">Architecture</a></p>

<p><a href="https://refactoring.com/">Refactoring</a></p>

<p><a href="https://martinfowler.com/agile.html">Agile</a></p>

<p><a href="https://martinfowler.com/delivery.html">Delivery</a></p>

<p><a href="https://martinfowler.com/microservices">Microservices</a></p>

<p><a href="https://martinfowler.com/data">Data</a></p>

<p><a href="https://martinfowler.com/testing">Testing</a></p>

<p><a href="https://martinfowler.com/dsl.html">DSL</a></p>
</div>

<div class="about">
<h2>about me</h2>

<p><a href="https://martinfowler.com/aboutMe.html">About</a></p>

<p><a href="https://martinfowler.com/books">Books</a></p>

<p><a href="https://martinfowler.com/faq.html">FAQ</a></p>
</div>

<div class="content">
<h2>content</h2>

<p><a href="https://martinfowler.com/videos.html">Videos</a></p>

<p><a href="https://martinfowler.com/tags">Content Index</a></p>

<p><a href="https://martinfowler.com/articles/eurogames">Board Games</a></p>

<p><a href="https://martinfowler.com/photos">Photography</a></p>
</div>

<div class="tw">
<h2>ThoughtWorks</h2>

<p><a href="https://thoughtworks.com/insights">Insights</a></p>

<p><a href="https://thoughtworks.com/careers">Careers</a></p>

<p><a href="https://thoughtworks.com/products">Products</a></p>
</div>

<div class="feeds">
<h2>follow</h2>

<p><a href="https://www.twitter.com/martinfowler">Twitter</a></p>

<p><a href="https://martinfowler.com/feed.atom">RSS</a></p>
</div>
</div>
</nav>
</nav>

<main>
<article>
<h1><a href="https://martinfowler.com/bliki/CircuitBreaker.html">CircuitBreaker</a></h1>

<p class="date">6 March 2014</p>

<div class="frontMatter">
<div class="author">
<p class="author-photo"><a href="https://martinfowler.com/"><img src="./CircuitBreaker_files/mf.jpg" title="Photo of Martin Fowler"></a></p>

<p class="name"><a href="https://martinfowler.com/" rel="author">Martin Fowler</a></p>
</div>

<div class="spacer"></div>

<div class="tags">
<p class="tag-link"><a href="https://martinfowler.com/tags/continuous%20delivery.html">continuous delivery</a></p>

<p class="tag-link"><a href="https://martinfowler.com/tags/application%20architecture.html">application architecture</a></p>
</div>
</div>

<div class="clear"></div>

<div class="paperBody">
<p>It's common for software systems to make remote calls to software
  running in different processes, probably on different machines
  across a network. One of the big differences between in-memory calls
  and remote calls is that remote calls can fail, or hang without a
  response until some timeout limit is reached. What's worse if you
  have many callers on a unresponsive supplier, then you can run out
  of critical resources leading to cascading failures across multiple
  systems. In his excellent book <a href="https://www.amazon.com/gp/product/0978739213?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0978739213">Release
  It</a><img src="./CircuitBreaker_files/ir" width="1" height="1" border="0" alt="" style="width: 1px !important; height: 1px !important; border:none !important; margin:0px !important;">, Michael Nygard popularized the Circuit Breaker pattern to
  prevent this kind of catastrophic cascade.</p>

<p>The basic idea behind the circuit breaker is very simple. You
  wrap a protected function call in a circuit breaker object, which monitors for
  failures. Once the failures reach a certain threshold, the circuit
  breaker trips, and all further calls to the circuit breaker return
  with an error, without the protected call being made at all. Usually
  you'll also want some kind of monitor alert if the circuit breaker
  trips.</p>

<div class="fullPhoto " style="width: 300px;"><img src="./CircuitBreaker_files/sketch.png" width="300">
<p class="photoCaption"></p>
</div>

<div class="clear"></div>

<p>Here's a simple example of this behavior in Ruby, protecting against timeouts.</p>

<p>I set up the breaker with a block (<a href="https://martinfowler.com/bliki/Lambda.html">Lambda</a>) which is the
  protected call.</p>

<pre>cb = CircuitBreaker.new {|arg| @supplier.func arg}</pre>

<p>The breaker stores the block, initializes various parameters
  (for thresholds, timeouts, and monitoring), and resets the breaker
  into its closed state.</p>

<p class="code-label">class CircuitBreaker...
</p>

<pre>  attr_accessor :invocation_timeout, :failure_threshold, :monitor
  def initialize &amp;block
    @circuit = block
    @invocation_timeout = 0.01
    @failure_threshold = 5
    @monitor = acquire_monitor
    reset
  end
</pre>

<p>Calling the circuit breaker will call the underlying block if the
  circuit is closed, but return an error if it's open</p>

<pre># client code
    aCircuitBreaker.call(5)


</pre>

<p class="code-label">class CircuitBreaker...
</p>

<pre>  def call args
    case state
    when :closed
      begin
        do_call args
      rescue Timeout::Error
        record_failure
        raise $!
      end
    when :open then raise CircuitBreaker::Open
    else raise "Unreachable Code"
    end
  end
  def do_call args
    result = Timeout::timeout(@invocation_timeout) do
      @circuit.call args
    end
    reset
    return result
  end
</pre>

<p>Should we get a timeout, we increment the failure counter,
  successful calls reset it back to zero. </p>

<p class="code-label">class CircuitBreaker...
</p>

<pre>  def record_failure
    @failure_count += 1
    @monitor.alert(:open_circuit) if :open == state
  end
  def reset
    @failure_count = 0
    @monitor.alert :reset_circuit
  end
</pre>

<p>I determine the state of the breaker comparing the failure count
  to the threshold</p>

<p class="code-label">class CircuitBreaker...
</p>

<pre>  def state
     (@failure_count &gt;= @failure_threshold) ? :open : :closed
  end
</pre>

<p>This simple circuit breaker avoids making the protected call when
  the circuit is open, but would need an external intervention to
  reset it when things are well again. This is a reasonable approach
  with electrical circuit breakers in buildings, but for software
  circuit breakers we can have the breaker itself detect if the
  underlying calls are working again. We can implement this
  self-resetting behavior by trying the protected call again after a
  suitable interval, and resetting the breaker should it succeed.</p>

<div class="fullPhoto "><img src="./CircuitBreaker_files/state.png">
<p class="photoCaption"></p>
</div>

<div class="clear"></div>

<p>Creating this kind of breaker means adding a threshold for trying
  the reset and setting up a variable to hold the time of the last error.</p>

<p class="code-label">class ResetCircuitBreaker...
</p>

<pre>  def initialize &amp;block
    @circuit = block
    @invocation_timeout = 0.01
    @failure_threshold = 5
    @monitor = BreakerMonitor.new
    @reset_timeout = 0.1
    reset
  end
  def reset
    @failure_count = 0
    @last_failure_time = nil
    @monitor.alert :reset_circuit
  end
</pre>

<p>There is now a third state present - half open - meaning the
  circuit is ready to make a real call as trial to see if the problem
  is fixed.</p>

<p class="code-label">class ResetCircuitBreaker...
</p>

<pre>  def state
    case
    when (@failure_count &gt;= @failure_threshold) &amp;&amp; 
        (Time.now - @last_failure_time) &gt; @reset_timeout
      :half_open
    when (@failure_count &gt;= @failure_threshold)
      :open
    else
      :closed
    end
  end
</pre>

<p>Asked to call in the half-open state results in a trial call,
  which will either reset the breaker if successful or restart the
  timeout if not.</p>

<p class="code-label">class ResetCircuitBreaker...
</p>

<pre>  def call args
    case state
    when :closed, :half_open
      begin
        do_call args
      rescue Timeout::Error
        record_failure
        raise $!
      end
    when :open
      raise CircuitBreaker::Open
    else
      raise "Unreachable"
    end
  end
  def record_failure
    @failure_count += 1
    @last_failure_time = Time.now
    @monitor.alert(:open_circuit) if :open == state
  end
</pre>

<p>This example is a simple explanatory one, in practice circuit
  breakers provide a good bit more features and parameterization.
  Often they will protect against a range of errors that protected
  call could raise, such as network connection failures. Not all
  errors should trip the circuit, some should reflect normal failures
  and be dealt with as part of regular logic. </p>

<p>With lots of traffic, you can have problems with many calls just
  waiting for the initial timeout. Since remote calls are often slow,
  it's often a good idea to put each call on a different thread using
  a <a href="http://en.wikipedia.org/wiki/Futures_and_promises">future or
  promise</a> to handle the results when they come back. By drawing
  these threads from a thread pool, you can arrange for the circuit to
  break when the thread pool is exhausted.</p>

<p>The example shows a simple way to trip the breaker — a count that
  resets on a successful call. A more sophisticated approach might
  look at frequency of errors, tripping once you get, say, a 50% failure
  rate. You might also have different thresholds for different errors,
  such as a threshold of 10 for timeouts but 3 for connection failures.</p>

<p>The example I've shown is a circuit breaker for synchronous
  calls, but circuit breakers are also useful for asynchronous
  communications. A common technique here is to put all requests on a
  queue, which the supplier consumes at its speed - a useful technique
  to avoid overloading servers. In this case the circuit breaks when
  the queue fills up.</p>

<p>On their own, circuit breakers help reduce resources tied up in
  operations which are likely to fail. You avoid waiting on timeouts
  for the client, and a broken circuit avoids putting load on a
  struggling server. I talk here about remote calls, which are a
  common case for circuit breakers, but they can be used in any
  situation where you want to protect parts of a system from failures
  in other parts. </p>

<p>Circuit breakers are a valuable place for monitoring. Any change
  in breaker state should be logged and breakers should reveal details
  of their state for deeper monitoring. Breaker behavior is often a
  good source of warnings about deeper troubles in the environment.
  Operations staff should be able to trip or reset breakers.</p>

<p>Breakers on their own are valuable, but clients using them need
  to react to breaker failures. As with any remote invocation you need
  to consider what to do in case of failure. Does it fail the
  operation you're carrying out, or are there workarounds you can do?
  A credit card authorization could be put on a queue to deal with
  later, failure to get some data may be mitigated by showing some
  stale data that's good enough to display.</p>

<div class="furtherReading">
<h2>Further Reading</h2>

<p>The netflix tech blog contains a lot of useful information on
    improving reliability of systems with lots of services. <a href="http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html">Their
    Dependency Command</a> talks about using circuit breakers and
    a thread pool limit. </p>

<p>Netflix have open-sourced <a href="https://github.com/Netflix/Hystrix/">Hystrix</a>, a sophisticated
    tool for dealing with latency and fault tolerance for distributed
    systems. It includes an implementation of the circuit breaker
    pattern with the thread pool limit</p>

<p>There are other open-source implementations of the circuit
    breaker pattern in <a href="http://github.com/wsargent/circuit_breaker/tree/master">Ruby</a>,
    <a href="https://github.com/Comcast/jrugged">Java</a>, 
    <a href="http://www.grails.org/plugin/circuit-breaker">Grails
    Plugin</a>, <a href="http://timross.wordpress.com/2008/02/10/implementing-the-circuit-breaker-pattern-in-c/">C#</a>,
    <a href="http://github.com/sptz45/circuit-breaker/tree/master">AspectJ</a>,
    and <a href="http://github.com/FaKod/Circuit-Breaker-for-Scala">Scala</a></p>
</div>

<div class="acknowledgements">
<h2>Acknowledgements</h2>

    Pavel Shpak spotted and reported a bug in the example code
  </div>
</div>
</article>

<div class="clear"></div>
</main>

<nav id="bottom-navmenu" style="display: none;">
<nav class="navmenu">
<div class="nav-head">  <div class="search">
    <!-- SiteSearch Google -->
    <form method="GET" action="https://www.google.com/search">
      <input type="hidden" name="ie" value="UTF-8">
      <input type="hidden" name="oe" value="UTF-8">
      <input class="field" type="text" name="q" size="15" maxlength="255" value="">
      <button class="button" type="submit" name="btnG" value=" " title="Search">
      <input type="hidden" name="domains" value="martinfowler.com">
      <input type="hidden" name="sitesearch" value=""> 
      <input type="hidden" name="sitesearch" value="martinfowler.com">
    
  </button></form></div>

<div class="closediv">
<span class="close" title="close"></span>
</div>
</div>

<div class="nav-body">
<div class="topics">
<h2>Topics</h2>

<p><a href="https://martinfowler.com/architecture">Architecture</a></p>

<p><a href="https://refactoring.com/">Refactoring</a></p>

<p><a href="https://martinfowler.com/agile.html">Agile</a></p>

<p><a href="https://martinfowler.com/delivery.html">Delivery</a></p>

<p><a href="https://martinfowler.com/microservices">Microservices</a></p>

<p><a href="https://martinfowler.com/data">Data</a></p>

<p><a href="https://martinfowler.com/testing">Testing</a></p>

<p><a href="https://martinfowler.com/dsl.html">DSL</a></p>
</div>

<div class="about">
<h2>about me</h2>

<p><a href="https://martinfowler.com/aboutMe.html">About</a></p>

<p><a href="https://martinfowler.com/books">Books</a></p>

<p><a href="https://martinfowler.com/faq.html">FAQ</a></p>
</div>

<div class="content">
<h2>content</h2>

<p><a href="https://martinfowler.com/videos.html">Videos</a></p>

<p><a href="https://martinfowler.com/tags">Content Index</a></p>

<p><a href="https://martinfowler.com/articles/eurogames">Board Games</a></p>

<p><a href="https://martinfowler.com/photos">Photography</a></p>
</div>

<div class="tw">
<h2>ThoughtWorks</h2>

<p><a href="https://thoughtworks.com/insights">Insights</a></p>

<p><a href="https://thoughtworks.com/careers">Careers</a></p>

<p><a href="https://thoughtworks.com/products">Products</a></p>
</div>

<div class="feeds">
<h2>follow</h2>

<p><a href="https://www.twitter.com/martinfowler">Twitter</a></p>

<p><a href="https://martinfowler.com/feed.atom">RSS</a></p>
</div>
</div>
</nav>
</nav>
<footer id="page-footer">
<div class="tw-logo">
<a href="http://www.thoughtworks.com/">
<img src="./CircuitBreaker_files/tw-white-300.png">
</a>
</div>
<div class="menu-button">
<div class="icon-bars navmenu-button"></div>
</div>
<div class="copyright">
<p>© Martin Fowler | <a href="http://www.thoughtworks.com/privacy-policy">Privacy Policy</a> | <a href="https://martinfowler.com/aboutMe.html#disclosures">Disclosures</a></p>
</div>
</footer>
<!-- Google Analytics -->
<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-17005812-1', 'auto');
ga('send', 'pageview');
</script>
<script async="" src="./CircuitBreaker_files/analytics.js"></script>
<!-- End Google Analytics -->



<script src="./CircuitBreaker_files/jquery-1.11.3.min.js" type="text/javascript"></script>

<script src="./CircuitBreaker_files/mfcom.js" type="text/javascript"></script>


</body></html>
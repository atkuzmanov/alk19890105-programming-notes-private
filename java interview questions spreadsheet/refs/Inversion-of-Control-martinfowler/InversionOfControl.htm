<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0054)https://martinfowler.com/bliki/InversionOfControl.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta content="uft-8" name="charset">

<title>InversionOfControl</title>

<meta content="summary" name="twitter:card">

<meta content="16665197" name="twitter:site:id">

<meta content="bliki: InversionOfControl" property="og:title">

<meta content="https://martinfowler.com/bliki/InversionOfControl.html" property="og:url">

<meta content="a bliki entry for InversionOfControl" property="og:description">

<meta content="https://martinfowler.com/logo-sq.png" property="og:image">

<meta content="martinfowler.com" property="og:site_name">

<meta content="article" property="og:type">

<meta content="2005-06-26 00:00:00 -0400" property="og:article:modified_time">

<meta content="width=device-width, initial-scale=1" name="viewport">

<link href="./InversionOfControl_files/entry.css" rel="stylesheet" type="text/css">
</head>

<body><header id="banner" style="background-image: url(&quot;/img/zakim.png&quot;); background-repeat: no-repeat">

<div class="name-logo"><a href="https://martinfowler.com/"><img src="./InversionOfControl_files/mf-name-white.png"></a></div>
  <div class="search">
    <!-- SiteSearch Google -->
    <form method="GET" action="https://www.google.com/search">
      <input type="hidden" name="ie" value="UTF-8">
      <input type="hidden" name="oe" value="UTF-8">
      <input class="field" type="text" name="q" size="15" maxlength="255" value="">
      <button class="button" type="submit" name="btnG" value=" " title="Search">
      <input type="hidden" name="domains" value="martinfowler.com">
      <input type="hidden" name="sitesearch" value=""> 
      <input type="hidden" name="sitesearch" value="martinfowler.com">
    
  </button></form></div>

<div class="menu-button navmenu-button"><a class="icon icon-bars" href="https://martinfowler.com/bliki/InversionOfControl.html#navmenu-bottom"></a></div>

<nav class="top-menu">
<ul>
<li><a class="" href="https://refactoring.com/">Refactoring</a></li>

<li><a class="" href="https://martinfowler.com/agile.html">Agile</a></li>

<li><a class="" href="https://martinfowler.com/architecture">Architecture</a></li>

<li><a class="" href="https://martinfowler.com/aboutMe.html">About</a></li>

<li><a class="tw" href="https://www.thoughtworks.com/">ThoughtWorks</a></li>

<li><a class="icon icon-rss" href="https://martinfowler.com/feed.atom" title="feed"></a></li>

<li><a class="icon icon-twitter" href="https://www.twitter.com/martinfowler" title="twitter stream"></a></li>
</ul>
</nav>
</header>
<nav id="top-navmenu">
<nav class="navmenu">
<div class="nav-head">  <div class="search">
    <!-- SiteSearch Google -->
    <form method="GET" action="https://www.google.com/search">
      <input type="hidden" name="ie" value="UTF-8">
      <input type="hidden" name="oe" value="UTF-8">
      <input class="field" type="text" name="q" size="15" maxlength="255" value="">
      <button class="button" type="submit" name="btnG" value=" " title="Search">
      <input type="hidden" name="domains" value="martinfowler.com">
      <input type="hidden" name="sitesearch" value=""> 
      <input type="hidden" name="sitesearch" value="martinfowler.com">
    
  </button></form></div>

<div class="closediv">
<span class="close" title="close"></span>
</div>
</div>

<div class="nav-body">
<div class="topics">
<h2>Topics</h2>

<p><a href="https://martinfowler.com/architecture">Architecture</a></p>

<p><a href="https://refactoring.com/">Refactoring</a></p>

<p><a href="https://martinfowler.com/agile.html">Agile</a></p>

<p><a href="https://martinfowler.com/delivery.html">Delivery</a></p>

<p><a href="https://martinfowler.com/microservices">Microservices</a></p>

<p><a href="https://martinfowler.com/data">Data</a></p>

<p><a href="https://martinfowler.com/testing">Testing</a></p>

<p><a href="https://martinfowler.com/dsl.html">DSL</a></p>
</div>

<div class="about">
<h2>about me</h2>

<p><a href="https://martinfowler.com/aboutMe.html">About</a></p>

<p><a href="https://martinfowler.com/books">Books</a></p>

<p><a href="https://martinfowler.com/faq.html">FAQ</a></p>
</div>

<div class="content">
<h2>content</h2>

<p><a href="https://martinfowler.com/videos.html">Videos</a></p>

<p><a href="https://martinfowler.com/tags">Content Index</a></p>

<p><a href="https://martinfowler.com/articles/eurogames">Board Games</a></p>

<p><a href="https://martinfowler.com/photos">Photography</a></p>
</div>

<div class="tw">
<h2>ThoughtWorks</h2>

<p><a href="https://thoughtworks.com/insights">Insights</a></p>

<p><a href="https://thoughtworks.com/careers">Careers</a></p>

<p><a href="https://thoughtworks.com/products">Products</a></p>
</div>

<div class="feeds">
<h2>follow</h2>

<p><a href="https://www.twitter.com/martinfowler">Twitter</a></p>

<p><a href="https://martinfowler.com/feed.atom">RSS</a></p>
</div>
</div>
</nav>
</nav>

<main>
<article>
<h1><a href="https://martinfowler.com/bliki/InversionOfControl.html">InversionOfControl</a></h1>

<p class="date">26 June 2005</p>

<div class="frontMatter">
<div class="author">
<p class="author-photo"><a href="https://martinfowler.com/"><img src="./InversionOfControl_files/mf.jpg" title="Photo of Martin Fowler"></a></p>

<p class="name"><a href="https://martinfowler.com/" rel="author">Martin Fowler</a></p>
</div>

<div class="spacer"></div>

<div class="tags">
<p class="tag-link"><a href="https://martinfowler.com/tags/application%20architecture.html">application architecture</a></p>

<p class="tag-link"><a href="https://martinfowler.com/tags/API%20design.html">API design</a></p>

<p class="tag-link"><a href="https://martinfowler.com/tags/object%20collaboration%20design.html">object collaboration design</a></p>
</div>
</div>

<div class="clear"></div>

<div class="paperBody">
<p>Inversion of Control is a common phenomenon that you come across
	when extending frameworks. Indeed it's often seen as a defining
	characteristic of a framework.</p>

<p>Let's consider a simple example. Imagine I'm writing a program to
	get some information from a user and I'm using a command line
	enquiry. I might do it something like this</p>

<pre>  #ruby
  puts 'What is your name?'
  name = gets
  process_name(name)
  puts 'What is your quest?'
  quest = gets
  process_quest(quest)
</pre>

<p>In this interaction, my code is in control: it decides when
 to ask questions, when to read responses, and when to process those
results.</p>

<p>However if I were were to use a windowing system to
 do something like this, I would do it by configuring a window.</p>

<pre>  require 'tk'
  root = TkRoot.new()
  name_label = TkLabel.new() {text "What is Your Name?"}
  name_label.pack
  name = TkEntry.new(root).pack
  name.bind("FocusOut") {process_name(name)}
  quest_label = TkLabel.new() {text "What is Your Quest?"}
  quest_label.pack
  quest = TkEntry.new(root).pack
  quest.bind("FocusOut") {process_quest(quest)}
  Tk.mainloop()
</pre>

<p>There's a big difference now in the flow of control between these
programs - in particular the control of when the
<code>process_name</code> and <code>process_quest</code> methods are
called. In the command line form I control when these methods are
called, but in the window example I don't. Instead I hand control over
to the windowing system (with the <code>Tk.mainloop</code> command). It then
decides when to call my methods, based on the bindings I made when
creating the form. The control is inverted - it calls me rather me
calling the framework. This phenomenon is Inversion of Control (also known
as the Hollywood Principle - "Don't call us, we'll call you").</p>

<blockquote>
<p>One important
	characteristic of a framework is that the methods defined by the
	user to tailor the framework will often be called from within the
	framework itself, rather than from the user's application code. The
	framework often plays the role of the main program in coordinating
	and sequencing application activity. This inversion of control gives
	frameworks the power to serve as extensible skeletons. The methods
	supplied by the user tailor the generic algorithms defined in the
	framework for a particular application.</p>

<p class="quote-attribution">-- <a href="http://www.laputan.org/drc/drc.html">Ralph Johnson and Brian Foote</a></p>
</blockquote>

<p>Inversion of Control is a key part of what makes a framework
	different to a library. A library is essentially a set of functions
	that you can call, these days usually organized into classes. Each
	call does some work and returns control to the client.</p>

<p>A framework embodies some abstract design, with more behavior
	built in. In order to use it you need to insert your behavior into
	various places in the framework either by subclassing or by plugging
	in your own classes. The framework's code then calls your code at
	these points.</p>

<p>There are various ways you can plug your code in to be called. In
	the ruby example above, we invoke a bind method on the text entry
	field that passes an event name and a <a href="https://martinfowler.com/bliki/Lambda.html">Lambda</a> as an argument. Whenever
	the text entry box detects the event, it calls the code in the
	closure. Using closures like this is very convenient, but many
	languages don't support them.</p>

<p>Another way to do this is to have the framework define events
	and have the client code subscribe to these events. .NET is a good
	example of a platform that has language features to allow people to
	declare events on widgets. You can then bind a method to the event
	by using a delegate.</p>

<p>The above approaches (they are really the same) work well for
single cases, but sometimes you want to combine several required
method calls in a single unit of extension. In this case the framework can
define an interface that a client code must implement for the relevant
calls.</p>

<p>EJBs are a good example of this style of inversion of control.
When you develop a session bean, you can implement various methods
that are called by the EJB container at various lifecyle points. For
example the 	Session Bean interface defines <code>ejbRemove</code>,
<code>ejbPassivate</code> (stored to secondary storage), and
<code>ejbActivate</code> (restored from passive state). You don't get
to control when these methods are called, just what they do. The
container calls us, we don't call it.</p>

<p>These are complicated cases of inversion of control, but you run
into this effect in much simpler situations. A <a href="https://www.amazon.com/gp/product/0201633612?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201633612">template method</a><img src="./InversionOfControl_files/ir" width="1" height="1" border="0" alt="" style="width: 1px !important; height: 1px !important; border:none !important; margin:0px !important;"> is a
good example: the super-class defines the flow of control, subclasses
extend this overriding methods or implementing abstract methods to do
the extension. So in JUnit, the framework code calls
<code>setUp</code> and <code>tearDown</code> methods for you to create
and clean up your text fixture. It does the calling, your code reacts
- so again control is inverted.</p>

<p>There is some confusion these days over the meaning of inversion
of control due to the rise of IoC containers; some people confuse the
general principle here with the specific styles of inversion of
control (such as <a href="https://martinfowler.com/articles/injection.html">dependency
injection</a>) that these containers use. The name is somewhat
confusing (and ironic) since IoC containers are generally regarded as
a competitor to EJB, yet EJB uses inversion of control just as much
(if not more).</p>

<p><b>Etymology: </b>As far as I can tell, the term Inversion of Control first came to
	light in Johnson and Foote's paper <a href="http://www.laputan.org/drc/drc.html">Designing Reusable Classes</a>,
	published by the Journal of Object-Oriented Programming in 1988. The
	paper is one of those that's aged well - it's well worth a read now
	over fifteen years later. They think they got the term from
	somewhere else, but can't remember what. The term then insinuated itself into the
	object-oriented community and appears in  the <a href="https://www.amazon.com/gp/product/0201633612?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201633612">Gang of Four</a><img src="./InversionOfControl_files/ir" width="1" height="1" border="0" alt="" style="width: 1px !important; height: 1px !important; border:none !important; margin:0px !important;"> book. The
	more colorful synonym 'Hollywood Principle' seems to originate in a
	<a href="http://www.digibarn.com/friends/curbow/star/XDEPaper.pdf">paper by Richard Sweet</a> on  Mesa in 1983. In a list of design goals he writes: 
	 <i>"Don't call us, we'll call you (Hollywood's Law): A tool should
arrange for Tajo to notify it when the user wishes to communicate some event
to the tool, rather than adopt an 'ask the user for a command and execute
it' model."</i> John Vlissides wrote a <a href="http://www.research.ibm.com/designpatterns/pubs/ph-feb96.txt">column
for C++ report</a> that provides a good explanation of the concept
under the 'Hollywood Principle' moniker. (Thanks to Brian Foote and
Ralph Johnson for helping me with the Etymology.)</p>
</div>
</article>

<div class="clear"></div>
</main>

<nav id="bottom-navmenu" style="display: none;">
<nav class="navmenu">
<div class="nav-head">  <div class="search">
    <!-- SiteSearch Google -->
    <form method="GET" action="https://www.google.com/search">
      <input type="hidden" name="ie" value="UTF-8">
      <input type="hidden" name="oe" value="UTF-8">
      <input class="field" type="text" name="q" size="15" maxlength="255" value="">
      <button class="button" type="submit" name="btnG" value=" " title="Search">
      <input type="hidden" name="domains" value="martinfowler.com">
      <input type="hidden" name="sitesearch" value=""> 
      <input type="hidden" name="sitesearch" value="martinfowler.com">
    
  </button></form></div>

<div class="closediv">
<span class="close" title="close"></span>
</div>
</div>

<div class="nav-body">
<div class="topics">
<h2>Topics</h2>

<p><a href="https://martinfowler.com/architecture">Architecture</a></p>

<p><a href="https://refactoring.com/">Refactoring</a></p>

<p><a href="https://martinfowler.com/agile.html">Agile</a></p>

<p><a href="https://martinfowler.com/delivery.html">Delivery</a></p>

<p><a href="https://martinfowler.com/microservices">Microservices</a></p>

<p><a href="https://martinfowler.com/data">Data</a></p>

<p><a href="https://martinfowler.com/testing">Testing</a></p>

<p><a href="https://martinfowler.com/dsl.html">DSL</a></p>
</div>

<div class="about">
<h2>about me</h2>

<p><a href="https://martinfowler.com/aboutMe.html">About</a></p>

<p><a href="https://martinfowler.com/books">Books</a></p>

<p><a href="https://martinfowler.com/faq.html">FAQ</a></p>
</div>

<div class="content">
<h2>content</h2>

<p><a href="https://martinfowler.com/videos.html">Videos</a></p>

<p><a href="https://martinfowler.com/tags">Content Index</a></p>

<p><a href="https://martinfowler.com/articles/eurogames">Board Games</a></p>

<p><a href="https://martinfowler.com/photos">Photography</a></p>
</div>

<div class="tw">
<h2>ThoughtWorks</h2>

<p><a href="https://thoughtworks.com/insights">Insights</a></p>

<p><a href="https://thoughtworks.com/careers">Careers</a></p>

<p><a href="https://thoughtworks.com/products">Products</a></p>
</div>

<div class="feeds">
<h2>follow</h2>

<p><a href="https://www.twitter.com/martinfowler">Twitter</a></p>

<p><a href="https://martinfowler.com/feed.atom">RSS</a></p>
</div>
</div>
</nav>
</nav>
<footer id="page-footer">
<div class="tw-logo">
<a href="http://www.thoughtworks.com/">
<img src="./InversionOfControl_files/tw-white-300.png">
</a>
</div>
<div class="menu-button">
<div class="icon-bars navmenu-button"></div>
</div>
<div class="copyright">
<p>© Martin Fowler | <a href="http://www.thoughtworks.com/privacy-policy">Privacy Policy</a> | <a href="https://martinfowler.com/aboutMe.html#disclosures">Disclosures</a></p>
</div>
</footer>
<!-- Google Analytics -->
<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-17005812-1', 'auto');
ga('send', 'pageview');
</script>
<script async="" src="./InversionOfControl_files/analytics.js"></script>
<!-- End Google Analytics -->



<script src="./InversionOfControl_files/jquery-1.11.3.min.js" type="text/javascript"></script>

<script src="./InversionOfControl_files/mfcom.js" type="text/javascript"></script>


</body></html>
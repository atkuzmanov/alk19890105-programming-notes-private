<!DOCTYPE html>
<!-- saved from url=(0081)https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/ -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/jquery.color-2.1.2.min.js"></script><script type="text/javascript" async="" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/f.txt"></script><script async="" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/analytics.js"></script><script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/cmp.complete.bundle.js"></script><script async="" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/apstag.js"></script><script type="text/javascript">!function(a9,a,p,s,t,A,g){if(a[a9])return;function q(c,r){a[a9]._Q.push([c,r])}a[a9]={init:function(){q("i",arguments)},fetchBids:function(){q("f",arguments)},setDisplayBids:function(){},targetingKeys:function(){return[]},_Q:[]};A=p.createElement(s);A.async=!0;A.src=t;g=p.getElementsByTagName(s)[0];g.parentNode.insertBefore(A,g)}("apstag",window,document,"script","//c.amazon-adsystem.com/aax2/apstag.js");</script><script type="text/javascript" async="" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/videoplayer.js"></script><script type="text/javascript" async="" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/prebid.js"></script><link rel="stylesheet" type="text/css" href="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/e185d.css" media="all"><meta name="viewport" content="width=device-width, initial-scale=1"><title>How to work with wait(), notify() and notifyAll() in Java? - HowToDoInJava</title><meta name="description" content="The Object class in Java has three final methods that allow threads to communicate i.e. wait(), notify() and notifyAll(). Learn how to use these methods."><meta name="robots" content="max-snippet:-1, max-image-preview:large, max-video-preview:-1"><link rel="canonical" href="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/"><meta property="og:locale" content="en_US"><meta property="og:type" content="article"><meta property="og:title" content="How to work with wait(), notify() and notifyAll() in Java? - HowToDoInJava"><meta property="og:description" content="The Object class in Java has three final methods that allow threads to communicate i.e. wait(), notify() and notifyAll(). Learn how to use these methods."><meta property="og:url" content="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/"><meta property="og:site_name" content="HowToDoInJava"><meta property="article:publisher" content="http://www.facebook.com/HowToDoInJava"><meta property="article:author" content="http://www.facebook.com/HowToDoInJAVA"><meta property="article:tag" content="Java Concurrency"><meta property="article:section" content="Java Concurrency"><meta property="og:image" content="https://howtodoinjava.com/wp-content/uploads/2015/12/Java-Concurrency.gif"><meta property="og:image:secure_url" content="https://howtodoinjava.com/wp-content/uploads/2015/12/Java-Concurrency.gif"><meta property="og:image:width" content="451"><meta property="og:image:height" content="359"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:description" content="The Object class in Java has three final methods that allow threads to communicate i.e. wait(), notify() and notifyAll(). Learn how to use these methods."><meta name="twitter:title" content="How to work with wait(), notify() and notifyAll() in Java? - HowToDoInJava"><meta name="twitter:site" content="@HowToDoInJAVA"><meta name="twitter:image" content="https://howtodoinjava.com/wp-content/uploads/2015/12/Java-Concurrency.gif"><meta name="twitter:creator" content="@HowToDoInJAVA"> <script async="" type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/gpt.js"></script><script type="application/ld+json" class="yoast-schema-graph yoast-schema-graph--main">{"@context":"https://schema.org","@graph":[{"@type":"WebSite","@id":"https://howtodoinjava.com/#website","url":"https://howtodoinjava.com/","name":"HowToDoInJava","publisher":{"@id":"https://howtodoinjava.com/#/schema/person/"},"potentialAction":{"@type":"SearchAction","target":"https://howtodoinjava.com/?s={search_term_string}","query-input":"required name=search_term_string"}},{"@type":"ImageObject","@id":"https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#primaryimage","url":"https://howtodoinjava.com/wp-content/uploads/2015/12/Java-Concurrency.gif","width":451,"height":359,"caption":"Java Concurrency"},{"@type":"WebPage","@id":"https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#webpage","url":"https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/","inLanguage":"en-US","name":"How to work with wait(), notify() and notifyAll() in Java? - HowToDoInJava","isPartOf":{"@id":"https://howtodoinjava.com/#website"},"primaryImageOfPage":{"@id":"https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#primaryimage"},"datePublished":"2015-01-08T09:57:59+00:00","dateModified":"2018-09-11T07:19:21+00:00","description":"The Object class in Java has three final methods that allow threads to communicate i.e. wait(), notify() and notifyAll(). Learn how to use these methods."},{"@type":"Article","@id":"https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#article","isPartOf":{"@id":"https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#webpage"},"author":{"@id":"https://howtodoinjava.com/#/schema/person/4976af58f6c3f73d00db5f58af2bde12"},"headline":"How to work with wait(), notify() and notifyAll() in Java?","datePublished":"2015-01-08T09:57:59+00:00","dateModified":"2018-09-11T07:19:21+00:00","commentCount":"37","mainEntityOfPage":{"@id":"https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#webpage"},"publisher":{"@id":"https://howtodoinjava.com/#/schema/person/"},"image":{"@id":"https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#primaryimage"},"keywords":"Java Concurrency","articleSection":"Java Concurrency"},{"@type":["Person"],"@id":"https://howtodoinjava.com/#/schema/person/4976af58f6c3f73d00db5f58af2bde12","name":"Lokesh Gupta","description":"A family guy with fun loving nature. Love computers, programming and solving everyday problems.  Find me on <a href=\"https://facebook.com/howtodoinjava\" rel=\"external\">Facebook</a> and <a href=\"https://twitter.com/howtodoinjava\" rel=\"external\">Twitter</a>.","sameAs":["http://www.facebook.com/HowToDoInJAVA","https://twitter.com/HowToDoInJAVA"]}]}</script> <link rel="amphtml" href="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/amp/"><meta name="generator" content="AMP for WP 1.0.15"><link rel="dns-prefetch" href="https://use.fontawesome.com/"><link rel="dns-prefetch" href="https://s.w.org/"><style id="scriptlesssocialsharing-inline-css" type="text/css">.scriptlesssocialsharing-buttons { width: auto }.scriptlesssocialsharing-buttons a.button { padding: 6px; width: 20%;; }@media only screen and (max-width: 767px) { .scriptlesssocialsharing .sss-name { position: absolute; clip: rect(1px, 1px, 1px, 1px); height: 1px; width: 1px; border: 0; overflow: hidden; } }</style><link rel="stylesheet" id="font-awesome-css" href="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/all.css" type="text/css" media="all"> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/jquery.js"></script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/jquery-migrate.min.js"></script> <script type="text/javascript">/*<![CDATA[*//*  */
var wpnmObject = {"button_html":"<div class=\"wpnm-button style-2\">\n                            <div class=\"wpnm-button-inner-left\"><\/div>\n                            <div class=\"wpnm-button-inner\"><\/div>\n                        <\/div>","default":"","server_time":"1580913897","turn_on_time":"","turn_off_time":""};
/*  *//*]]>*/</script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/wp-night-mode-public.js"></script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/responsive-menu.js"></script> <link rel="https://api.w.org/" href="https://howtodoinjava.com/wp-json/"><link rel="canonical" href="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/"><style type="text/css">.wp-night-mode-slider {
				background-color: ;
			}

			.wp-night-mode-button.active .wp-night-mode-slider {
				background-color: ;
			}

			body.wp-night-mode-on * {
				background: #020202;
			}

			body.wp-night-mode-on .customize-partial-edit-shortcut button,
			body.wp-night-mode-on .customize-partial-edit-shortcut button svg,
			body.wp-night-mode-on #adminbarsearch,
			body.wp-night-mode-on span.display-name,
			body.wp-night-mode-on span.ab-icon,
			body.wp-night-mode-on span.ab-label {
			    background: transparent;
			}

			body.wp-night-mode-on * {
				color: #c1c1c1;
			}

			body.wp-night-mode-on a {
				color: #c1c1c1;
			}

			body.wp-night-mode-on a:hover,
			body.wp-night-mode-on a:visited,
			body.wp-night-mode-on a:active {
				color: #c1c1c1;
			}
		}				@media (prefers-color-scheme: dark) {
					 
			.wp-night-mode-slider {
				background-color: ;
			}

			.wp-night-mode-button.active .wp-night-mode-slider {
				background-color: ;
			}

			body.wp-night-mode-on * {
				background: #020202;
			}

			body.wp-night-mode-on .customize-partial-edit-shortcut button,
			body.wp-night-mode-on .customize-partial-edit-shortcut button svg,
			body.wp-night-mode-on #adminbarsearch,
			body.wp-night-mode-on span.display-name,
			body.wp-night-mode-on span.ab-icon,
			body.wp-night-mode-on span.ab-label {
			    background: transparent;
			}

			body.wp-night-mode-on * {
				color: #c1c1c1;
			}

			body.wp-night-mode-on a {
				color: #c1c1c1;
			}

			body.wp-night-mode-on a:hover,
			body.wp-night-mode-on a:visited,
			body.wp-night-mode-on a:active {
				color: #c1c1c1;
			}
		}				}</style><style>#wpcomm .wc_new_comment{background:#00B38F;}
                #wpcomm .wc_new_reply{background:#00B38F;}
                #wpcomm .wc-form-wrapper{ background:none; } /* ->formBGColor */
                #wpcomm .wpdiscuz-front-actions{background:#F9F9F9;}
                #wpcomm .wpdiscuz-subscribe-bar{background:#F9F9F9;}
                #wpcomm select,
                #wpcomm input[type="text"],
                #wpcomm input[type="email"],
                #wpcomm input[type="url"],
                #wpcomm input[type="date"],
                #wpcomm input[type="color"]{border:#D9D9D9 1px solid;}
                #wpcomm .wc-comment .wc-comment-right{background:#FEFEFE;}
                #wpcomm .wc-reply .wc-comment-right{background:#F8F8F8;}
                #wpcomm .wc-comment-right .wc-comment-text, 
                #wpcomm .wc-comment-right .wc-comment-text *{
                    font-size:16px;
                }
                #wpcomm .wc-blog-administrator > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-administrator > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-administrator > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-editor > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-editor > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-editor > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-author > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-author > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-author > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-contributor > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-contributor > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-contributor > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-subscriber > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-subscriber > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-subscriber > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_keymaster > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_keymaster > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_keymaster > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_spectator > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_spectator > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_spectator > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_blocked > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_blocked > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_blocked > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_moderator > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_moderator > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_moderator > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_participant > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_participant > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_participant > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-wpseo_manager > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-wpseo_manager > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-wpseo_manager > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-wpseo_editor > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-wpseo_editor > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-wpseo_editor > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-post_author > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-post_author > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-post_author > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-guest > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-guest > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-guest > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }                #wpcomm .wc-comment .wc-comment-left .wc-comment-label{ background: #ffffff;}
                #wpcomm .wc-comment-left .wc-follow-user{color:#00B38F;}
                #wpcomm .wc-load-more-submit{border:1px solid #D9D9D9;}
                #wpcomm .wc-new-loaded-comment > .wc-comment-right{background:#FFFAD6;}
                #wpcomm .wpdiscuz-subscribe-bar{color:#777;}
                #wpcomm .wpdiscuz-front-actions .wpdiscuz-sbs-wrap span{color: #777;}
                #wpcomm .page-numbers{color:#555;border:#555 1px solid;}
                #wpcomm span.current{background:#555;}
                #wpcomm .wpdiscuz-readmore{cursor:pointer;color:#00B38F;}
                #wpcomm .wpdiscuz-textarea-wrap{border:#D9D9D9 1px solid;} .wpd-custom-field .wcf-pasiv-star, #wpcomm .wpdiscuz-item .wpdiscuz-rating > label {color: #DDDDDD;}
                #wpcomm .wpdiscuz-item .wpdiscuz-rating:not(:checked) > label:hover,.wpdiscuz-rating:not(:checked) > label:hover ~ label {   }#wpcomm .wpdiscuz-item .wpdiscuz-rating > input ~ label:hover, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:not(:checked) ~ label:hover ~ label, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:not(:checked) ~ label:hover ~ label{color: #FFED85;} 
                #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked ~ label:hover, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked ~ label:hover, #wpcomm .wpdiscuz-item .wpdiscuz-rating > label:hover ~ input:checked ~ label, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked + label:hover ~ label, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked ~ label:hover ~ label, .wpd-custom-field .wcf-active-star, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked ~ label{ color:#FFD700;}
                #wpcomm .wc-comment-header{border-top: 1px solid #dedede;}
                #wpcomm .wc-reply .wc-comment-header{border-top: 1px solid #dedede;}
                /* Buttons */
                #wpcomm button, 
                #wpcomm input[type="button"], 
                #wpcomm input[type="reset"], 
                #wpcomm input[type="submit"]{ border: 1px solid #555555; color: #FFFFFF; background-color: #555555; }
                #wpcomm button:hover, 
                #wpcomm button:focus,
                #wpcomm input[type="button"]:hover, 
                #wpcomm input[type="button"]:focus, 
                #wpcomm input[type="reset"]:hover, 
                #wpcomm input[type="reset"]:focus, 
                #wpcomm input[type="submit"]:hover, 
                #wpcomm input[type="submit"]:focus{ border: 1px solid #333333; background-color: #333333;  }
                #wpcomm .wpdiscuz-sort-buttons{color:#777777;}
                #wpcomm .wpdiscuz-sort-button{color:#777777; cursor:pointer;}
                #wpcomm .wpdiscuz-sort-button:hover{color:#00B38F!important;cursor:pointer;}
                #wpcomm .wpdiscuz-sort-button-active{color:#00B38F!important;cursor:default!important;}
                #wpcomm .wc-cta-button, 
                #wpcomm .wc-cta-button-x{color:#777777; }
                #wpcomm .wc-vote-link.wc-up{color:#999999;}
                #wpcomm .wc-vote-link.wc-down{color:#999999;}
                #wpcomm .wc-vote-result{color:#999999;}
                #wpcomm .wpf-cta{color:#999999; }
                #wpcomm .wc-comment-link .wc-share-link .wpf-cta{color:#eeeeee;}
                #wpcomm .wc-footer-left .wc-reply-button{border:1px solid #00B38F!important; color: #00B38F;}
                #wpcomm .wpf-cta:hover{background:#00B38F!important; color:#FFFFFF;}
                #wpcomm .wc-footer-left .wc-reply-button.wc-cta-active, #wpcomm .wc-cta-active{background:#00B38F!important; color:#FFFFFF;}
                #wpcomm .wc-cta-button:hover{background:#00B38F!important; color:#FFFFFF;}
                #wpcomm .wc-footer-right .wc-toggle,
                #wpcomm .wc-footer-right .wc-toggle a,
                #wpcomm .wc-footer-right .wc-toggle i{color:#00B38F;}
                /* STICKY COMMENT HEADER */
                #wpcomm .wc-sticky-comment.wc-comment .wc-comment-header .wpd-sticky{background: #1ecea8; color: #ffffff; }
                #wpcomm .wc-closed-comment.wc-comment .wc-comment-header .wpd-closed{background: #aaaaaa; color: #ffffff;}
                /* PRIVATE COMMENT HEADER */
                #wpcomm .wc-private-comment.wc-comment .wc-comment-header .wpd-private{background: #999999; color: #ffffff;}
                /* FOLLOW LINK */

                #wpcomm .wc-follow{color:#777777;}
                #wpcomm .wc-follow-active{color:#ff7a00;}
                #wpcomm .wc-follow:hover i,
                #wpcomm .wc-unfollow:hover i,
                #wpcomm .wc-follow-active:hover i{color:#00B38F;}
                                .wpd-wrapper .wpd-list-item.wpd-active{border-top: 3px solid #00B38F;}
                                .comments-area{width:auto;}</style><meta name="google-site-verification" content="EV_Uq1MFIe3lcKLlf4xhcabIz-68zGeWx8pjwQH3pB8"><meta name="msvalidate.01" content="C71A4DAE3450D101003DA6DCE7D44ADE"> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/3094.js"></script><style type="text/css">#waldo-sticky-footer-wrapper {position: fixed; width: 100%; bottom: 0px; left: 0px; text-align: center; z-index: 9000;}#waldo-sticky-footer-wrapper > div {position: relative; display: inline-block}#waldo-sticky-footer-wrapper iframe, #waldo-sticky-footer-wrapper div {margin-left: auto;margin-right: auto;}.waldo-sticky-sidebar{position: fixed; top: 10px;z-index: 90}.waldo-sticky-css{position: sticky; top: 10px; z-index: 90}.waldo-overlay{position: fixed;height: 100%;width: 100%;top: 0;left: 0;z-index: 105;background: rgba(0,0,0,0.7);}#waldo-counter {position: absolute;bottom: 0;right: 0;color: #fff;font-size: 30px;padding: 15px;}.waldo-bfleft {position: fixed; left: 0; top: 10px;z-index:101;}.waldo-bfright {position: fixed; right: 0; top: 10px;z-index:101;}#waldo-tag-6038 {clear: both !important;}div[class^="app_gdpr-"] a {color: #41afbb !important; text-decoration: underline !important}#waldo-close-button {position: absolute; right: 0;top: -24px;}#waldo-close-button a {border: 1px solid rgba(0,0,0,.35);padding: 3px;font-size: 12px;color: #fff;font-weight: bold;background-color: #777;}</style><link rel="icon" href="https://howtodoinjava.com/wp-content/uploads/2015/05/howtodoinjava_logo-55696c1cv1_site_icon-32x32.png" sizes="32x32"><link rel="icon" href="https://howtodoinjava.com/wp-content/uploads/2015/05/howtodoinjava_logo-55696c1cv1_site_icon-256x256.png" sizes="192x192"><link rel="apple-touch-icon-precomposed" href="https://howtodoinjava.com/wp-content/uploads/2015/05/howtodoinjava_logo-55696c1cv1_site_icon-256x256.png"><meta name="msapplication-TileImage" content="https://howtodoinjava.com/wp-content/uploads/2015/05/howtodoinjava_logo-55696c1cv1_site_icon.png"><link rel="stylesheet" type="text/css" href="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/shCore.css"><link rel="stylesheet" type="text/css" href="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/shThemeDefault.css"><link rel="preload" href="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/f(1).txt" as="script"><script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/f(1).txt"></script><link rel="preload" href="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/f(2).txt" as="script"><script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/f(2).txt"></script><script src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/pubads_impl_2020013001.js" async=""></script><script src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/cse_element__en.js" type="text/javascript"></script><link type="text/css" rel="stylesheet" href="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/default+en.css"><link type="text/css" rel="stylesheet" href="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/default.css"><style type="text/css">.gsc-control-cse{font-family:verdana, arial, sans-serif}.gsc-control-cse .gsc-table-result{font-family:verdana, arial, sans-serif}.gsc-refinementsGradient{background:linear-gradient(to left,rgba(255,255,255,1),rgba(255,255,255,0))}.gsc-control-cse{border-color:#FFFFFF;background-color:#FFFFFF}input.gsc-input,.gsc-input-box,.gsc-input-box-hover,.gsc-input-box-focus{border-color:#F9F9F9}.gsc-search-button-v2,.gsc-search-button-v2:hover,.gsc-search-button-v2:focus{border-color:#5890FF;background-color:#5890FF;background-image:none;filter:none}.gsc-search-button-v2 svg{fill:#FFFFFF}.gsc-tabHeader.gsc-tabhActive,.gsc-refinementHeader.gsc-refinementhActive{color:#CCCCCC;border-color:#CCCCCC;background-color:#FFFFFF}.gsc-tabHeader.gsc-tabhInactive,.gsc-refinementHeader.gsc-refinementhInactive{color:#CCCCCC;border-color:#CCCCCC;background-color:#FFFFFF}.gsc-webResult.gsc-result,.gsc-results .gsc-imageResult{border-color:#FFFFFF;background-color:#FFFFFF}.gsc-webResult.gsc-result:hover,.gsc-imageResult:hover{border-color:#FFFFFF;background-color:#FFFFFF}.gs-webResult.gs-result a.gs-title:link,.gs-webResult.gs-result a.gs-title:link b,.gs-imageResult a.gs-title:link,.gs-imageResult a.gs-title:link b{color:#3367D6}.gs-webResult.gs-result a.gs-title:visited,.gs-webResult.gs-result a.gs-title:visited b,.gs-imageResult a.gs-title:visited,.gs-imageResult a.gs-title:visited b{color:#3367D6}.gs-webResult.gs-result a.gs-title:hover,.gs-webResult.gs-result a.gs-title:hover b,.gs-imageResult a.gs-title:hover,.gs-imageResult a.gs-title:hover b{color:#0000CC}.gs-webResult.gs-result a.gs-title:active,.gs-webResult.gs-result a.gs-title:active b,.gs-imageResult a.gs-title:active,.gs-imageResult a.gs-title:active b{color:#3367D6}.gsc-cursor-page{color:#3367D6}a.gsc-trailing-more-results:link{color:#3367D6}.gs-webResult .gs-snippet,.gs-imageResult .gs-snippet,.gs-fileFormatType{color:#000000}.gs-webResult div.gs-visibleUrl,.gs-imageResult div.gs-visibleUrl{color:#999999}.gs-webResult div.gs-visibleUrl-short{color:#999999}.gs-webResult div.gs-visibleUrl-short{display:none}.gs-webResult div.gs-visibleUrl-long{display:block}.gs-promotion div.gs-visibleUrl-short{display:none}.gs-promotion div.gs-visibleUrl-long{display:block}.gsc-cursor-box{border-color:#FFFFFF}.gsc-results .gsc-cursor-box .gsc-cursor-page{border-color:#CCCCCC;background-color:#FFFFFF;color:#CCCCCC}.gsc-results .gsc-cursor-box .gsc-cursor-current-page{border-color:#CCCCCC;background-color:#FFFFFF;color:#CCCCCC}.gsc-webResult.gsc-result.gsc-promotion{border-color:#F3F3F3;background-color:#F3F3F3}.gsc-completion-title{color:#3367D6}.gsc-completion-snippet{color:#000000}.gs-promotion a.gs-title:link,.gs-promotion a.gs-title:link *,.gs-promotion .gs-snippet a:link{color:#3367D6}.gs-promotion a.gs-title:visited,.gs-promotion a.gs-title:visited *,.gs-promotion .gs-snippet a:visited{color:#3367D6}.gs-promotion a.gs-title:hover,.gs-promotion a.gs-title:hover *,.gs-promotion .gs-snippet a:hover{color:#0000CC}.gs-promotion a.gs-title:active,.gs-promotion a.gs-title:active *,.gs-promotion .gs-snippet a:active{color:#3367D6}.gs-promotion .gs-snippet,.gs-promotion .gs-title .gs-promotion-title-right,.gs-promotion .gs-title .gs-promotion-title-right *{color:#000000}.gs-promotion .gs-visibleUrl,.gs-promotion .gs-visibleUrl-short{color:#999999}.gcsc-find-more-on-google{color:#3367D6}.gcsc-find-more-on-google-magnifier{fill:#3367D6}</style><style>[data-ad-unit="LEFT_RAIL_DYNAMIC"]{display:none !important}</style><style>[data-ad-unit="LEFT_RAIL"]{display:none !important}</style></head><body data-rsssl="1" class="post-template-default single single-post postid-4421 single-format-standard custom-header header-full-width sidebar-content-sidebar genesis-breadcrumbs-hidden genesis-footer-widgets-visible wpdiscuz_5.3.5"><div class="site-container"><header class="site-header"><div class="wrap"><div class="title-area"><p class="site-title"><a href="https://howtodoinjava.com/" title="HowToDoInJava">HowToDoInJava</a></p></div><nav class="nav-primary" aria-label="Main"><div class="wrap"><div class="responsive-menu-icon"></div><ul id="menu-category-menu" class="menu genesis-nav-menu menu-primary responsive-menu"><li id="menu-item-8094" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8094"><a href="https://howtodoinjava.com/java-8-tutorial/"><span>Java 8</span></a></li><li id="menu-item-11160" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11160"><a href="https://howtodoinjava.com/java-regular-expression-tutorials/"><span>Regex</span></a></li><li id="menu-item-11159" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11159"><a href="https://howtodoinjava.com/java-concurrency-tutorial/"><span>Concurrency</span></a></li><li id="menu-item-11158" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11158"><a href="https://howtodoinjava.com/java-best-practices/"><span>Best Practices</span></a></li><li id="menu-item-10224" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10224"><a href="https://howtodoinjava.com/spring-boot-tutorials/"><span>Spring Boot</span></a></li><li id="menu-item-11161" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11161"><a href="https://howtodoinjava.com/junit-5-tutorial/"><span>JUnit5</span></a></li><li id="menu-item-3631" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3631"><a title="Java Interview Questions" rel="ipt-icon-bubbles2" href="https://howtodoinjava.com/java-interview-questions/"><span>Interview Questions</span></a></li><li id="menu-item-13046" class="wp-night-mode menu-item menu-item-type-custom menu-item-object-custom menu-item-13046"><div class="wpnm-button style-2">
                            <div class="wpnm-button-inner-left"></div>
                            <div class="wpnm-button-inner"></div>
                        </div></li></ul></div></nav></div></header><div class="site-inner"><div class="wrap"><div class="content-sidebar-wrap"><main class="content"><article class="post-4421 post type-post status-publish format-standard has-post-thumbnail category-multi-threading tag-java-concurrency entry"><header class="entry-header"><h1 class="entry-title">How to work with wait(), notify() and notifyAll() in Java?</h1><p class="entry-meta">By <span class="entry-author"><span class="entry-author-name">Lokesh Gupta</span></span> | <span class="entry-categories">Filed Under: <a href="https://howtodoinjava.com/java/multi-threading/" rel="category tag">Java Concurrency</a></span></p></header><div class="entry-content"><p><strong><a href="https://howtodoinjava.com/java-concurrency-tutorial/" title="multithreading in java">Java concurrency</a></strong> is pretty complex topic and requires a lot of attention while writing application code dealing with multiple threads accessing one/more shared resources at any given time. Java 5, introduced some classes like <strong><a href="https://howtodoinjava.com/java/multi-threading/how-to-use-blockingqueue-and-threadpoolexecutor-in-java/" title="How to use BlockingQueue and ThreadPoolExecutor in java">BlockingQueue</a></strong> and <strong>Executors</strong> which take away some of the complexity by providing easy to use APIs.</p><p>Programmers using concurrency classes will feel a lot more confident than programmers directly handling synchronization stuff using <strong>wait()</strong>, <strong>notify()</strong> and <strong>notifyAll()</strong> method calls. I will also recommend to use these newer APIs over synchronization yourself, BUT many times we are required to do so for various reasons e.g. maintaining legacy code. A good knowledge around these methods will help you in such situation when arrived.</p><style>.beloposttitle300250 { text-align: center; margin-top: 20px; margin-bottom: 20px;} @media (min-width:960px) { .beloposttitle300250 { display: none !important; } }</style><div class="beloposttitle300250"><div id="waldo-tag-3937" data-processed="true"><div id="google_ads_iframe_/124067137/howtodoinjava300x250FX_2_0__container__" style="border: 0pt none; width: 300px; height: 250px;"></div></div></div><p>In this tutorial, I am discussing the <strong>purpose of wait() notify() notifyall() in Java</strong>. We will understand the <strong>difference between wait and notify</strong>.</p><blockquote><p>Read more : <a href="https://howtodoinjava.com/java/multi-threading/difference-between-sleep-and-wait/">Difference between wait() and sleep() in Java</a></p></blockquote><h2>1. What are wait(), notify() and notifyAll() methods?</h2><p>The <code>Object</code> class in Java has three final methods that allow threads to communicate about the locked status of a resource.</p><ol><li><h4>wait()</h4><p>It tells the calling thread to give up the lock and go to sleep until some other thread enters the same monitor and calls <code>notify()</code>. The <code>wait()</code> method releases the lock prior to waiting and reacquires the lock prior to returning from the <code>wait()</code> method. The <code>wait()</code> method is actually tightly integrated with the synchronization lock, using a feature not available directly from the synchronization mechanism.</p><style>.beloposttitle300250 { text-align: center; margin-top: 20px; margin-bottom: 20px;} @media (min-width:960px) { .beloposttitle300250 { display: none !important; } }</style><div class="beloposttitle300250"><div id="waldo-tag-3939" data-processed="true"><div id="google_ads_iframe_/124067137/howtodoinjava300x250FX_3_0__container__" style="border: 0pt none; width: 300px; height: 250px;"></div></div></div><p>In other words, it is not possible for us to implement the <code>wait()</code> method purely in Java. It is a <strong>native method</strong>.</p><p>General syntax for calling <code>wait()</code> method is like this:</p><div><div id="highlighter_813365" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><caption>wait() method syntax</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">synchronized</code><code class="java plain">( lockObject )</code></div><div class="line number2 index1 alt1"><code class="java plain">{ </code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code><code class="java plain">( ! condition )</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{ </code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">lockObject.wait();</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//take the action here;</code></div><div class="line number9 index8 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></li><li><h4>notify()</h4><p>It wakes up one single thread that called <code>wait()</code> on the same object. It should be noted that calling <code>notify()</code> does not actually give up a lock on a resource. It tells a waiting thread that that thread can wake up. However, the lock is not actually given up until the notifier’s synchronized block has completed.</p><p>So, if a notifier calls <code>notify()</code> on a resource but the notifier still needs to perform 10 seconds of actions on the resource within its synchronized block, the thread that had been waiting will need to wait at least another additional 10 seconds for the notifier to release the lock on the object, even though <code>notify()</code> had been called.</p><p>General syntax for calling <code>notify()</code> method is like this:</p><div><div id="highlighter_844034" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><caption>notify() method syntax</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">synchronized</code><code class="java plain">(lockObject) </code></div><div class="line number2 index1 alt1"><code class="java plain">{</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//establish_the_condition;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">lockObject.notify();</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java comments">//any additional code if needed</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></li><li><h4>notifyAll()</h4><p>It wakes up all the threads that called <code>wait()</code> on the same object. The highest priority thread will run first in most of the situation, though not guaranteed. Other things are same as <code>notify()</code> method above.</p><p>General syntax for calling <code>notify()</code> method is like this:</p><div><div id="highlighter_574462" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><caption>notifyAll() method syntax</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">synchronized</code><code class="java plain">(lockObject) </code></div><div class="line number2 index1 alt1"><code class="java plain">{</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">establish_the_condition;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">lockObject.notifyAll();</code></div><div class="line number6 index5 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div></li></ol><div class="noticeboxesde bluenoticebox">In general, a thread that uses the <code>wait()</code> method confirms that a condition does not exist (typically by checking a variable) and then calls the <code>wait()</code> method. When another thread establishes the condition (typically by setting the same variable), it calls the <code>notify()</code> method. The wait-and-notify mechanism does not specify what the specific condition/ variable value is. It is on developer’s hand to specify the condition to be checked before calling <code>wait()</code> or <code>notify()</code>.</div><p>Let’s write a small program to understand <strong>how wait(), notify(), notifyall() methods should be used</strong> to get desired results.</p><h2>2. How to use with wait(), notify() and notifyAll() methods</h2><p>In this exercise, we will solve <strong>producer consumer problem</strong> using <code>wait()</code> and <code>notify()</code> methods. To keep program simple and to keep focus on usage of <code>wait()</code> and <code>notify()</code> methods, we will involve only one producer and one consumer thread.</p><p>Other features of the program are :</p><ul><li>Producer thread produce a new resource in every 1 second and put it in ‘taskQueue’.</li><li>Consumer thread takes 1 seconds to process consumed resource from ‘taskQueue’.</li><li>Max capacity of taskQueue is 5 i.e. maximum 5 resources can exist inside ‘taskQueue’ at any given time.</li><li>Both threads run infinitely.</li></ul><h4>2.1. Producer Thread</h4><p>Below is the code for producer thread based on our requirements :</p><div><div id="highlighter_561433" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><caption>Producer.java</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">Producer </code><code class="java keyword">implements</code> <code class="java plain">Runnable</code></div><div class="line number2 index1 alt1"><code class="java plain">{</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">List&lt;Integer&gt; taskQueue;</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java keyword">int</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <code class="java plain">MAX_CAPACITY;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Producer(List&lt;Integer&gt; sharedQueue, </code><code class="java keyword">int</code> <code class="java plain">size)</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.taskQueue = sharedQueue;</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.MAX_CAPACITY = size;</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run()</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">counter = </code><code class="java value">0</code><code class="java plain">;</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code> <code class="java plain">(</code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">produce(counter++);</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">catch</code> <code class="java plain">(InterruptedException ex)</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ex.printStackTrace();</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">void</code> <code class="java plain">produce(</code><code class="java keyword">int</code> <code class="java plain">i) </code><code class="java keyword">throws</code> <code class="java plain">InterruptedException</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(taskQueue)</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code> <code class="java plain">(taskQueue.size() == MAX_CAPACITY)</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Queue is full "</code> <code class="java plain">+ Thread.currentThread().getName() + </code><code class="java string">" is waiting , size: "</code> <code class="java plain">+ taskQueue.size());</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">taskQueue.wait();</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread.sleep(</code><code class="java value">1000</code><code class="java plain">);</code></div><div class="line number40 index39 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">taskQueue.add(i);</code></div><div class="line number41 index40 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Produced: "</code> <code class="java plain">+ i);</code></div><div class="line number42 index41 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">taskQueue.notifyAll();</code></div><div class="line number43 index42 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number44 index43 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number45 index44 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><ul><li>Here “<code>produce(counter++)</code>” code has been written inside infinite loop so that producer keeps producing elements at regular interval.</li><li>We have written the <code>produce()</code> method code following the general guideline to write <code>wait()</code> method as mentioned in first section.</li><li>Once the <code>wait()</code> is over, producer add an element in taskQueue and called <code>notifyAll()</code> method. Because the last-time <code>wait()</code> method was called by consumer thread (that’s why producer is out of waiting state), consumer gets the notification.</li><li>Consumer thread after getting notification, if ready to consume the element as per written logic.</li><li>Note that both threads use <code>sleep()</code> methods as well for simulating time delays in creating and consuming elements.</li></ul><h4>2.2. Consumer Thread</h4><p>Below is the code for consumer thread based on our requirements :</p><div><div id="highlighter_919614" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><caption>Consumer.java</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">Consumer </code><code class="java keyword">implements</code> <code class="java plain">Runnable</code></div><div class="line number2 index1 alt1"><code class="java plain">{</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">final</code> <code class="java plain">List&lt;Integer&gt; taskQueue;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">Consumer(List&lt;Integer&gt; sharedQueue)</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.taskQueue = sharedQueue;</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Override</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run()</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code> <code class="java plain">(</code><code class="java keyword">true</code><code class="java plain">)</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">consume();</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(InterruptedException ex)</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ex.printStackTrace();</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">void</code> <code class="java plain">consume() </code><code class="java keyword">throws</code> <code class="java plain">InterruptedException</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(taskQueue)</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code> <code class="java plain">(taskQueue.isEmpty())</code></div><div class="line number30 index29 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number31 index30 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Queue is empty "</code> <code class="java plain">+ Thread.currentThread().getName() + </code><code class="java string">" is waiting , size: "</code> <code class="java plain">+ taskQueue.size());</code></div><div class="line number32 index31 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">taskQueue.wait();</code></div><div class="line number33 index32 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number34 index33 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread.sleep(</code><code class="java value">1000</code><code class="java plain">);</code></div><div class="line number35 index34 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">i = (Integer) taskQueue.remove(</code><code class="java value">0</code><code class="java plain">);</code></div><div class="line number36 index35 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Consumed: "</code> <code class="java plain">+ i);</code></div><div class="line number37 index36 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">taskQueue.notifyAll();</code></div><div class="line number38 index37 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number39 index38 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number40 index39 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><ul><li>Here “<code>consume()</code>” code has been written inside infinite loop so that consumer keeps consuming elements whenever it finds something in taskQueue.</li><li>Once the <code>wait()</code> is over, consumer removes an element in taskQueue and called <code>notifyAll()</code> method. Because the last-time wait() method was called by producer thread (that’s why producer is in waiting state), producer gets the notification.</li><li>Producer thread after getting notification, if ready to produce the element as per written logic.</li></ul><h4>2.3. Test producer consumer example</h4><p>Now lets test producer and consumer threads.</p><div><div id="highlighter_194235" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><caption>ProducerConsumerExampleWithWaitAndNotify.java</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ProducerConsumerExampleWithWaitAndNotify</code></div><div class="line number2 index1 alt1"><code class="java plain">{</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args)</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">List&lt;Integer&gt; taskQueue = </code><code class="java keyword">new</code> <code class="java plain">ArrayList&lt;Integer&gt;();</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">MAX_CAPACITY = </code><code class="java value">5</code><code class="java plain">;</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread tProducer = </code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">new</code> <code class="java plain">Producer(taskQueue, MAX_CAPACITY), </code><code class="java string">"Producer"</code><code class="java plain">);</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread tConsumer = </code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">new</code> <code class="java plain">Consumer(taskQueue), </code><code class="java string">"Consumer"</code><code class="java plain">);</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">tProducer.start();</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">tConsumer.start();</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number12 index11 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p>Program Output.</p><div><div id="highlighter_833902" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><caption>Console</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Produced: </code><code class="java value">0</code></div><div class="line number2 index1 alt1"><code class="java plain">Consumed: </code><code class="java value">0</code></div><div class="line number3 index2 alt2"><code class="java plain">Queue is empty Consumer is waiting , size: </code><code class="java value">0</code></div><div class="line number4 index3 alt1"><code class="java plain">Produced: </code><code class="java value">1</code></div><div class="line number5 index4 alt2"><code class="java plain">Produced: </code><code class="java value">2</code></div><div class="line number6 index5 alt1"><code class="java plain">Consumed: </code><code class="java value">1</code></div><div class="line number7 index6 alt2"><code class="java plain">Consumed: </code><code class="java value">2</code></div><div class="line number8 index7 alt1"><code class="java plain">Queue is empty Consumer is waiting , size: </code><code class="java value">0</code></div><div class="line number9 index8 alt2"><code class="java plain">Produced: </code><code class="java value">3</code></div><div class="line number10 index9 alt1"><code class="java plain">Produced: </code><code class="java value">4</code></div><div class="line number11 index10 alt2"><code class="java plain">Consumed: </code><code class="java value">3</code></div><div class="line number12 index11 alt1"><code class="java plain">Produced: </code><code class="java value">5</code></div><div class="line number13 index12 alt2"><code class="java plain">Consumed: </code><code class="java value">4</code></div><div class="line number14 index13 alt1"><code class="java plain">Produced: </code><code class="java value">6</code></div><div class="line number15 index14 alt2"><code class="java plain">Consumed: </code><code class="java value">5</code></div><div class="line number16 index15 alt1"><code class="java plain">Consumed: </code><code class="java value">6</code></div><div class="line number17 index16 alt2"><code class="java plain">Queue is empty Consumer is waiting , size: </code><code class="java value">0</code></div><div class="line number18 index17 alt1"><code class="java plain">Produced: </code><code class="java value">7</code></div><div class="line number19 index18 alt2"><code class="java plain">Consumed: </code><code class="java value">7</code></div><div class="line number20 index19 alt1"><code class="java plain">Queue is empty Consumer is waiting , size: </code><code class="java value">0</code></div></div></td></tr></tbody></table></div></div><p>I will suggest you to change the time taken by producer and consumer threads to different times, and check the different outputs in different scenario.</p><h2>3. Interview questions on wait(), notify() and notifyAll() methods</h2><h4>3.1. What happens when notify() is called and no thread is waiting?</h4><p>In general practice, this will not be the case in most scenarios if these methods are used correctly. Though if the <code>notify()</code> method is called when no other thread is waiting, <code>notify()</code> simply returns and the notification is lost.</p><p>Since the <em>wait-and-notify mechanism</em> does not know the condition about which it is sending notification, it assumes that a notification goes unheard if no thread is waiting.  A thread that later executes the <strong>wait()</strong> method has to wait for another notification to occur.</p><h4>3.2. Can there be a race condition during the period that the wait() method releases OR reacquires the lock?</h4><p>The <code>wait()</code> method is tightly integrated with the lock mechanism. The object lock is not actually freed until the waiting thread is already in a state in which it can receive notifications. It means only when thread state is changed such that it is able to receive notifications, lock is held. The system prevents any race conditions from occurring in this mechanism.</p><p>Similarly, system ensures that lock should be held by object completely before moving the thread out of waiting state.</p><h4>3.3. If a thread receives a notification, is it guaranteed that the condition is set correctly?</h4><p>Simply, no. Prior to calling the <code>wait()</code> method, a thread should always test the condition while holding the synchronization lock. Upon returning from the <code>wait()</code> method, the thread should always retest the condition to determine if it should wait again. This is because another thread can also test the condition and determine that a wait is not necessary — processing the valid data that was set by the notification thread.</p><p>This is a common case when multiple threads are involved in the notifications. More particularly, the threads that are processing the data can be thought of as consumers; they consume the data produced by other threads. There is no guarantee that when a consumer receives a notification that it has not been processed by another consumer.</p><p>As such, when a consumer wakes up, it cannot assume that the state it was waiting for is still valid. It may have been valid in the past, but the state may have been changed after the <code>notify()</code> method was called and before the consumer thread woke up. Waiting threads must provide the option to check the state and to return back to a waiting state in case the notification has already been handled. This is why we always put calls to the wait() method in a loop.</p><h4>3.4. What happens when more than one thread is waiting for notification? Which threads actually get the notification when the notify() method is called?</h4><p>It depends on many factors.Java specification doesn’t define which thread gets notified. In runtime, which thread actually receives the notification varies based on several factors, including the implementation of the Java virtual machine and scheduling and timing issues during the execution of the program.</p><p>There is no way to determine, even on a single processor platform, which of multiple threads receives the notification.</p><p>Just like the <code>notify()</code> method, the <code>notifyAll()</code> method does not allow us to decide which thread gets the notification: they all get notified. When all the threads receive the notification, it is possible to work out a mechanism for the threads to choose among themselves which thread should continue and which thread(s) should call the <code>wait()</code> method again.</p><h4>3.5. Does the notifyAll() method really wake up all the threads?</h4><p>Yes and no. All of the waiting threads wake up, but they still have to reacquire the object lock. So the threads do not run in parallel: they must each wait for the object lock to be freed. Thus, only one thread can run at a time, and only after the thread that called the notifyAll() method releases its lock.</p><h4>3.6. Why would you want to wake up all of the threads if only one is going to execute at all?</h4><p>There are a few reasons. For example, there might be more than one condition to wait for. Since we cannot control which thread gets the notification, it is entirely possible that a notification wakes up a thread that is waiting for an entirely different condition.</p><p>By waking up all the threads, we can design the program so that the threads decide among themselves which thread should execute next. Another option could be when producers generate data that can satisfy more than one consumer. Since it may be difficult to determine how many consumers can be satisfied with the notification, an option is to notify them all, allowing the consumers to sort it out among themselves.</p><p>Happy Learning !!</p><div class="bottomAdesense"><div id="waldo-tag-7253" data-processed="true"><div id="google_ads_iframe_/124067137/howtodoinjava300x250FX_4_0__container__" style="border: 0pt none; width: 300px; height: 250px;"></div></div></div><div class="scriptlesssocialsharing"><div class="scriptlesssocialsharing-buttons"><a class="button twitter" target="_blank" href="https://twitter.com/intent/tweet?text=How%20to%20work%20with%20wait%28%29%2C%20notify%28%29%20and%20notifyAll%28%29%20in%20Java%3F&amp;url=https%3A%2F%2Fhowtodoinjava.com%2Fjava%2Fmulti-threading%2Fwait-notify-and-notifyall-methods%2F&amp;via=howtodoinjava&amp;related=howtodoinjava" rel="noopener noreferrer nofollow"><span class="sss-name">Twitter</span></a><a class="button facebook" target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fhowtodoinjava.com%2Fjava%2Fmulti-threading%2Fwait-notify-and-notifyall-methods%2F" rel="noopener noreferrer nofollow"><span class="sss-name">Facebook</span></a><a class="button linkedin" target="_blank" href="https://www.linkedin.com/shareArticle?mini=1&amp;url=https%3A%2F%2Fhowtodoinjava.com%2Fjava%2Fmulti-threading%2Fwait-notify-and-notifyall-methods%2F&amp;title=How%20to%20work%20with%20wait%28%29%2C%20notify%28%29%20and%20notifyAll%28%29%20in%20Java%3F&amp;source=https%3A%2F%2Fhowtodoinjava.com&amp;summary=The%20Object%20class%20in%20Java%20has%20three%20final%20methods%20that%20allow%20threads%20to%20communicate%20i.e.%20wait%28%29%2C%20notify%28%29%20and%20notifyAll%28%29.%20Learn%20how%20to%20use%20these%20methods." rel="noopener noreferrer nofollow"><span class="sss-name">Linkedin</span></a><a class="button reddit" target="_blank" href="https://www.reddit.com/submit?url=https%3A%2F%2Fhowtodoinjava.com%2Fjava%2Fmulti-threading%2Fwait-notify-and-notifyall-methods%2F" rel="noopener noreferrer nofollow"><span class="sss-name">Reddit</span></a><a class="button pocket" target="_blank" href="https://getpocket.com/save?url=https%3A%2F%2Fhowtodoinjava.com%2Fjava%2Fmulti-threading%2Fwait-notify-and-notifyall-methods%2F&amp;title=How%20to%20work%20with%20wait%28%29%2C%20notify%28%29%20and%20notifyAll%28%29%20in%20Java%3F" rel="noopener noreferrer nofollow"><span class="sss-name">Pocket</span></a></div></div></div><footer class="entry-footer"></footer></article><section class="author-box"><h4 class="author-box-title">About <span itemprop="name">Lokesh Gupta</span></h4><div class="author-box-content" itemprop="description"><p>A family guy with fun loving nature. Love computers, programming and solving everyday problems.  Find me on <a href="https://facebook.com/howtodoinjava" rel="external">Facebook</a> and <a href="https://twitter.com/howtodoinjava" rel="external">Twitter</a>.</p></div></section><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width: 0;height: 0;clear: both;margin: 0;padding: 0;"></div><h3 id="wc-comment-header"><div class="wpdiscuz-comment-count"><div class="wpd-cc-value">37</div><div class="wpd-cc-arrow"></div></div>
Leave a Reply</h3><div id="wpcomm" class="wpdiscuz_unauth wpd-default wpdiscuz_no_avatar"><div class="wpdiscuz-form-top-bar"><div class="wpdiscuz-ftb-left"><div id="wc_show_hide_loggedin_username"></div></div><div class="wpd-clear"></div></div><div class="wc_social_plugin_wrapper"></div><div class="wc-form-wrapper wc-main-form-wrapper" id="wc-main-form-wrapper-0_0"><div class="wpdiscuz-comment-message" style="display: block;"></div><form class="wc_comm_form wc_main_comm_form" method="post" enctype="multipart/form-data"><div class="wc-field-comment"><div class="wpdiscuz-item wc-field-textarea" style="margin-left: 0;"><div class="wpdiscuz-textarea-wrap "><textarea id="wc-textarea-0_0" placeholder="Join the discussion..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div></div><div class="clearfix"></div></div><div class="wc-form-footer" style="display: none;"><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div>
<input value="" required="required" class="wc_name wpd-field" type="text" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}" title=""></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div>
<input value="" required="required" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*"></div><div class="wpdiscuz-item wc_website-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-link"></i></div>
<input value="" class="wc_website wpd-field" type="text" name="wc_website" placeholder="Website"></div></div><div class="wpd-form-col-right"><div class="wc-field-captcha wpdiscuz-item wc_captcha-wrapper"><div class="wc-bin-captcha">
<i class="fas fa-shield-alt"></i>This comment form is under antispam protection</div></div><div class="wc-field-submit">
<label class="wpd_label" title="Notify of new replies to this comment">
<input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type">
<span class="wpd_label__text">
<span class="wpd_label__check">
<i class="fas fa-bell wpdicon wpdicon-on"></i>
<i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
</span>
</span>
</label>
<input class="wc_comm_submit wc_not_clicked button alt" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><div class="clearfix"></div>
<input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form><div class="wpdiscuz-form-bottom-bar"><div class="wpdiscuz-fbb-left"><div class="wpdiscuz-stat wpd-stat-threads wpd-tooltip-left">
<i class="fas fa-align-left fa-rotate-180" data-fa-transform="rotate-180"></i><span class="wpd-stat-threads-count">18</span>
<wpdtip>Comment threads</wpdtip></div><div class="wpdiscuz-stat wpd-stat-replies wpd-tooltip-left">
<i class="far fa-comments"></i><span class="wpd-stat-replies-count">19</span>
<wpdtip>Thread replies</wpdtip></div><div class="wpdiscuz-stat wpd-stat-subscribers wpd-tooltip-left">
<i class="fas fa-rss"></i><span>0</span>
<wpdtip>Followers</wpdtip></div>&nbsp;<div class="wpdiscuz-stat wpd-stat-reacted wpd-tooltip">
<i class="fas fa-bolt"></i>
<wpdtip>Most reacted comment</wpdtip></div><div class="wpdiscuz-stat wpd-stat-hot wpd-tooltip">
<i class="fab fa-hotjar"></i>
<wpdtip>Hottest comment thread</wpdtip></div></div><div class="wpdiscuz-fbb-right"><div class="wpdiscuz-stat wpd-stat-users wpd-tooltip">
<i class="fas fa-user-circle"></i> <span class="wpd-stat-authors-count">22</span>
<wpdtip>Comment authors</wpdtip></div></div><div class="wpd-clear"></div></div></div><div id="wpdiscuz_hidden_secondary_form" style="display: none;"><div class="wc-form-wrapper wc-secondary-form-wrapper" id="wc-secondary-form-wrapper-wpdiscuzuniqueid" style="display: none;"><div class="wpdiscuz-comment-message" style="display: block;"></div><div class="wc-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wc_comm_form wc-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wc-field-comment"><div class="wpdiscuz-item wc-field-textarea" style="margin-left: 0;"><div class="wpdiscuz-textarea-wrap "><textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Join the discussion..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div></div><div class="clearfix"></div></div><div class="wc-form-footer" style="display: none;"><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div>
<input value="" required="required" class="wc_name wpd-field" type="text" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}" title=""></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div>
<input value="" required="required" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*"></div><div class="wpdiscuz-item wc_website-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-link"></i></div>
<input value="" class="wc_website wpd-field" type="text" name="wc_website" placeholder="Website"></div></div><div class="wpd-form-col-right"><div class="wc-field-captcha wpdiscuz-item wc_captcha-wrapper"><div class="wc-bin-captcha">
<i class="fas fa-shield-alt"></i>This comment form is under antispam protection</div></div><div class="wc-field-submit">
<label class="wpd_label" title="Notify of new replies to this comment">
<input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type">
<span class="wpd_label__text">
<span class="wpd_label__check">
<i class="fas fa-bell wpdicon wpdicon-on"></i>
<i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
</span>
</span>
</label>
<input class="wc_comm_submit wc_not_clicked button alt" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><div class="clearfix"></div>
<input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div><div class="wpdiscuz-front-actions"><div class="wpdiscuz-sbs-wrap">
<span><i class="far fa-envelope" aria-hidden="true"></i>&nbsp; Subscribe &nbsp;<i class="fas fa-caret-down" aria-hidden="true"></i></span></div><div class="wpdiscuz-sort-buttons" style="font-size:14px; color: #777;">
<i class="fas fa-caret-up" aria-hidden="true"></i>
<span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active">newest</span> <i class="fas fa-caret-up" aria-hidden="true"></i>
<span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc ">oldest</span>
<i class="fas fa-caret-up" aria-hidden="true"></i> <span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up ">most voted</span></div><div class="clearfix"></div></div><div class="wpdiscuz-subscribe-bar wpdiscuz-hidden"><form action="https://howtodoinjava.com/wp-admin/admin-ajax.php?action=addSubscription" method="post" id="wpdiscuz-subscribe-form"><div class="wpdiscuz-subscribe-form-intro">Notify of</div><div class="wpdiscuz-subscribe-form-option" style="width:40%;">
<select class="wpdiscuz_select" name="wpdiscuzSubscriptionType"><option value="post">new follow-up comments</option><option value="all_comment">new replies to my comments</option>
</select></div><div class="wpdiscuz-item wpdiscuz-subscribe-form-email">
<input class="email" type="email" name="wpdiscuzSubscriptionEmail" required="required" value="" placeholder="Email"></div><div class="wpdiscuz-subscribe-form-button">
<input id="wpdiscuz_subscription_button" type="submit" value="›" name="wpdiscuz_subscription_button"></div>
<input type="hidden" id="wpdiscuz_subscribe_form_nonce" name="wpdiscuz_subscribe_form_nonce" value="b94ae6c7ee"><input type="hidden" name="_wp_http_referer" value="/java/multi-threading/wait-notify-and-notifyall-methods/">                                                                <input type="hidden" value="4421" name="wpdiscuzSubscriptionPostId"></form><div class="wpdiscuz_clear"></div></div><div id="wcThreadWrapper" class="wc-thread-wrapper"><div id="wc-comm-28966_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-28966" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Gene</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-28966" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hi Lokesh, How to terminate all those threads, after, let’s say, all 30 items where “produced” and “consumed”? Thank you.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>1 year ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-28966_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-23969_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-23969" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">neetu</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-23969" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Wonderful content and beautifully explained. thanks…</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>2 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-23969_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-23316_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-23316" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">mimi</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-23316" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Threads are objects so they have lock like other objects. When we use wait() and notify() in synchronized methods, which lock do we release? Thread’s or the object sources which thread use?</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>2 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-23316_0" class="wpdiscuz_clear"></div><div id="wc-comm-31788_23316" class="wc-comment wc-reply wc-blog-guest wc_comment_level-2"><div id="comment-31788" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Ashutosh Chaurasia</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-31788" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>@mimi, calling wait and notify release object’s lock. Thread don’t have lock associated with it, object’s have lock with it that’s why we call wait(), notify() method on object reference and not thread reference.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>1 year ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-31788_23316" class="wpdiscuz_clear"></div></div></div><div id="wc-comm-23248_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-23248" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Josh</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-23248" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>This is an excellent article.  However, with the above code I get a very orderly production, until the queue is full, and a very orderly consumption, until the queue is empty, and then this repeats.</p><p>The example would be much better if the Thread.sleep() were placed outside the synchronized block, and randomized for a different timeout each time, say, between 500ms and 1000ms.</p><p>The critical section (synchronized block) is simply too large, and by the time the block ends, it repeats immediately and therefore the same thread is likely to reacquire the lock immediately, thus the long strings of production and consumption, without much interleaving.  Move the sleep outside and randomize it, and you will have a much better example.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>2 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-23248_0" class="wpdiscuz_clear"></div><div id="wc-comm-23250_23248" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-23250" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-23250" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Thanks for the feedback</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>2 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-23250_23248" class="wpdiscuz_clear"></div></div></div><div id="wc-comm-22717_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-22717" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Xu</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-22717" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Thank you for the blog!<br>
I have a question:</p><p>Why do we need to write `while (taskQueue.size() == MAX_CAPACITY)` ?<br>
Can we use `if` instead of `while`?</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-22717_0" class="wpdiscuz_clear"></div><div id="wc-comm-22718_22717" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-22718" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-22718" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>because we want to check the condition repetitively, not only once.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-22718_22717" class="wpdiscuz_clear"></div></div></div><div id="wc-comm-22365_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-22365" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Likesh V P</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-22365" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hi,<br>
Thanks for such a wonderful post.<br>
In your example both consumer and producer can’t run parallel right?<br>
To produce or consume they require lock. So if producer is running, consumer can’t process any entry even if the queue is not empty.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-22365_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-22239_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-22239" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Jack Peng</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-22239" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hello Lokesh,my problem is when i run the program post in your blog ,the output is regular,the consumer do not wake up until the queue is full,can you help me?tks<br>
Produced: 0<br>
Produced: 1<br>
Produced: 2<br>
Produced: 3<br>
Produced: 4<br>
Queue is full Producer is waiting , size: 5<br>
Consumed: 0<br>
Consumed: 1<br>
Consumed: 2<br>
Consumed: 3<br>
Consumed: 4<br>
Queue is empty Consumer is waiting , size: 0<br>
Produced: 5<br>
Produced: 6<br>
Produced: 7<br>
Produced: 8<br>
Produced: 9<br>
Queue is full Producer is waiting , size: 5<br>
Consumed: 5<br>
Consumed: 6<br>
Consumed: 7<br>
Consumed: 8<br>
Consumed: 9<br>
Queue is empty Consumer is waiting , size: 0<br>
Produced: 10<br>
Produced: 11<br>
Produced: 12<br>
Produced: 13<br>
Produced: 14<br>
Queue is full Producer is waiting , size: 5<br>
Consumed: 10<br>
Consumed: 11<br>
Consumed: 12<br>
Consumed: 13<br>
Consumed: 14<br>
Queue is empty Consumer is waiting , size: 0<br>
Produced: 15<br>
Produced: 16</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-22239_0" class="wpdiscuz_clear"></div><div id="wc-comm-22241_22239" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-22241" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-22241" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Nobody can control the output, it’s totally depends on OS scheduler. Above output is also a valid output.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-22241_22239" class="wpdiscuz_clear"></div></div><div id="wc-comm-30099_22239" class="wc-comment wc-reply wc-blog-guest wc_comment_level-2"><div id="comment-30099" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Albert Stein</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-30099" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>To have the process interleave at all I needed to add a Thread.currentThread().yield(); just inside the while (true) loops of the Consumer and Producer.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>1 year ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-30099_22239" class="wpdiscuz_clear"></div></div></div><div id="wc-comm-21978_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-21978" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Abhinav</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-21978" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hi Lokesh,<br>
Can u tell me that what r the conditions to get the object lock. Means can we lock the object through synchronised method and what is the role of wait() method for getting the objects lock.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-21978_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-21782_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-21782" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">suresh</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-21782" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>See i was really devasted and could not understand how to explain this concept in practical scenarios you showed how easily it can be explained</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-21782_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-21319_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-21319" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Shubham</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-21319" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hello Lokesh,<br>
I implemented the code mentioned in the blog and mentioned below is the output I was getting</p><div><div id="highlighter_271638" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Produced: </code><code class="java value">0</code></div><div class="line number2 index1 alt1"><code class="java plain">Produced: </code><code class="java value">1</code></div><div class="line number3 index2 alt2"><code class="java plain">Produced: </code><code class="java value">2</code></div><div class="line number4 index3 alt1"><code class="java plain">Produced: </code><code class="java value">3</code></div><div class="line number5 index4 alt2"><code class="java plain">Produced: </code><code class="java value">4</code></div><div class="line number6 index5 alt1"><code class="java plain">Queue is full Producer is waiting , size: </code><code class="java value">5</code></div><div class="line number7 index6 alt2"><code class="java plain">Consumed: </code><code class="java value">0</code></div><div class="line number8 index7 alt1"><code class="java plain">Consumed: </code><code class="java value">1</code></div><div class="line number9 index8 alt2"><code class="java plain">Consumed: </code><code class="java value">2</code></div><div class="line number10 index9 alt1"><code class="java plain">Consumed: </code><code class="java value">3</code></div><div class="line number11 index10 alt2"><code class="java plain">Consumed: </code><code class="java value">4</code></div><div class="line number12 index11 alt1"><code class="java plain">Queue is empty Consumer is waiting , size: </code><code class="java value">0</code></div><div class="line number13 index12 alt2"><code class="java plain">Produced: </code><code class="java value">5</code></div><div class="line number14 index13 alt1"><code class="java plain">Produced: </code><code class="java value">6</code></div><div class="line number15 index14 alt2"><code class="java plain">Produced: </code><code class="java value">7</code></div><div class="line number16 index15 alt1"><code class="java plain">Produced: </code><code class="java value">8</code></div><div class="line number17 index16 alt2"><code class="java plain">Produced: </code><code class="java value">9</code></div><div class="line number18 index17 alt1"><code class="java plain">Queue is full Producer is waiting , size: </code><code class="java value">5</code></div><div class="line number19 index18 alt2"><code class="java plain">Consumed: </code><code class="java value">5</code></div><div class="line number20 index19 alt1"><code class="java plain">Consumed: </code><code class="java value">6</code></div><div class="line number21 index20 alt2"><code class="java plain">Consumed: </code><code class="java value">7</code></div><div class="line number22 index21 alt1"><code class="java plain">Produced: </code><code class="java value">10</code></div><div class="line number23 index22 alt2"><code class="java plain">Produced: </code><code class="java value">11</code></div><div class="line number24 index23 alt1"><code class="java plain">Produced: </code><code class="java value">12</code></div><div class="line number25 index24 alt2"><code class="java plain">Queue is full Producer is waiting , size: </code><code class="java value">5</code></div><div class="line number26 index25 alt1"><code class="java plain">Consumed: </code><code class="java value">8</code></div><div class="line number27 index26 alt2"><code class="java plain">Consumed: </code><code class="java value">9</code></div><div class="line number28 index27 alt1"><code class="java plain">...</code></div></div></td></tr></tbody></table></div></div><p>Now, the question :<br>
Q.1<br>
I hoped for this output only, not the output mentioned in the mentioned in blog as synchronization is on taskQueue (which is being passed from static void main() method) in both the class. So what happens when tProducer.start() happens. It gets the lock of taskQueue object and starts producing and then releases the lock when wait is called. At this time tConsumer which was was in waiting for the lock of taskQueue object in consume() method to get into synchronized block and goes into consuming the item from list and when size is zero it goes into wait and releases the lock and tProducer acquires it and this keeps on going. Am I correct with this understanding ?<br>
Q.2 I am not able to get what does this “taskQueue.wait()” means in his code. What would have happened if I happen if I use “wait()” or “notifyAll()” only, when I tried it I got this as output after running for a while.</p><div><div id="highlighter_536005" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">Consumed: </code><code class="java value">4</code></div><div class="line number2 index1 alt1"><code class="java plain">Queue is empty Consumer is waiting , size: </code><code class="java value">0</code></div><div class="line number3 index2 alt2"><code class="java plain">Exception in thread </code><code class="java string">"Consumer"</code> <code class="java plain">java.lang.IllegalMonitorStateException</code></div><div class="line number4 index3 alt1"><code class="java plain">at java.lang.Object.wait(Native Method)</code></div><div class="line number5 index4 alt2"><code class="java plain">at java.lang.Object.wait(Object.java:</code><code class="java value">503</code><code class="java plain">)</code></div><div class="line number6 index5 alt1"><code class="java plain">at in.shubham.howtodoinjava.Consumer.consume(Consumer.java:</code><code class="java value">38</code><code class="java plain">)</code></div><div class="line number7 index6 alt2"><code class="java plain">at in.shubham.howtodoinjava.Consu...(Consumer.java:</code><code class="java value">23</code><code class="java plain">)</code></div><div class="line number8 index7 alt1"><code class="java plain">at java.lang.Thread.run(Thread.java:</code><code class="java value">745</code><code class="java plain">)</code></div></div></td></tr></tbody></table></div></div></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-21319_0" class="wpdiscuz_clear"></div><div id="wc-comm-21329_21319" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-21329" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-21329" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>1) You are right.<br>
2) <code>wait()</code> and <code>notifyAll()</code> must be called on some object, which producer and consumer both can access. So rather than creating a new monitor object for this purpose, I used this existing object.<br>
Regarding error, not sure how you have modified the wait() and notify() calls. Please share the modified code.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-21329_21319" class="wpdiscuz_clear"></div><div id="wc-comm-21332_21329" class="wc-comment wc-reply wc-blog-guest wc_comment_level-3"><div id="comment-21332" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Shubham</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-21332" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hello Lokesh,</p><p>Firstly thanks for the clearing my doubt. And secondly, I just wrote like this in Producer and Consumer</p><div><div id="highlighter_179832" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">this</code><code class="java plain">.wait();</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java plain">and</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;</code><code class="java keyword">this</code><code class="java plain">.notifyAll();</code></div></div></td></tr></tbody></table></div></div></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-21332_21329" class="wpdiscuz_clear"></div></div><div id="wc-comm-21335_21329" class="wc-comment wc-reply wc-blog-guest wc_comment_level-3"><div id="comment-21335" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Shubham</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-21335" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Thanks for such a quick response and clearing my doubt.<br>
and what I did in my code was “this.notifyAll()” and “this.wait()” INSTEAD of “taskQueue.wait()” or “taskQueue.notifyAll()”.</p><p>Now that you have told that “wait() and notifyAll() must be called on some object, which producer and consumer both can access”  , I somehow think I am able to figure out why error came but it would be really nice if you can elaborate it or what this IllegalMonitorStateException means ?</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-21335_21329" class="wpdiscuz_clear"></div><div id="wc-comm-21342_21335" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-4"><div id="comment-21342" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-21342" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>You can’t wait() on an object unless the current thread owns that object’s monitor – otherwise <code>IllegalMonitorStateException</code> is thrown. To own the monitor of that object, you must synchronize on it.</p><p>e.g. So if you want to use <code>this.wait()</code> which I do not recommend, you must do it inside <code>synchronized(this) {...}</code> block.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-21342_21335" class="wpdiscuz_clear"></div></div></div></div></div><div id="wc-comm-20176_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-20176" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">curious mind</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-20176" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Thanks for the post. It cleared up many of the confusions I had about threading in general. I just have one quick question about the notify() method. In Producer class after you add(produce) the product into the LinkedList you call notify(), is this to ‘wake up’ the Consumer Thread or Producer Thread? and if it’s for consumer Thread, why so ?</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">-1</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-20176_0" class="wpdiscuz_clear"></div><div id="wc-comm-20178_20176" class="wc-comment wc-reply wc-blog-guest wc_comment_level-2"><div id="comment-20178" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">curious mind</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-20178" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>I only ask this question because my understanding of notify() is “it wakes up a thread that is waiting on this object’s moniotr”. Thus, since Producer has been put on “waiting” when the list is full, it has to be notified by notify()method within its body to start working again. Is this wrong?</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-20178_20176" class="wpdiscuz_clear"></div></div></div><div id="wc-comm-18489_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-18489" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Chandan</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-18489" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>when notify method is called which thread is revoked execution has two ambiguous answers.</p><p>1) definition of notify() : It wakes up the first thread that called wait() on the same object</p><p>2) answer of question: What happens when more than one thread is waiting for notification? Which threads actually get the notification when the notify() method is called?</p><p>Could you please tell me which one is correct.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-18489_0" class="wpdiscuz_clear"></div><div id="wc-comm-18490_18489" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-18490" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-18490" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hi Chandan, Thanks for pointing out this typo. Second answer is correct. In first answer, please read “single” in place of “first”. I have updated the post.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-18490_18489" class="wpdiscuz_clear"></div><div id="wc-comm-18491_18490" class="wc-comment wc-reply wc-blog-guest wc_comment_level-3"><div id="comment-18491" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Chandan</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-18491" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Thanks Lokesh,</p><p>Article is really helpful to understand concepts of java multi threading thread communication. Is there some mechanism  possible which can notify to a particular thread only or a particular thread should be invoked. ,Because I had a problem where have three threads t1,t2, t3 which are having data {1,4,7},{2,6,8},{3,6,9} respectively. I want to run these threads in parallel to give result of {1,2,3,4,5,6,7,8,9}</p><p>Regards,<br>
Chandan</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-18491_18490" class="wpdiscuz_clear"></div><div id="wc-comm-18492_18491" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-4"><div id="comment-18492" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-18492" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>You may try this solution. <a href="https://stackoverflow.com/questions/30964133/3-threads-printing-numbers-in-sequence" rel="nofollow ugc">https://stackoverflow.com/questions/30964133/3-threads-printing-numbers-in-sequence</a></p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-18492_18491" class="wpdiscuz_clear"></div></div></div></div></div><div id="wc-comm-17141_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-17141" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Swati</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-17141" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Nice article.<br>
It cleared many of my doubts regarding multithreading.</p><div><div id="highlighter_915658" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">synchronized</code> <code class="java plain">(taskQueue)</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code> <code class="java plain">(taskQueue.size() == MAX_CAPACITY)</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Queue is full "</code> <code class="java plain">+ Thread.currentThread().getName() + </code><code class="java string">" is waiting , size: "</code> <code class="java plain">+ taskQueue.size());</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">taskQueue.wait();</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div></div></td></tr></tbody></table></div></div><p>Like here in above code you associated wait() diirectly on taskqueue object.</p><p><a href="http://www.java-samples.com/showtutorial.php?tutorialid=306" rel="nofollow ugc">http://www.java-samples.com/showtutorial.php?tutorialid=306</a><br>
On this link,wait() is not written like this.wait(). Is wait() directly got link with q object.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-17141_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-16297_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-16297" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://sites.google.com/site/ganeshgowtham/" rel="nofollow" target="_blank">Ganesh Gowtham</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-16297" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Very Nice, Keep the Good Work .</p><p>I would like to have hyperlink on this from my website.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-16297_0" class="wpdiscuz_clear"></div><div id="wc-comm-16299_16297" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-16299" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-16299" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Thanks for kind words. And a hyperlink is much appreciated.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-16299_16297" class="wpdiscuz_clear"></div></div></div><div id="wc-comm-14883_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-14883" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">vijay</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-14883" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>really good..most of other learning forums have explained the concept..but here you have put in very simple way. the approach of taking consumer from one Thread class object and Producer as different Thread class object simplified the things and I am able to understand quickly…keep posting..Thanks a lot…</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-14883_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-14539_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-14539" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Souvik Bhattacharya</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-14539" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>HI,<br>
Thanks for such an wonderful post. But recently, a question asked to my friend. So, can you help me with that.</p><p>1) Write a small program to create dead lock with wait() and notify().<br>
2) Write a small programm to create dead lock with synchronixed block().</p><p>If possible please answer.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-14539_0" class="wpdiscuz_clear"></div><div id="wc-comm-14540_14539" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-14540" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-14540" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>2) <a href="https://howtodoinjava.com/java/multi-threading/writing-a-deadlock-and-resolving-in-java/" rel="nofollow ugc">https://howtodoinjava.com/java/multi-threading/writing-a-deadlock-and-resolving-in-java/</a><br>
1) I will work.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-14540_14539" class="wpdiscuz_clear"></div><div id="wc-comm-14549_14540" class="wc-comment wc-reply wc-blog-guest wc_comment_level-3"><div id="comment-14549" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Souvik</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-14549" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>For #1<br>
public class DeadLock {<br>
public static void main(String[] args) throws InterruptedException {<br>
new DeadLock().deadlock();<br>
}<br>
private synchronized void deadlock() {<br>
try {<br>
wait();<br>
} catch (InterruptedException ex) {<br>
ex.printStackTrace();<br>
}<br>
}<br>
}</p><p>But the problem is it’s only with wait(). Not with using wait() notify both. So, it will be great if you can provide exaple with both.</p><p>Thanks for the #2 answer</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-14549_14540" class="wpdiscuz_clear"></div></div></div></div><div id="wc-comm-14432_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-14432" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">vixir</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-14432" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>“By waking up all the threads, we can design the program so that the threads decide among themselves which thread should execute next”<br>
Can you please explain me how it can be done ? How can the threads decide among themselves ?</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-14432_0" class="wpdiscuz_clear"></div><div id="wc-comm-14434_14432" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-14434" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-14434" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>An example could be group of threads (one thread processing only a specific type of message) watching a message queue. Upon placing a message in queue, producer can notify all consumer threads. Then each consumer thread may check if message is for it, and if it is then process it otherwise wait again.</p><p>This design may look inefficient as correct thread may get chance to check in last; BUT it will start making sense when you start adding more message types and their handler threads into system without modifying code of other handlers.</p><p>Just for an example. Make sense?</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">1</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-14434_14432" class="wpdiscuz_clear"></div><div id="wc-comm-14437_14434" class="wc-comment wc-reply wc-blog-guest wc_comment_level-3"><div id="comment-14437" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">vixir</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-14437" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>yes..Thanks</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-14437_14434" class="wpdiscuz_clear"></div></div></div></div><div id="wc-comm-14370_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-14370" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Ankur Goel</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-14370" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>I think in this example instead of List, Queue should be used.</p><p>Else each time only element @ location zero will be consumed only.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-14370_0" class="wpdiscuz_clear"></div><div id="wc-comm-15558_14370" class="wc-comment wc-reply wc-blog-guest wc_comment_level-2"><div id="comment-15558" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">shutear</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/#comment-15558" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>I appreciate the article very much!<br>
So I’d like to argue for it.  Maybe a queue is better to understand here, but there is no doubt that a list can be used as a queue in a proper way (append to rear, get&amp;<b>remove</b> from front), as what the article did. For your question, a consumer indeed consumes only element @location zero each time, and this is also the meaning of First Out for a queue.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-15558_14370" class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-pagination"></div></div><div class="wpdiscuz_clear"></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar wpdiscuz-loading-bar-unauth"></div>
</main><aside class="sidebar sidebar-primary widget-area" role="complementary" aria-label="Primary Sidebar"><section id="text-37" class="widget widget_text"><div class="widget-wrap"><h4 class="widget-title widgettitle">Search Tutorials</h4><div class="textwidget"><form action="https://howtodoinjava.com/search-results">
<input class="search-input" name="q" placeholder="Type and Press ENTER..." size="35" type="text"></form></div></div></section>
<section id="text-43" class="widget widget_text"><div class="widget-wrap"><div class="textwidget"><div style="margin-top: 10px; margin-bottom: 6px; width: 300px;"><div id="waldo-tag-3099" data-processed="true"><div id="google_ads_iframe_/124067137/howtodoinjava300x250FX_1_0__container__" style="border: 0pt none; width: 300px; height: 250px;"></div></div></div></div></div></section>
<section id="text-46" class="widget widget_text"><div class="widget-wrap"><div class="textwidget"><div style="margin-bottom: 6px;"><div id="waldo-tag-3095" data-processed="true"><div id="google_ads_iframe_/124067137/howtodoinjava300x250FL_1_0__container__" style="border: 0pt none; width: 300px; height: 250px;"></div></div></div><div style="margin-bottom: 6px;"><div id="waldo-tag-3097" data-processed="true"><div id="google_ads_iframe_/124067137/howtodoinjava300x250FL_2_0__container__" style="border: 0pt none; width: 300px; height: 250px;"></div></div></div></div></div></section>
</aside></div><aside class="sidebar sidebar-secondary widget-area" role="complementary" aria-label="Secondary Sidebar"><section id="nav_menu-41" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Java Concurrency Tutorial</h4><div class="menu-java-concurrency-1-container"><ul id="menu-java-concurrency-1" class="menu"><li id="menu-item-8069" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8069"><a href="https://howtodoinjava.com/java-concurrency-tutorial/">Java Concurrency – Introduction</a></li><li id="menu-item-5617" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5617"><a href="https://howtodoinjava.com/java/multi-threading/java-multi-threading-evolution-and-topics/">Concurrency Evolution</a></li><li id="menu-item-5622" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5622"><a href="https://howtodoinjava.com/java/multi-threading/what-is-thread-safety/">Thread Safety</a></li><li id="menu-item-5615" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5615"><a href="https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/">Concurrency vs. Parallelism</a></li><li id="menu-item-5625" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5625"><a href="https://howtodoinjava.com/java/multi-threading/compare-and-swap-cas-algorithm/">Compare and Swap [CAS]</a></li><li id="menu-item-12100" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-12100"><a href="https://howtodoinjava.com/java/multi-threading/java-synchronized/">synchronized keyword</a></li><li id="menu-item-5623" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5623"><a href="https://howtodoinjava.com/java/multi-threading/object-vs-class-level-locking/">Object vs. Class Level Locking</a></li><li id="menu-item-5630" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5630"><a href="https://howtodoinjava.com/java/multi-threading/java-runnable-vs-thread/">Runnable vs. Thread</a></li><li id="menu-item-5626" class="menu-item menu-item-type-post_type menu-item-object-post current-menu-item menu-item-5626"><a href="https://howtodoinjava.com/java/multi-threading/wait-notify-and-notifyall-methods/" aria-current="page">wait(), notify() and notifyAll()</a></li><li id="menu-item-5628" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5628"><a href="https://howtodoinjava.com/java/multi-threading/difference-between-yield-and-join-in-threads-in-java/">Yield() vs. Join()</a></li><li id="menu-item-5629" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5629"><a href="https://howtodoinjava.com/java/multi-threading/sleep-vs-wait/">Sleep() vs. Wait()</a></li><li id="menu-item-5627" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5627"><a href="https://howtodoinjava.com/java/multi-threading/multithreading-difference-between-lock-and-monitor/">Lock vs. Monitor</a></li><li id="menu-item-5618" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5618"><a href="https://howtodoinjava.com/java/multi-threading/java-callable-future-example/">Callable + Future</a></li><li id="menu-item-5638" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5638"><a href="https://howtodoinjava.com/java/multi-threading/how-to-restart-thread-using-uncaughtexceptionhandler/">UncaughtExceptionHandler</a></li><li id="menu-item-5634" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5634"><a href="https://howtodoinjava.com/java/multi-threading/throttling-task-submission-rate-using-threadpoolexecutor-and-semaphore/">Throttling Task Submission</a></li><li id="menu-item-5635" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5635"><a href="https://howtodoinjava.com/java/multi-threading/executor-framework-tutorial/">Executor Best Practices</a></li><li id="menu-item-5641" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5641"><a href="https://howtodoinjava.com/java/multi-threading/inter-thread-communication-using-piped-streams-in-java/">Inter-thread Communication</a></li><li id="menu-item-5643" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5643"><a href="https://howtodoinjava.com/java/multi-threading/writing-a-deadlock-and-resolving-in-java/">Write and Resolve Deadlock</a></li></ul></div></div></section>
<section id="nav_menu-63" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Java Concurrency Utilities</h4><div class="menu-java-concurrency-2-container"><ul id="menu-java-concurrency-2" class="menu"><li id="menu-item-12466" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-12466"><a href="https://howtodoinjava.com/java/multi-threading/atomicinteger-example/">AtomicInteger</a></li><li id="menu-item-8058" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8058"><a href="https://howtodoinjava.com/java/multi-threading/how-to-use-locks-in-java-java-util-concurrent-locks-lock-tutorial-and-example/">Lock</a></li><li id="menu-item-8057" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8057"><a href="https://howtodoinjava.com/java/multi-threading/creating-threads-using-java-util-concurrent-threadfactory/">ThreadFactory</a></li><li id="menu-item-8059" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8059"><a href="https://howtodoinjava.com/java/multi-threading/when-and-how-to-use-thread-local-variables/">ThreadLocal</a></li><li id="menu-item-12571" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-12571"><a href="https://howtodoinjava.com/java/multi-threading/executor-service-example/">ExecutorService</a></li><li id="menu-item-8061" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8061"><a href="https://howtodoinjava.com/java/multi-threading/java-thread-pool-executor-example/">ThreadPoolExecutor</a></li><li id="menu-item-8060" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8060"><a href="https://howtodoinjava.com/java/multi-threading/java-fixed-size-thread-pool-executor-example/">FixedSizeThreadPoolExecutor</a></li><li id="menu-item-8062" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8062"><a href="https://howtodoinjava.com/java/multi-threading/task-scheduling-with-executors-scheduledthreadpoolexecutor-example/">ScheduledThreadPoolExecutor</a></li><li id="menu-item-8068" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8068"><a href="https://howtodoinjava.com/java/multi-threading/control-concurrent-access-to-multiple-copies-of-a-resource-using-semaphore/">Semaphore</a></li><li id="menu-item-8063" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8063"><a href="https://howtodoinjava.com/java/multi-threading/binary-semaphore-tutorial-and-example/">Binary Semaphore</a></li><li id="menu-item-8064" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8064"><a href="https://howtodoinjava.com/java/multi-threading/how-to-use-blockingqueue-and-threadpoolexecutor-in-java/">BlockingQueue</a></li><li id="menu-item-12589" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-12589"><a href="https://howtodoinjava.com/java/multi-threading/java-delayqueue/">DelayQueue</a></li><li id="menu-item-8065" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8065"><a href="https://howtodoinjava.com/java/multi-threading/non-blocking-thread-safe-list-concurrentlinkeddeque-example/">ConcurrentLinkedDeque</a></li><li id="menu-item-8066" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8066"><a href="https://howtodoinjava.com/java/multi-threading/when-to-use-countdownlatch-java-concurrency-example-tutorial/">CountDownLatch</a></li><li id="menu-item-8067" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8067"><a href="https://howtodoinjava.com/java7/forkjoin-framework-tutorial-forkjoinpool-example/">ForkJoinPool</a></li></ul></div></div></section>
<section id="nav_menu-103" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Popular Tutorials</h4><div class="menu-popular-tutorials-container"><ul id="menu-popular-tutorials" class="menu"><li id="menu-item-12031" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12031"><a href="https://howtodoinjava.com/java-8-tutorial/">Java 8 Tutorial</a></li><li id="menu-item-10311" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-10311"><a href="https://howtodoinjava.com/java/basics/what-is-java-programming-language/">Core Java Tutorial</a></li><li id="menu-item-12032" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12032"><a href="https://howtodoinjava.com/java-collections/">Collections in Java</a></li><li id="menu-item-12033" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12033"><a href="https://howtodoinjava.com/java-concurrency-tutorial/">Java Concurrency</a></li><li id="menu-item-11314" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11314"><a href="https://howtodoinjava.com/spring-boot-tutorials/">Spring Boot Tutorial</a></li><li id="menu-item-10318" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10318"><a href="https://howtodoinjava.com/spring-aop-tutorial/">Spring AOP Tutorial</a></li><li id="menu-item-10308" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10308"><a href="https://howtodoinjava.com/spring-mvc-tutorial/">Spring MVC Tutorial</a></li><li id="menu-item-10309" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10309"><a href="https://howtodoinjava.com/spring-security-tutorial/">Spring Security Tutorial</a></li><li id="menu-item-10292" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10292"><a href="https://howtodoinjava.com/hibernate-tutorials/">Hibernate Tutorial</a></li><li id="menu-item-13063" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13063"><a href="https://howtodoinjava.com/python-tutorial/">Python Tutorial</a></li><li id="menu-item-10303" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10303"><a href="https://howtodoinjava.com/jersey-jax-rs-tutorials/">Jersey Tutorial</a></li><li id="menu-item-10306" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10306"><a href="https://howtodoinjava.com/maven/">Maven Tutorial</a></li><li id="menu-item-10305" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10305"><a href="https://howtodoinjava.com/log4j2/">Log4j Tutorial</a></li><li id="menu-item-12034" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12034"><a href="https://howtodoinjava.com/java-regular-expression-tutorials/">Regex Tutorial</a></li></ul></div></div></section>
</aside></div></div><div class="before-footer"><div class="wrap"><section id="text-45" class="widget widget_text"><div class="widget-wrap"><div class="textwidget"><style>.hideOnMobile { display: block; } @media (max-width:960px) { .hideOnMobile { display: none; } }</style><div class="hideOnMobile" style="margin: 10px auto; text-align: center; width: 728px;"><div id="waldo-tag-3101" data-processed="true"><div id="google_ads_iframe_/124067137/howtodoinjava728x90FS_1_0__container__" style="border: 0pt none; width: 728px; height: 90px;"></div></div></div></div></div></section></div></div><div class="footer-widgets"><div class="wrap"><div class="widget-area footer-widgets-1 footer-widget-area"><section id="nav_menu-6" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Meta Links</h4><div class="menu-meta-links-container"><ul id="menu-meta-links" class="menu"><li id="menu-item-3574" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3574"><a href="https://howtodoinjava.com/advertise/">Advertise</a></li><li id="menu-item-3570" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3570"><a href="https://howtodoinjava.com/contact/">Contact Us</a></li><li id="menu-item-3568" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3568"><a href="https://howtodoinjava.com/privacy-policy/">Privacy policy</a></li><li id="menu-item-3571" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3571"><a href="https://howtodoinjava.com/about/">About Me</a></li></ul></div></div></section></div><div class="widget-area footer-widgets-2 footer-widget-area"><section id="nav_menu-118" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Recommended Reading</h4><div class="menu-recommended-reading-container"><ul id="menu-recommended-reading" class="menu"><li id="menu-item-5713" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5713"><a title="10 Life Lessions" href="https://howtodoinjava.com/resources/10-life-lessons-i-have-learned-in-last-few-years/">10 Life Lessons</a></li><li id="menu-item-5724" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5724"><a href="https://howtodoinjava.com/security/how-to-generate-secure-password-hash-md5-sha-pbkdf2-bcrypt-examples/">Secure Hash Algorithms</a></li><li id="menu-item-5714" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5714"><a href="https://howtodoinjava.com/tomcat/a-birds-eye-view-on-how-web-servers-work/">How Web Servers work?</a></li><li id="menu-item-5717" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5717"><a href="https://howtodoinjava.com/java/io/how-java-io-works-internally-at-lower-level/">How Java I/O Works Internally?</a></li><li id="menu-item-5722" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5722"><a href="https://howtodoinjava.com/resources/best-way-to-learn-java/">Best Way to Learn Java</a></li><li id="menu-item-5733" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5733"><a href="https://howtodoinjava.com/java-best-practices/">Java Best Practices Guide</a></li><li id="menu-item-9622" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-9622"><a href="https://howtodoinjava.com/microservices/microservices-definition-principles-benefits/">Microservices Tutorial</a></li><li id="menu-item-6405" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-6405"><a title="REST API Tutorial" target="_blank" rel="nofollow" href="http://restfulapi.net/">REST API Tutorial</a></li><li id="menu-item-9519" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9519"><a href="https://howtodoinjava.com/start-new-blog/">How to Start New Blog</a></li></ul></div></div></section></div></div></div><footer class="site-footer"><div class="wrap"><p style="margin: 20px auto;max-width: 800px;">Copyright © 2016 · HowToDoInjava.com · All Rights Reserved. | <a href="https://howtodoinjava.com/sitemap.xml">Sitemap</a></p></div></footer></div><a id="wpdUserContentInfoAnchor" style="display:none;" rel="#wpdUserContentInfo" data-wpd-lity="">wpDiscuz</a><div id="wpdUserContentInfo" style="overflow:auto;background:#FDFDF6;padding:20px;width:600px;max-width:100%;border-radius:6px;" class="lity-hide"></div><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-40697607-1', 'auto');
  ga('set', 'dimension1', 'Test');
  ga('send', 'pageview');</script> <script>(function() {
    var cx = '000292789241211868774:cvclu5feha4';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//cse.google.com/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();</script><script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/shCore.js"></script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/shBrushJava.js"></script> <script type="text/javascript">(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://howtodoinjava.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.head.appendChild( corecss );
		var themecssurl = "https://howtodoinjava.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.head.appendChild( themecss );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

	// Infinite scroll support
	if ( typeof( jQuery ) !== 'undefined' ) {
		jQuery( function( $ ) {
			$( document.body ).on( 'post-load', function() {
				SyntaxHighlighter.highlight();
			} );
		} );
	}</script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/wpdcc.js"></script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/jquery.autogrowtextarea.min.js"></script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/jquery.form.min.js"></script> <script type="text/javascript">/*<![CDATA[*//*  */
var wpdiscuzAjaxObj = {"url":"https:\/\/howtodoinjava.com\/wp-admin\/admin-ajax.php","customAjaxUrl":"https:\/\/howtodoinjava.com\/wp-content\/plugins\/wpdiscuz\/utils\/ajax\/wpdiscuz-ajax.php","wpdiscuz_options":{"wc_hide_replies_text":"Hide Replies","wc_show_replies_text":"View Replies","wc_msg_required_fields":"Please fill out required fields","wc_invalid_field":"Some of field value is invalid","wc_error_empty_text":"please fill out this field to comment","wc_error_url_text":"url is invalid","wc_error_email_text":"email address is invalid","wc_invalid_captcha":"Invalid Captcha Code","wc_login_to_vote":"You Must Be Logged In To Vote","wc_deny_voting_from_same_ip":"You are not allowed to vote for this comment","wc_self_vote":"You cannot vote for your comment","wc_vote_only_one_time":"You've already voted for this comment","wc_voting_error":"Voting Error","wc_held_for_moderate":"Comment awaiting moderation","wc_comment_edit_not_possible":"Sorry, this comment no longer possible to edit","wc_comment_not_updated":"Sorry, the comment was not updated","wc_comment_not_edited":"You've not made any changes","wc_new_comment_button_text":"new comment","wc_new_comments_button_text":"new comments","wc_new_reply_button_text":"new reply on your comment","wc_new_replies_button_text":"new replies on your comments","wc_msg_input_min_length":"Input is too short","wc_msg_input_max_length":"Input is too long","wc_follow_user":"Follow this user","wc_unfollow_user":"Unfollow this user","wc_follow_success":"You started following this comment author","wc_follow_canceled":"You stopped following this comment author.","wc_follow_email_confirm":"Please check your email and confirm the user following request.","wc_follow_email_confirm_fail":"Sorry, we couldn't send confirmation email.","wc_follow_login_to_follow":"Please login to follow users.","wc_follow_impossible":"We are sorry, but you can't follow this user.","wc_follow_not_added":"Following failed. Please try again later.","is_user_logged_in":false,"commentListLoadType":"0","commentListUpdateType":"0","commentListUpdateTimer":"30","liveUpdateGuests":"1","wc_comment_bg_color":"#FEFEFE","wc_reply_bg_color":"#F8F8F8","wpdiscuzCommentsOrder":"desc","wpdiscuzCommentOrderBy":"comment_date_gmt","commentsVoteOrder":false,"wordpressThreadCommentsDepth":"10","wordpressIsPaginate":"","commentTextMaxLength":null,"storeCommenterData":100000,"isCaptchaInSession":true,"isGoodbyeCaptchaActive":false,"socialLoginAgreementCheckbox":0,"enableFbLogin":0,"enableFbShare":0,"facebookAppID":"","facebookUseOAuth2":0,"enableGoogleLogin":0,"googleAppID":"","cookiehash":"1aece0b34da653945745203e18ec6df7","isLoadOnlyParentComments":0,"ahk":"av6#4%v(x-9c%p&s0@x$e&zp8hgd#$=#","enableDropAnimation":1,"isNativeAjaxEnabled":1,"cookieCommentsSorting":"wpdiscuz_comments_sorting","enableLastVisitCookie":0,"version":"5.3.5","wc_post_id":4421,"loadLastCommentId":0,"lastVisitKey":"wpdiscuz_last_visit","isCookiesEnabled":true,"wc_captcha_show_for_guest":"0","wc_captcha_show_for_members":"0","is_email_field_required":"1"}};
/*  *//*]]>*/</script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/wpdiscuz.js"></script> <script type="text/javascript">/*  */
var wpdiscuzUCObj = {"msgConfirmDeleteComment":"Are you sure you want to delete this comment?","msgConfirmCancelSubscription":"Are you sure you want to cancel this subscription?","msgConfirmCancelFollow":"Are you sure you want to cancel this follow?"};
/*  */</script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/wpdiscuz-user-content.js"></script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/lity.js"></script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/comment-reply.min.js"></script> <script type="text/javascript" src="./How to work with wait(), notify() and notifyAll() in Java_ - HowToDoInJava_files/collapsable.js"></script> </body></html>
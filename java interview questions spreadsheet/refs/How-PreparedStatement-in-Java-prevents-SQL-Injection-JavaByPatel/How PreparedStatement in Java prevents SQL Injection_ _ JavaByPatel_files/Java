// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143"},"updated":{"$t":"2020-02-03T22:12:36.691-08:00"},"category":[{"term":"Interviews"},{"term":"Java"},{"term":"Datastructure"},{"term":"Algorithm"},{"term":"Binary Tree"},{"term":"Miscellaneous"},{"term":"Binary Search Tree"},{"term":"Array"},{"term":"Linked List"},{"term":"Sorting"},{"term":"Multithreading"},{"term":"Strings"},{"term":"Matrix"},{"term":"AngularJS"},{"term":"Bit Manipulation"},{"term":"OOPS"},{"term":"Database"},{"term":"Stack"},{"term":"Quartz"},{"term":"Angular2"},{"term":"Queue"},{"term":"Design Pattern"},{"term":"Typescript"},{"term":"Backtracking"},{"term":"Heap"},{"term":"Java8"},{"term":"Web Service"},{"term":"Graph"},{"term":"Puzzle"},{"term":"Stream"},{"term":"Windows"},{"term":"Binary Search"},{"term":"Javascript"},{"term":"Spring"}],"title":{"type":"text","$t":"JavaByPatel"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/-\/Java?alt=json-in-script\u0026max-results=8"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/search\/label\/Java"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/-\/Java\/-\/Java?alt=json-in-script\u0026start-index=9\u0026max-results=8"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"121"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"8"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-1522727709609425042"},"published":{"$t":"2019-08-21T14:05:00.001-07:00"},"updated":{"$t":"2019-08-21T14:05:03.057-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"}],"title":{"type":"text","$t":"Generate all the binary strings of N bits."},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3\u003E\u003Cspan style=\"color: #0b5394;\"\u003EGenerate all the binary strings of N bits.\u0026nbsp;\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EGiven a positive integer number N. Generate all the binary strings(0 and 1) of N bits.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ECase 1\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u003Cb\u003EInput:\u003C\/b\u003E\u0026nbsp;length=2\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u003Cb\u003EOutput:\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; 0 0\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; 0 1\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; 1 0\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; 1 1\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EAlgorithm:\u003C\/span\u003E\u003C\/b\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWe will see two approach of generating the binary string combination.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EFirst approach,\u003C\/b\u003E where we will form the binary string one by one and once it matches the required length, we will backtrack and switch the binary digit. In this approach, as String is immutable each character we append to a String will create new String object.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ESecond approach,\u003C\/b\u003E In this approach, we will overcome the problem occurred in first approach and use the fixed size array instead.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3\u003E\u003Cspan style=\"color: #0b5394;\"\u003EJava Program to Generate all the binary strings of N bits.\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cpre class=\"brush: java\"\u003Epackage javabypatel;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.Arrays;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class GenerateBinaryString {\u003Cbr \/\u003E\u003Cbr \/\u003E    public void printBinaryCombination(int n, String str) {\u003Cbr \/\u003E        if (str.length() == n) {\u003Cbr \/\u003E            System.out.println(str);\u003Cbr \/\u003E            return;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        printBinaryCombination(n, str + \"0\");\u003Cbr \/\u003E        printBinaryCombination(n, str + \"1\");\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void printBinaryCombination(int i, int[] arr) {\u003Cbr \/\u003E        if (i == arr.length) {\u003Cbr \/\u003E            System.out.println(Arrays.toString(arr));\u003Cbr \/\u003E            return;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        arr[i] = 0;\u003Cbr \/\u003E        printBinaryCombination(i+1, arr);\u003Cbr \/\u003E        arr[i] = 1;\u003Cbr \/\u003E        printBinaryCombination(i+1, arr);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public static void main(String[] args) {\u003Cbr \/\u003E        GenerateBinaryString obj = new GenerateBinaryString();\u003Cbr \/\u003E        int length = 3;\u003Cbr \/\u003E\u003Cbr \/\u003E        System.out.println(\"Approach 1\");\u003Cbr \/\u003E        obj.printBinaryCombination(3, \"\");\u003Cbr \/\u003E\u003Cbr \/\u003E        System.out.println(\"Approach 2\");\u003Cbr \/\u003E        obj.printBinaryCombination(0, new int[length]);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/08\/program-to-print-permutations-of-string-without-repetition.html\" style=\"font-size: 18px; line-height: 30px; padding: 0px;\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWrite a program to print all permutations of a given string without repetition. (Repetition of characters is not allowed).\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/07\/program-to-print-permutations-of-string-with-repetition.html\" style=\"font-size: 18px; line-height: 40px; padding: 0px;\" target=\"_blank\"\u003EWrite a program to print all permutations of a given string with repetition. (Repetition of characters is allowed).\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/10\/all-subsets-of-set-powerset.html\" style=\"font-size: 18px; line-height: 40px; padding: 0px;\" target=\"_blank\"\u003EPrint all subsets of a given set.\u003C\/a\u003E\u003C\/h4\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/1522727709609425042\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/08\/generate-all-binary-strings-of-n-bits.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/1522727709609425042"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/1522727709609425042"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/08\/generate-all-binary-strings-of-n-bits.html","title":"Generate all the binary strings of N bits."}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-4144314083406854795"},"published":{"$t":"2019-08-16T11:57:00.001-07:00"},"updated":{"$t":"2019-08-16T11:57:43.863-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Array"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"}],"title":{"type":"text","$t":"Check if an array is sorted in Java - Iterative and Recursive approach"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECheck if an array is sorted in Java - Iterative and Recursive approach.\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003EGiven an array, check if it is already sorted or not using both Iterative and Recursive way.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ELets see sample input and output for better understanding:\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-P63YlkwbayY\/XVb4hI9RUtI\/AAAAAAAACWs\/eMI1-V7tcR0zkIQMz0ntJT67IuXlUjk_QCLcBGAs\/s1600\/check-if-an-array-is-sorted-in-Java.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"202\" data-original-width=\"616\" height=\"130\" src=\"https:\/\/1.bp.blogspot.com\/-P63YlkwbayY\/XVb4hI9RUtI\/AAAAAAAACWs\/eMI1-V7tcR0zkIQMz0ntJT67IuXlUjk_QCLcBGAs\/s400\/check-if-an-array-is-sorted-in-Java.png\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EAlgorithm\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003ETo check whether the given array is sorted in ascending order or not, we will be comparing each adjacent pairs of the array and if all the pairs are in ascending order then array is sorted else not.\u003Cbr \/\u003E\u003Cbr \/\u003E1. If the array is null or has only one element then array is already sorted.\u003Cbr \/\u003E2. If there are more than 1 elements in the array, we will compare each adjacent elements till the end of the array and at any point if we see arr[i] \u0026gt; arr[i+1] we will stop and return false. \u0026nbsp; \u0026nbsp;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003C\/div\u003E\u003Cspan style=\"color: #0b5394; font-size: 20px;\"\u003EJava Program to check if an array is sorted in Java - Iterative and Recursive\u003C\/span\u003E\u003Cbr \/\u003E\u003Chr \/\u003E\u003Cpre class=\"brush: java\"\u003Epackage com.javabypatel;\u003Cbr \/\u003E\u003Cbr \/\u003E\/*\u003Cbr \/\u003E    Check if the given array is sorted or not.\u003Cbr \/\u003E    arr[1, 2, 3]    -\u0026gt; True\u003Cbr \/\u003E    arr[3, 3, 3]    -\u0026gt; True\u003Cbr \/\u003E    arr[0, 3, -1]   -\u0026gt; false\u003Cbr \/\u003E    arr[4, 10, 13]  -\u0026gt; True\u003Cbr \/\u003E    null            -\u0026gt; True\u003Cbr \/\u003E\u003Cbr \/\u003E *\/\u003Cbr \/\u003Epublic class CheckIfArrayIsSorted {\u003Cbr \/\u003E\u003Cbr \/\u003E    public boolean isSortedIterative(int arr[]) {\u003Cbr \/\u003E        if (arr == null) {\u003Cbr \/\u003E            return true;\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        boolean status = true;\u003Cbr \/\u003E        for (int i = 1; i \u0026lt; arr.length; i++) {\u003Cbr \/\u003E            if (arr[i-1] \u0026gt; arr[i]) {\u003Cbr \/\u003E                status = false;\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E        return status;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public boolean isSortedRecursive(int arr[], int i) {\u003Cbr \/\u003E        if (arr == null || arr.length-1 ==  i) {\u003Cbr \/\u003E            return true;\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        if (arr[i] \u0026gt; arr[i+1]) {\u003Cbr \/\u003E            return false;\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        return isSortedRecursive(arr, i+1);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public static void main(String[] args) {\u003Cbr \/\u003E        CheckIfArrayIsSorted checkIfArrayIsSorted = new CheckIfArrayIsSorted();\u003Cbr \/\u003E\u003Cbr \/\u003E        int[] arr = new int[] {1,2,3};\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedIterative(arr));\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedRecursive(arr, 0) + \"\\n\");\u003Cbr \/\u003E\u003Cbr \/\u003E        arr = new int[] {3,3,3};\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedIterative(arr));\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedRecursive(arr, 0) + \"\\n\");\u003Cbr \/\u003E\u003Cbr \/\u003E        arr = new int[] {3,3,0};\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedIterative(arr));\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedRecursive(arr, 0) + \"\\n\");\u003Cbr \/\u003E\u003Cbr \/\u003E        arr = new int[] {3,-1,0};\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedIterative(arr));\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedRecursive(arr, 0) + \"\\n\");\u003Cbr \/\u003E\u003Cbr \/\u003E        arr = null;\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedIterative(arr));\u003Cbr \/\u003E        System.out.println(checkIfArrayIsSorted.isSortedRecursive(arr, 0) + \"\\n\");\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr style=\"text-align: left;\" \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"https:\/\/javabypatel.blogspot.com\/2015\/12\/merge-sort-linked-list.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESort Linked list using Merge sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/01\/bubble-sort.html\" target=\"_blank\"\u003EBubble Sort\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/11\/heap-sort-algorithm.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHeap Sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/01\/selection-sort.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESelection Sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/01\/insertion-sort.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EInsertion Sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Chr style=\"text-align: left;\" \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/09\/concurrenthashmap-interview-questions.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow ConcurrentHashMap works and ConcurrentHashMap interview questions\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/10\/trapping-rain-water-between-towers.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow Much Water Can A Bar Graph with different heights can Hold\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/search\/label\/Interviews\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EInterview Questions-Answer Bank\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/4144314083406854795\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/08\/check-if-array-is-sorted-in-java-iterative-recursive-approach.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/4144314083406854795"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/4144314083406854795"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/08\/check-if-array-is-sorted-in-java-iterative-recursive-approach.html","title":"Check if an array is sorted in Java - Iterative and Recursive approach"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-P63YlkwbayY\/XVb4hI9RUtI\/AAAAAAAACWs\/eMI1-V7tcR0zkIQMz0ntJT67IuXlUjk_QCLcBGAs\/s72-c\/check-if-an-array-is-sorted-in-Java.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-4759185312267223060"},"published":{"$t":"2019-04-14T19:42:00.001-07:00"},"updated":{"$t":"2019-04-15T16:49:34.542-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Multithreading"}],"title":{"type":"text","$t":"Simple Deadlock Program in Java"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESimple java program to create Deadlock.\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003C!-- adsense --\u003EDeadlock describes a situation where two or more threads are blocked forever, waiting for each other.\u003Cbr \/\u003E\u003Cbr \/\u003ELet's consider an example, in the office we have shared Printer and Scanner where Employees has ability to do scanning and printing.\u003Cbr \/\u003E\u003Cbr \/\u003E1. \u003Cb\u003EJohn\u003C\/b\u003E has bunch of documents that it wants to Print first and also want to take a Scan later.\u003Cbr \/\u003E(Print and Scan)\u003Cbr \/\u003E2. \u003Cb\u003EMichael\u003C\/b\u003E has bunch of documents that it wants to Scan first and also want to take a Print later.\u003Cbr \/\u003E(Scan and Print)\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-YHj_IAZeHsY\/XLUYM43W4MI\/AAAAAAAACU0\/kNdXoWqUJKgG66KCHvS-4a5eqLqBq2LkACEwYBhgL\/s1600\/deadlock-program-in-java.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"254\" data-original-width=\"540\" height=\"150\" src=\"https:\/\/1.bp.blogspot.com\/-YHj_IAZeHsY\/XLUYM43W4MI\/AAAAAAAACU0\/kNdXoWqUJKgG66KCHvS-4a5eqLqBq2LkACEwYBhgL\/s320\/deadlock-program-in-java.png\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EDeadlock in java with Realtime example.\u0026nbsp;\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cpre class=\"brush: java\"\u003Epackage com.javabypatel.threading;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class DeadlockProgram {\u003Cbr \/\u003E    public static void main(String[] args) {\u003Cbr \/\u003E        Printer printer = new Printer();\u003Cbr \/\u003E        Scanner scanner = new Scanner();\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/John has bunch of documents that it wants to Print and also want to take a scan later\u003Cbr \/\u003E        new Thread (new PrintAndScan(printer, scanner), \"John\").start();\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Michael has bunch of documents that it wants to Scan and also want to take a print later\u003Cbr \/\u003E        new Thread (new ScanAndPrint(printer, scanner), \"Michael\").start();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/Thread which take multiple documents and for each document it does the Printing first and then Scans the document\u003Cbr \/\u003E\/\/So it requires two resource Printer and Scanner.\u003Cbr \/\u003Eclass PrintAndScan implements Runnable {\u003Cbr \/\u003E    Printer printer;\u003Cbr \/\u003E    Scanner scanner;\u003Cbr \/\u003E\u003Cbr \/\u003E    public PrintAndScan (Printer printer, Scanner scanner) {\u003Cbr \/\u003E        this.printer = printer;\u003Cbr \/\u003E        this.scanner = scanner;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void run() {\u003Cbr \/\u003E        \/\/Do printing and scanning simultaneously.\u003Cbr \/\u003E        synchronized (printer) {\u003Cbr \/\u003E            System.out.println(\"Thread \"+Thread.currentThread().getName() + \" acquired printer\");\u003Cbr \/\u003E            try {\u003Cbr \/\u003E                \/\/Do printing work\u003Cbr \/\u003E                Thread.sleep(1000);\u003Cbr \/\u003E            } catch (InterruptedException e) {\u003Cbr \/\u003E                e.printStackTrace();\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            \/\/Scan the documents already printed\u003Cbr \/\u003E            System.out.println(\"Thread \"+Thread.currentThread().getName() + \" is waiting for scanner\");\u003Cbr \/\u003E            synchronized (scanner) {\u003Cbr \/\u003E                System.out.println(\"Thread \"+Thread.currentThread().getName() + \" is scanning\");\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/Thread which take multiple documents and for each document it does the Scanning first and then Prints the document\u003Cbr \/\u003E\/\/So it requires two resource Scanner and Printer.\u003Cbr \/\u003Eclass ScanAndPrint implements Runnable {\u003Cbr \/\u003E    Printer printer;\u003Cbr \/\u003E    Scanner scanner;\u003Cbr \/\u003E\u003Cbr \/\u003E    public ScanAndPrint (Printer printer, Scanner scanner) {\u003Cbr \/\u003E        this.printer = printer;\u003Cbr \/\u003E        this.scanner = scanner;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void run() {\u003Cbr \/\u003E        \/\/Do scanning and printing simultaneously.\u003Cbr \/\u003E        synchronized (scanner) {\u003Cbr \/\u003E            System.out.println(\"Thread \"+Thread.currentThread().getName() + \" acquired scanner\");\u003Cbr \/\u003E            try {\u003Cbr \/\u003E                \/\/Do scanning work\u003Cbr \/\u003E                Thread.sleep(1000);\u003Cbr \/\u003E            } catch (InterruptedException e) {\u003Cbr \/\u003E                e.printStackTrace();\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            \/\/Scan the documents already printed\u003Cbr \/\u003E            System.out.println(\"Thread \"+Thread.currentThread().getName() + \" is waiting for printer\");\u003Cbr \/\u003E            synchronized (printer) {\u003Cbr \/\u003E                System.out.println(\"Thread \"+Thread.currentThread().getName() + \" is printing\");\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/Shared Resources\u003Cbr \/\u003Eclass Printer {}\u003Cbr \/\u003Eclass Scanner {}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cb\u003EOutput:\u003C\/b\u003E\u003Cbr \/\u003EThread John acquired printer\u003Cbr \/\u003EThread Michael acquired scanner\u003Cbr \/\u003EThread John is waiting for scanner\u003Cbr \/\u003EThread Michael is waiting for printer\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #444444;\"\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr style=\"text-align: left;\" \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"https:\/\/javabypatel.blogspot.com\/2015\/12\/merge-sort-linked-list.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESort Linked list using Merge sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/01\/bubble-sort.html\" target=\"_blank\"\u003EBubble Sort\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/11\/heap-sort-algorithm.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHeap Sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/01\/selection-sort.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESelection Sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/01\/insertion-sort.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EInsertion Sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Chr style=\"text-align: left;\" \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/09\/concurrenthashmap-interview-questions.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow ConcurrentHashMap works and ConcurrentHashMap interview questions\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/10\/trapping-rain-water-between-towers.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow Much Water Can A Bar Graph with different heights can Hold\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/search\/label\/Interviews\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EInterview Questions-Answer Bank\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/4759185312267223060\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/04\/simple-deadlock-program-in-java.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/4759185312267223060"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/4759185312267223060"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/04\/simple-deadlock-program-in-java.html","title":"Simple Deadlock Program in Java"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-YHj_IAZeHsY\/XLUYM43W4MI\/AAAAAAAACU0\/kNdXoWqUJKgG66KCHvS-4a5eqLqBq2LkACEwYBhgL\/s72-c\/deadlock-program-in-java.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-2613782704115056896"},"published":{"$t":"2019-04-14T10:25:00.001-07:00"},"updated":{"$t":"2019-04-14T10:29:14.491-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Multithreading"}],"title":{"type":"text","$t":"Difference between process and thread "},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EDifference between process and thread.\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003EPoint 1:\u003Cbr \/\u003EA process is an executing instance of an application.\u003Cbr \/\u003EThread is independent path of execution within a process. Process can have multiple threads,\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/3.bp.blogspot.com\/-bh8ZaglaGug\/XLNrYg5mKYI\/AAAAAAAACUk\/TVHKOLUScCIqrnedvMAHj1LWZFUOW-lhwCLcBGAs\/s1600\/difference-between-process-and-thread.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"318\" data-original-width=\"584\" height=\"174\" src=\"https:\/\/3.bp.blogspot.com\/-bh8ZaglaGug\/XLNrYg5mKYI\/AAAAAAAACUk\/TVHKOLUScCIqrnedvMAHj1LWZFUOW-lhwCLcBGAs\/s320\/difference-between-process-and-thread.png\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EPoint 2:\u003Cbr \/\u003E\u003C!-- adsense --\u003EThreads itself is capable enough to do all the things a process does and thread is a part of process that is why thread can be termed as light-weight process.\u003Cbr \/\u003E\u003Cbr \/\u003EPoint 3:\u003Cbr \/\u003ESince all the Threads are part of a same Process they all share same memory allocated by Process.\u003Cbr \/\u003EProcess use memory allocated by OS.\u003Cbr \/\u003E\u003Cbr \/\u003EPoint 4:\u003Cbr \/\u003EInter-thread communication between threads is easy whereas Inter-process communication is difficult.\u003Cbr \/\u003E\u003Cbr \/\u003EPoint 5:\u003Cbr \/\u003EProcesses have independent data and code segments.\u003Cbr \/\u003EThread shares the data segment, code segment, files etc. with its peer threads.\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003EPoint 6:\u003C\/div\u003E\u003Cdiv\u003EProcess switching is complex as compared to thread switching because of the amount of variables need to be maintained in both of the case.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable border=\"1\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth\u003E\u003Cspan style=\"text-align: left;\"\u003EPer process items\u003C\/span\u003E\u003C\/th\u003E\u003Cth\u003E\u003Cspan style=\"text-align: left;\"\u003EPer thread items\u003C\/span\u003E\u003C\/th\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003EAddress space\u0026nbsp;\u003C\/td\u003E\u003Ctd\u003EProgram counter\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003EGlobal variables\u003C\/td\u003E\u003Ctd\u003ERegisters\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003EOpen files\u003C\/td\u003E\u003Ctd\u003EStack\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003EChild processes\u003C\/td\u003E\u003Ctd\u003EState\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003EPending alarms\u003C\/td\u003E\u003Ctd\u003E\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003ESignals and signal handlers\u003C\/td\u003E\u003Ctd\u003E\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd\u003EAccounting information\u003C\/td\u003E\u003Ctd\u003E\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr style=\"text-align: left;\" \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"https:\/\/javabypatel.blogspot.com\/2015\/12\/merge-sort-linked-list.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESort Linked list using Merge sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/01\/bubble-sort.html\" target=\"_blank\"\u003EBubble Sort\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/11\/heap-sort-algorithm.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHeap Sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/01\/selection-sort.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESelection Sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/01\/insertion-sort.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EInsertion Sort\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Chr style=\"text-align: left;\" \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/09\/concurrenthashmap-interview-questions.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow ConcurrentHashMap works and ConcurrentHashMap interview questions\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/10\/trapping-rain-water-between-towers.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow Much Water Can A Bar Graph with different heights can Hold\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/search\/label\/Interviews\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EInterview Questions-Answer Bank\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/2613782704115056896\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/04\/process-vs-thread.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/2613782704115056896"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/2613782704115056896"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/04\/process-vs-thread.html","title":"Difference between process and thread "}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/3.bp.blogspot.com\/-bh8ZaglaGug\/XLNrYg5mKYI\/AAAAAAAACUk\/TVHKOLUScCIqrnedvMAHj1LWZFUOW-lhwCLcBGAs\/s72-c\/difference-between-process-and-thread.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-7113801474388396151"},"published":{"$t":"2019-03-27T15:55:00.001-07:00"},"updated":{"$t":"2019-03-27T15:55:39.505-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Multithreading"}],"title":{"type":"text","$t":"Difference between CountDownLatch and CyclicBarrier in Java"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EDifference between CountDownLatch and CyclicBarrier in Java?\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cb\u003E\u003Cu\u003EDifference 1:\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EIn CountDownLatch, main thread which mostly invokes latch.await() waits for other threads to call countDown() and count reaches 0. In CyclicBarrier, threads wait for each other to complete their execution and reach at common point after which barrier is opened.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/3.bp.blogspot.com\/-gOLKqgBI6KY\/XJvZme7t0dI\/AAAAAAAACQM\/tVYkPGFOB9YanYUU095GXLLpRsF3cF5cQCEwYBhgL\/s1600\/reentrant-lock-multithreading.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"363\" data-original-width=\"306\" height=\"320\" src=\"https:\/\/3.bp.blogspot.com\/-gOLKqgBI6KY\/XJvZme7t0dI\/AAAAAAAACQM\/tVYkPGFOB9YanYUU095GXLLpRsF3cF5cQCEwYBhgL\/s320\/reentrant-lock-multithreading.png\" width=\"269\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003ENote in CountDownLatch, it is not necessary same thread calls latch.countDown() 10 times or 10 threads calling latch.countDown and making the counter 0 but in case of CyclicBarrier different threads should reach at the common barrier point.\u003Cbr \/\u003E\u003Cbr \/\u003ELet's see example of CyclicBarrier\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003Epackage com.javabypatel.practice;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.concurrent.CyclicBarrier;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class CyclicBarrierExample {\u003Cbr \/\u003E    \u003Cbr \/\u003E    public static void main(String args[]) {\u003Cbr \/\u003E        final CyclicBarrier cb = new CyclicBarrier(3, new Runnable(){\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void run(){\u003Cbr \/\u003E                System.out.println(\"Start the Game\");\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003Cbr \/\u003E        Thread player1 = new Thread(new Player(cb), \"Thread1\");\u003Cbr \/\u003E        Thread player2 = new Thread(new Player(cb), \"Thread2\");\u003Cbr \/\u003E        Thread player3 = new Thread(new Player(cb), \"Thread3\");\u003Cbr \/\u003E\u003Cbr \/\u003E        player1.start();\u003Cbr \/\u003E        player2.start();\u003Cbr \/\u003E        player3.start();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Eclass Player implements Runnable {\u003Cbr \/\u003E\u003Cbr \/\u003E    private CyclicBarrier barrier;\u003Cbr \/\u003E    public Player(CyclicBarrier barrier) {\u003Cbr \/\u003E        this.barrier = barrier;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void run() {\u003Cbr \/\u003E        try {\u003Cbr \/\u003E            System.out.println(Thread.currentThread().getName() + \" is waiting on barrier\");\u003Cbr \/\u003E            barrier.await();\u003Cbr \/\u003E            System.out.println(Thread.currentThread().getName() + \" has passed the barrier\");\u003Cbr \/\u003E        } catch (Exception ex) {\u003Cbr \/\u003E            ex.printStackTrace();\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003EOutput:\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003EThread1 is waiting on barrier\u003Cbr \/\u003EThread2 is waiting on barrier\u003Cbr \/\u003EThread3 is waiting on barrier\u003Cbr \/\u003EStart the Game\u003Cbr \/\u003EThread3 has passed the barrier\u003Cbr \/\u003EThread2 has passed the barrier\u003Cbr \/\u003EThread1 has passed the barrier\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003EDifference 2:\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ECountDownLatch can not be reused once count reaches 0. CyclicBarrier can be reinitialized once parties reaches 0.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cu\u003E\u003Cb\u003EDifference 3:\u003C\/b\u003E\u003C\/u\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ECountDownLatch calls countDown() method to reduce the counter where as CyclicBarrier calls await() method to reduce the counter. Note, await() method blocks the thread from further execution until all thread reaches to a common barrier, countDown() method doesn't block anything.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cu\u003E\u003Cb\u003EDifference 4:\u003C\/b\u003E\u003C\/u\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ECountDownLatch can not trigger common event when count reaches 0, that is when count reaches 0, it just unblocks the blocked thread and proceed with executing further instructions.\u003Cbr \/\u003E\u003Cbr \/\u003ECyclicBarrier can trigger common event (Runnable) once it reaches to a barrier point.\u003Cbr \/\u003EExample: refer above\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003EDifference 5:\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ECyclicBarrier is used for map-reduce kind of operations, like say we want to count population on India, so we will create say 4 threads which counts the population of East, West, North and South.\u003Cbr \/\u003E\u003Cbr \/\u003EEach thread will count the population of its Region, we also need to merge the result when data from all threads is ready until which merging cannot be done.\u003Cbr \/\u003E\u003Cbr \/\u003EWe can create a CyclicBarrier and block the thread after it finds the count, so all threads are blocked after counting the population of its respective region, once all thread reaches barrier, it is broken and merger(Runnable event) can be executed to count the population.\u003Cbr \/\u003E\u003Cbr \/\u003ECountDownLatch is used when we want all thread to reach at common event but doesn't necessarily want to block them at that point and they can proceed after signaling(latch.countDown()), Say for example, if we want to start the client file poller after database service(thread1) and ConnectionPoolService with 100 threads(thread2) is up, so we can wait for thread1 and thread2 to call countDown() after which blocked main thread can proceed with starting client file pooler.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/05\/important-java-multithreading-interview-questions-answers.html\" target=\"_blank\"\u003EAdvanced Java Multithreading Interview Questions \u0026amp; Answers\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/07\/type-casting-interview-questions-in-java.html\" target=\"_blank\"\u003EType Casting Interview Questions and Answers In Java?\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/05\/exception-handling-interview-questions.html\" target=\"_blank\"\u003EException Handling Interview Question-Answer\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/04\/java-interview-questions.html\" target=\"_blank\"\u003EMethod Overloading - Method Hiding Interview Question-Answer\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/05\/ambiguous-method-overloading.html\" target=\"_blank\"\u003EHow is ambiguous overloaded method call resolved in java?\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/08\/method-overriding-rules-java.html\" target=\"_blank\"\u003EMethod Overriding rules in Java\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/09\/java-interface-interview-questions-in-java.html\" target=\"_blank\"\u003EInterface interview questions and answers in Java\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/7113801474388396151\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/03\/difference-between-countdownlatch-and-cyclicbarrier-in-java.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/7113801474388396151"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/7113801474388396151"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/03\/difference-between-countdownlatch-and-cyclicbarrier-in-java.html","title":"Difference between CountDownLatch and CyclicBarrier in Java"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/3.bp.blogspot.com\/-gOLKqgBI6KY\/XJvZme7t0dI\/AAAAAAAACQM\/tVYkPGFOB9YanYUU095GXLLpRsF3cF5cQCEwYBhgL\/s72-c\/reentrant-lock-multithreading.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-6667360695517893000"},"published":{"$t":"2019-03-27T14:27:00.001-07:00"},"updated":{"$t":"2019-03-27T14:27:35.904-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Multithreading"}],"title":{"type":"text","$t":"Difference between Join and CountDownLatch in Java"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EDifference between Join and CountDownLatch?\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cb\u003E\u003Cu\u003E\u003Cbr \/\u003E\u003C\/u\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cu\u003EDifference 1:\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EThread join method waits for other thread to finish before further executing current thread.\u003Cbr \/\u003EIf t1.join is called in main thread, then main thread will wait at that point until t1 finishes its job.\u003Cbr \/\u003E\u003Cbr \/\u003ECountDownLatch on the other end wait for its counter to reach 0 before executing current thread.\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003EExecutorService service = Executors.newFixedThreadPool(5);\u003Cbr \/\u003Efinal CountDownLatch latch = new CountDownLatch(3);\u003Cbr \/\u003E\u003Cbr \/\u003Efor(int i = 0; i \u0026lt; 5; i++) {\u003Cbr \/\u003E    service.submit(new Runnable() {\u003Cbr \/\u003E        public void run() {\u003Cbr \/\u003E            latch.countDown();\u003Cbr \/\u003E        }\u003Cbr \/\u003E    });\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Elatch.await();\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003EWhen latch.countDown is called, associated counter will be decremented and as soon as it reaches 0, main thread which was blocked at line latch.await() proceeds further.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ENote:\u003Cbr \/\u003EThread join method wait for joined thread to finish the execution before the main thread on which join method is called to starts its execution. Whereas in CountDownLatch, latch.await doesn't wait for the thread that calls latch.countDown() to be finished, it proceeds once the counter value reaches 0 and it has no association with the state of the thread that calls countDown().\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/4.bp.blogspot.com\/-gOLKqgBI6KY\/XJvZme7t0dI\/AAAAAAAACQI\/KXpf9g_t77AdVYhrK9LC8hPT4fa8DbEvwCLcBGAs\/s1600\/reentrant-lock-multithreading.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em; text-align: center;\"\u003E\u003Cimg border=\"0\" data-original-height=\"363\" data-original-width=\"306\" height=\"320\" src=\"https:\/\/4.bp.blogspot.com\/-gOLKqgBI6KY\/XJvZme7t0dI\/AAAAAAAACQI\/KXpf9g_t77AdVYhrK9LC8hPT4fa8DbEvwCLcBGAs\/s320\/reentrant-lock-multithreading.png\" width=\"268\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: justify;\"\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003EDifference 2:\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003E\u003Cbr \/\u003E\u003C\/u\u003E\u003C\/b\u003EWe can call join method when we have control over the threads but while using ExecutorService we don't have control over individual threads instead we deal with just submitting the task to framework and it internally manages threads in this situation using CountDownLatch is right approach.\u003Cbr \/\u003E\u003Cbr \/\u003EExample above in difference 1 can be used as Reference.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003EUsage:\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003EExample 1:\u003C\/b\u003E\u003Cbr \/\u003ECountDownLatch is useful in Multiplayer games, Lets say we have a online chess game that can only be played when two player joins, in this case we will initialize the CountDownLatch to 2 and starts the game only after 2 threads(player) joins(calls countDown()).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003EExample 2:\u003C\/b\u003E\u003Cbr \/\u003ELets say we have some Timer task that we want to start only after all the modules of the application get loaded or when all the services is up.\u003Cbr \/\u003E\u0026nbsp;\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/05\/important-java-multithreading-interview-questions-answers.html\" target=\"_blank\"\u003EAdvanced Java Multithreading Interview Questions \u0026amp; Answers\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/07\/type-casting-interview-questions-in-java.html\" target=\"_blank\"\u003EType Casting Interview Questions and Answers In Java?\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/05\/exception-handling-interview-questions.html\" target=\"_blank\"\u003EException Handling Interview Question-Answer\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/04\/java-interview-questions.html\" target=\"_blank\"\u003EMethod Overloading - Method Hiding Interview Question-Answer\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/05\/ambiguous-method-overloading.html\" target=\"_blank\"\u003EHow is ambiguous overloaded method call resolved in java?\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/08\/method-overriding-rules-java.html\" target=\"_blank\"\u003EMethod Overriding rules in Java\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/09\/java-interface-interview-questions-in-java.html\" target=\"_blank\"\u003EInterface interview questions and answers in Java\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/6667360695517893000\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/03\/difference-between-join-and-countdownlatch-in-java.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/6667360695517893000"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/6667360695517893000"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/03\/difference-between-join-and-countdownlatch-in-java.html","title":"Difference between Join and CountDownLatch in Java"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/4.bp.blogspot.com\/-gOLKqgBI6KY\/XJvZme7t0dI\/AAAAAAAACQI\/KXpf9g_t77AdVYhrK9LC8hPT4fa8DbEvwCLcBGAs\/s72-c\/reentrant-lock-multithreading.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-4846603770918364940"},"published":{"$t":"2019-03-27T13:11:00.001-07:00"},"updated":{"$t":"2019-04-09T23:24:09.975-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Multithreading"}],"title":{"type":"text","$t":"ReentrantLock interview questions in Java"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148);\"\u003EReentrantLock interview questions in Java\u003C\/span\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003EReentrant lock is more feature rich than using synchronized method\/block.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EUsing synchronized method\/block, locking acquisition\/releasing is actually handled internally but with\u0026nbsp;Reentrant Lock power is given to programmer by\u0026nbsp;explicitly calling lock and unlock method, so there is both advantages and disadvantages of this power.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/4.bp.blogspot.com\/-gOLKqgBI6KY\/XJvZme7t0dI\/AAAAAAAACQI\/KXpf9g_t77AdVYhrK9LC8hPT4fa8DbEvwCLcBGAs\/s1600\/reentrant-lock-multithreading.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"363\" data-original-width=\"306\" height=\"320\" src=\"https:\/\/4.bp.blogspot.com\/-gOLKqgBI6KY\/XJvZme7t0dI\/AAAAAAAACQI\/KXpf9g_t77AdVYhrK9LC8hPT4fa8DbEvwCLcBGAs\/s320\/reentrant-lock-multithreading.png\" width=\"268\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"font-size: medium;\"\u003EWhat is the difference between ReentrantLock\u0026nbsp;and Synchronized keyword in Java?\u003C\/span\u003E\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394; font-size: 18px;\"\u003E\u003Cu\u003ETime to wait for getting a Lock:\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003EWhen thread 1 tries to call any synchronized method or synchronized block, It has to wait until some other thread 2 release the lock on the same monitor. What if the other thread 2 doesn't release the monitor due to xyz reason, How much time thread 1 has to wait, there is no control to the programmer till when Thread 1 will be waiting.\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394; font-size: medium;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003EUsing ReentrantLock which was introduced in jdk1.5 under java.util.concurrent.locks package, We can provide the timeout till when thread should wait for getting the lock and after that time thread will proceed with normal execution. this will give more control to threads while waiting for a lock instead of indefinitely waiting till lock is acquired.\u003Cbr \/\u003E\u003Cbr \/\u003Eprivate final Lock lock = new ReentrantLock();\u003Cbr \/\u003Elock.tryLock(long timeout, TimeUnit unit)\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003Epackage com;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.Random;\u003Cbr \/\u003Eimport java.util.concurrent.TimeUnit;\u003Cbr \/\u003Eimport java.util.concurrent.locks.ReentrantLock;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class ThreadSafeArrayList\u0026lt;E\u0026gt; {\u003Cbr \/\u003E    public static void main(String[] args) throws Exception {\u003Cbr \/\u003E        final ReentrantLock lock1 = new ReentrantLock();\u003Cbr \/\u003E        final ReentrantLock lock2 = new ReentrantLock();\u003Cbr \/\u003E\u003Cbr \/\u003E        String printerLock = \"PrinterLock\";\u003Cbr \/\u003E        String scannerLock = \"ScannerLock\";\u003Cbr \/\u003E\u003Cbr \/\u003E        Runnable try1_2 = getRunnable(lock1, printerLock, lock2, scannerLock);\u003Cbr \/\u003E        Runnable try2_1 = getRunnable(lock2, scannerLock, lock1, printerLock);\u003Cbr \/\u003E        Thread t1 = new Thread(try1_2);\u003Cbr \/\u003E        t1.start();\u003Cbr \/\u003E        Thread t2 = new Thread(try2_1);\u003Cbr \/\u003E        t2.start();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private static Runnable getRunnable(final ReentrantLock lock1, final String lock1Name,\u003Cbr \/\u003E        final ReentrantLock lock2, final String lock2Name) {\u003Cbr \/\u003E        return new Runnable() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void run() {\u003Cbr \/\u003E                try {\u003Cbr \/\u003E                    if (lock1.tryLock(5, TimeUnit.SECONDS)) {\u003Cbr \/\u003E                        System.out.println(lock1Name + \" acquired by thread \" + Thread.currentThread());\u003Cbr \/\u003E\u003Cbr \/\u003E                        Random rand = new Random();\u003Cbr \/\u003E\u003Cbr \/\u003E                        if (lock2.tryLock(rand.nextInt(10), TimeUnit.SECONDS)) {\u003Cbr \/\u003E                            System.out.println(lock2Name + \" acquired by thread \" + Thread.currentThread());\u003Cbr \/\u003E                            Thread.sleep(2000);\u003Cbr \/\u003E                        } else {\u003Cbr \/\u003E                            System.out.println(\"Could not acquire \" + lock2Name + \" by thread \" + Thread.currentThread());\u003Cbr \/\u003E                            lock1.unlock();\u003Cbr \/\u003E                            System.out.println(lock1Name + \" released by thread \" + Thread.currentThread());\u003Cbr \/\u003E                        }\u003Cbr \/\u003E                    } else {\u003Cbr \/\u003E                        System.out.println(\"Unable to acquire \" + lock1Name + \" by thread \" + Thread.currentThread());\u003Cbr \/\u003E                    }\u003Cbr \/\u003E                } catch (InterruptedException e) {\u003Cbr \/\u003E                    System.out.println(\"I am interrupted\" + Thread.currentThread());\u003Cbr \/\u003E                } finally {\u003Cbr \/\u003E                    if (lock1.isHeldByCurrentThread())\u003Cbr \/\u003E                        lock1.unlock();\u003Cbr \/\u003E                    if (lock2.isHeldByCurrentThread())\u003Cbr \/\u003E                        lock2.unlock();\u003Cbr \/\u003E                }\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cu\u003EFairness policy:\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhen thread 1 wants to call synchronized method or synchronized block, it has to first acquire the monitor and then only can enter inside synchronized area. If\u0026nbsp;monitor is acquired by other\u0026nbsp;thread 2 then thread 1 has to wait,\u0026nbsp;similarly there can be many threads(thread 1, thread 5, thread 8 etc) waiting for the same monitor.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhat will happen when thread 2 release the lock on monitor, who will be the next to execute among\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148); color: #0b5394;\"\u003Ethread 1, thread 5, thread 8. No guarantee and that depends on scheduler and thread 5 might get monitor even though thread 1 is waiting for longest time.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148); color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003EIn ReentrantLock, while creating it, we can provide fairness property for making the lock fair. Fairness property provides lock to longest waiting thread, in case of contention. Threads get the lock in the order they requested it.\u003Cbr \/\u003E\u003Cbr \/\u003Eprivate final ReentrantLock lock = new ReentrantLock(true);\u003Cbr \/\u003ENote: Performance is degraded by fairness policy.\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003Cu\u003ELockInterruptibly\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148);\"\u003EWhen thread 1 calls the synchronized method or synchronized block, it will be blocked until lock on the monitor is available. programmer don't have control to resume the blocked thread.\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003EReentrantLock provides a method called lockInterruptibly(), which can be used to interrupt the thread when it is waiting for lock. so that it can no longer in blocked state indefinitely.\u003Cbr \/\u003E\u003Cbr \/\u003Evoid lockInterruptibly()\u003Cbr \/\u003EIf thread is able to acquire lock then this method increments lock hold count by 1.\u003Cbr \/\u003EIf the lock is with another thread then the current thread waits until it gets the lock or some other thread interrupts the thread.\u003Cbr \/\u003E\u003Cbr \/\u003EExample:\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003Epublic class LockInterruptiblyExample{\u003Cbr \/\u003E final ReentrantLock reentrantLock = new ReentrantLock();\u003Cbr \/\u003E \u003Cbr \/\u003E public void performTask() {\u003Cbr \/\u003E      try {\u003Cbr \/\u003E       reentrantLock.lockInterruptibly(); \/\/wait till thread get the lock or till other thread interrupts\u003Cbr \/\u003E         \/\/and you can control further execution from catch block\u003Cbr \/\u003E       try {\u003Cbr \/\u003E         \/\/.....\u003Cbr \/\u003E       } finally {\u003Cbr \/\u003E      reentrantLock.unlock();\u003Cbr \/\u003E       }\u003Cbr \/\u003E      } catch (InterruptedException e) {\u003Cbr \/\u003E       e.printStackTrace();\u003Cbr \/\u003E      }\u003Cbr \/\u003E }\u003Cbr \/\u003E} \u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cu\u003ENumber of Threads blocked on monitor:\u003C\/u\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EUsing synchronized\u0026nbsp;method or block doesn't provide any\u0026nbsp;\u003Cspan style=\"caret-color: rgb(11, 83, 148);\"\u003Emechanism to know how many threads are blocked to acquire a lock on monitor\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003EReentrant lock provides getQueueLength() method which return number of threads that may be waiting to acquire this lock in java.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003ELock Unlock in different scope\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003EWith Synchronized keyword, lock need to be acquired and released at complete method level or at block level. Lets say when thread t1 tries to acquire multiple locks by calling multiple synchronized method, in that case multiple locks are acquired by t1 and they must all be released in the opposite order.\u003Cbr \/\u003E\u003Cbr \/\u003EIn ReentrantLock, locks can be acquired and released in different scopes, and allowing multiple locks to be acquired and released in any order.\u003Cbr \/\u003E\u003Cbr \/\u003EExample:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003EReentrantLock reentrantLock;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic void getA() {\u003Cbr \/\u003E  reentrantLock.lock();\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Epublic void getB() {\u003Cbr \/\u003E  reentrantLock.unlock();\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003EMore than one waiting condition\u003C\/u\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003E\u003Cbr \/\u003E\u003C\/u\u003E\u003C\/b\u003EWhen lock is acquired using intrinsic lock by calling synchronized method\/block, this threads then communicate using wait(), notify() and notifyAll() methods of Object class. \u003Cbr \/\u003E\u003Cbr \/\u003ECondition allows inter thread communication when lock is acquired using extrinsic way by Lock interface. Condition defines methods such as await(), signal() and signalAll() for waiting and notifying.\u003Cbr \/\u003E\u003Cbr \/\u003EUsing synchronized block\/method for a common monitor, there is no way to distinguish for what reason each thread is waiting, thread t1, t2, t3 might be blocked say for putting the data in the queue, other threads say t5, t6, t7, t8 might be waiting for reading data from the queue and they all are waiting on common monitor \"queue\".\u003Cbr \/\u003E\u003Cbr \/\u003ELets consider producer consumer situation, say we have a queue of size one and is full and t1, t2, t3 is blocked for putting the data in the queue, so they are in waiting state.\u003Cbr \/\u003ENow, t5, t6, t7, t8 tries to read data from the queue, lets say t5 would be reading the data in the queue, meanwhile t6, t7, t8 would be in waiting state.\u003Cbr \/\u003E\u003Cbr \/\u003EAfter t5 read the data from the queue, it calls notifyAll, this call is to notify producers(t1,t2,t3) to put the data in the queue as there is a space now,\u003Cbr \/\u003Ethere are total 6 threads waiting for monitor \"queue\"\u003Cbr \/\u003Eputting data in queue = t1, t2, t3,\u003Cbr \/\u003Ereading data from queue = t4, t6, t7\u003Cbr \/\u003Ecurrently monitor is held by executing thread = t5\u003Cbr \/\u003E\u003Cbr \/\u003Ewhen t5 calls notifyAll, there is no guarantee who is going to be wake up, might be thread t7 wake up and it has to go back to waiting state again as nothing is there to read, next time might be t4 gets a chance and again no use of t4 wakeup and it will go back to waiting state.\u003Cbr \/\u003EWhen someone from t1, t2 or t3 wakes up then only things would proceed.\u003Cbr \/\u003E\u003Cbr \/\u003EIf there is a way for t5 thread to notifyAll only to threads that want to put data to queue t1, t2 and t3 then it would be helpful. Using Condition that is possible.\u003Cbr \/\u003E\u003Cbr \/\u003EWith intrinsic lock using synchronized method\/block there is no way to group the waiting threads waiting on a common monitor. with Condition, we can create multiple wait sets.\u003Cbr \/\u003E\u003Cbr \/\u003EWhen you use Condition: await()\/signal() you can distinguish which object or group of objects\/threads get a specific signal.\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003EUsing Condition, we now have way to create more than one condition variable per monitor.\u003Cbr \/\u003EMonitors that use the synchronized keyword can only have one. This means Reentrant locks(implementation of Lock interface) support more than one wait()\/notify() queue.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003E    private final Lock lock = new ReentrantLock();\u003Cbr \/\u003E    private final Condition queueEmpty = lock.newCondition();\u003Cbr \/\u003E    private final Condition queueFull = lock.newCondition();\u003Cbr \/\u003E\u003Cbr \/\u003E    public void putData(int data) {\u003Cbr \/\u003E        lock.lock();\u003Cbr \/\u003E        try {\u003Cbr \/\u003E            while (queue is empty) {\u003Cbr \/\u003E                queueEmpty.await();\u003Cbr \/\u003E            }\u003Cbr \/\u003E            this.data = data;\u003Cbr \/\u003E            queueFull.signalAll();\u003Cbr \/\u003E                      \u003Cbr \/\u003E        } finally {\u003Cbr \/\u003E            lock.unlock();\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void getData() {\u003Cbr \/\u003E        lock.lock();\u003Cbr \/\u003E        try {\u003Cbr \/\u003E            while (queue is full) {\u003Cbr \/\u003E                queueFull.await();\u003Cbr \/\u003E            }\u003Cbr \/\u003E            queueEmpty.signalAll();\u003Cbr \/\u003E        } finally {\u003Cbr \/\u003E            lock.unlock();\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003ENow with queueFull.signalAll(), only threads those are waiting for this condition on same monitor \"lock\" will be awaked and rest will still be waiting.\u003Cbr \/\u003E\u003Cbr \/\u003ECondition interface also comes with useful method that is:\u003Cbr \/\u003Eboolean awaitUntil(Date deadline): Causes the current thread to wait until it is signaled or interrupted, or the specified deadline elapses.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cu\u003ENote: \u003C\/u\u003Ethere is similar method wait(long timeInMilliseconds), but when there is System date change, above method will have impact while wait will keep waiting for provided timeInMilliseconds. So decide which is better in your situation.\u003Cbr \/\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EQuestion 2. \u003C\/b\u003EDoes synchronized method and block are reentrant?\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EYes. synchronized method, synchronized block and Reentrant lock are all reentrant in nature.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhat is the meaning of Reentrant?\u003C\/span\u003E\u003Cbr \/\u003EA reentrant lock is one where a process can claim the lock multiple times without blocking on itself.\u003Cbr \/\u003EIn simple terms, ability to call the same synchronized method again and again without getting blocked is called reentrant.\u003Cbr \/\u003E\u003Cbr \/\u003ELets understand with example,\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003Esynchronized  void getA () {\u003Cbr \/\u003E    getB();\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Esynchronized void getB () {\u003Cbr \/\u003E    getA();\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhat will happen if say Thread 1 calls obj.getA(), thread 1 will \u0026nbsp;acquire a lock on obj and call method getA(). inside which it calls getB()(which is obj.getB()), thread 1 already hold the lock on obj so it will call getB(),\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EgetB() call getA()(which is obj.getA()), thread 1 already hold a lock on obj so it is allowed to call the method getA() again. this is called Reentrant. same lock is claimed multiple times that is each time getA is called.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EQuestion 3. \u003C\/b\u003EShow simple example on how to write lock and unlock method of Reentrant Lock?\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003Epublic void getA() { \u003Cbr \/\u003E      reentrantLock.lock(); \u003Cbr \/\u003E      try{ \u003Cbr \/\u003E          \/\/...\u003Cbr \/\u003E      } catch(Exception e) { \u003Cbr \/\u003E          e.printStackTrace(); \u003Cbr \/\u003E      } finally { \u003Cbr \/\u003E          reentrantLock.unlock(); \u003Cbr \/\u003E      }     \u003Cbr \/\u003E} \u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EQuestion 4.\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003EWhy ReentrantLock is called ReentrantLock?\u003Cbr \/\u003E\u003Cbr \/\u003EReentrantLock keep track of lock acquisition count associated with the lock.\u003Cbr \/\u003Ewhen a call reentrantLock.lock() is made to acquire a lock and if the lock is obtained then the acquisition count variable is incremented to 1, stating that lock has been acquired one time till now.\u003Cbr \/\u003E\u003Cbr \/\u003ESimilarly, when a call reentrantLock.unlock() is made acquisition count variable is decremented by 1.\u003Cbr \/\u003EWhen the count reaches 0 then only other thread will be allowed to take the lock.\u003Cbr \/\u003E\u003Cbr \/\u003EWhen a thread t1 acquires a reentrant lock inside method say getA() and make a call to another method say getB() from inside getA() which is also guarded by reentrant lock, in this case thread t1 will acquire a lock twice one for getA() method and one for getB() method. In this case, if a thread t1 that is already holding a lock is now acquiring it again inside getB(), the acquisition count is incremented to 2 and now the lock needs to be released twice to fully release the lock.\u003Cbr \/\u003E\u003Cbr \/\u003ELet's see sample program,\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003Epackage com.javabypatel.concurrency;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.concurrent.locks.ReentrantLock;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class ReentrantLockExample {\u003Cbr \/\u003E    public static void main(String[] args) {\u003Cbr \/\u003E        ReentrantLock reentrantLock = new ReentrantLock();\u003Cbr \/\u003E\u003Cbr \/\u003E        Thread t1 = new Thread(new Printer(\"Thread1\", reentrantLock));\u003Cbr \/\u003E        Thread t2 = new Thread(new Printer(\"Thread2\", reentrantLock));\u003Cbr \/\u003E\u003Cbr \/\u003E        t1.start();\u003Cbr \/\u003E        t2.start();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Eclass Printer implements Runnable {\u003Cbr \/\u003E\u003Cbr \/\u003E    private String threadName;\u003Cbr \/\u003E    private ReentrantLock reentrantLock;\u003Cbr \/\u003E\u003Cbr \/\u003E    Printer(String threadName, ReentrantLock reentrantLock) {\u003Cbr \/\u003E        this.threadName = threadName;\u003Cbr \/\u003E        this.reentrantLock = reentrantLock;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void run() {\u003Cbr \/\u003E        System.out.println(\"Thread \" + threadName + \" is waiting to get lock\");\u003Cbr \/\u003E        reentrantLock.lock();\u003Cbr \/\u003E        try {\u003Cbr \/\u003E            System.out.println(\"Thread \" + threadName + \" acquired lock\");\u003Cbr \/\u003E            getA();\u003Cbr \/\u003E        } finally {\u003Cbr \/\u003E            reentrantLock.unlock();\u003Cbr \/\u003E            System.out.println(\"Thread \" + threadName + \" released the lock and the lock held count is :\"+reentrantLock.getHoldCount());\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void getA() {\u003Cbr \/\u003E        System.out.println(\"getA :: Thread \" + threadName + \" is waiting to get lock\");\u003Cbr \/\u003E        try {\u003Cbr \/\u003E            reentrantLock.lock();\u003Cbr \/\u003E            System.out.println(\"getA :: Thread \" + threadName + \" acquired lock\");\u003Cbr \/\u003E            System.out.println(\"getA :: Lock count held by thread \" + threadName + \" : \" + reentrantLock.getHoldCount());\u003Cbr \/\u003E\u003Cbr \/\u003E        } finally {\u003Cbr \/\u003E            reentrantLock.unlock();\u003Cbr \/\u003E            System.out.println(\"getA :: Thread \" + threadName + \" released the lock and the lock held count is :\"+reentrantLock.getHoldCount());\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EOutput:\u003Cbr \/\u003E\u003Cbr \/\u003EThread Thread1 is waiting to get lock\u003Cbr \/\u003EThread Thread1 acquired lock\u003Cbr \/\u003EgetA :: Thread Thread1 is waiting to get lock\u003Cbr \/\u003EgetA :: Thread Thread1 acquired lock\u003Cbr \/\u003EgetA :: Lock count held by thread Thread1 : 2\u003Cbr \/\u003EgetA :: Thread Thread1 released the lock and the lock held count is :1\u003Cbr \/\u003EThread Thread1 released the lock and the lock held count is :0\u003Cbr \/\u003EThread Thread2 is waiting to get lock\u003Cbr \/\u003EThread Thread2 acquired lock\u003Cbr \/\u003EgetA :: Thread Thread2 is waiting to get lock\u003Cbr \/\u003EgetA :: Thread Thread2 acquired lock\u003Cbr \/\u003EgetA :: Lock count held by thread Thread2 : 2\u003Cbr \/\u003EgetA :: Thread Thread2 released the lock and the lock held count is :1\u003Cbr \/\u003EThread Thread2 released the lock and the lock held count is :0\u003Cbr \/\u003E\u003Cbr \/\u003EYou can see lock held count should go back to 0 for another thread to acquire a lock.\u003Cbr \/\u003E\u003Chr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/05\/important-java-multithreading-interview-questions-answers.html\" target=\"_blank\"\u003EAdvanced Java Multithreading Interview Questions \u0026amp; Answers\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/07\/type-casting-interview-questions-in-java.html\" target=\"_blank\"\u003EType Casting Interview Questions and Answers In Java?\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/05\/exception-handling-interview-questions.html\" target=\"_blank\"\u003EException Handling Interview Question-Answer\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/04\/java-interview-questions.html\" target=\"_blank\"\u003EMethod Overloading - Method Hiding Interview Question-Answer\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/05\/ambiguous-method-overloading.html\" target=\"_blank\"\u003EHow is ambiguous overloaded method call resolved in java?\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/08\/method-overriding-rules-java.html\" target=\"_blank\"\u003EMethod Overriding rules in Java\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/09\/java-interface-interview-questions-in-java.html\" target=\"_blank\"\u003EInterface interview questions and answers in Java\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/4846603770918364940\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/03\/reentrantlock-interview-questions-in-java.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/4846603770918364940"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/4846603770918364940"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/03\/reentrantlock-interview-questions-in-java.html","title":"ReentrantLock interview questions in Java"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/4.bp.blogspot.com\/-gOLKqgBI6KY\/XJvZme7t0dI\/AAAAAAAACQI\/KXpf9g_t77AdVYhrK9LC8hPT4fa8DbEvwCLcBGAs\/s72-c\/reentrant-lock-multithreading.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-7113971630544055580"},"published":{"$t":"2019-03-08T23:48:00.002-08:00"},"updated":{"$t":"2019-03-09T00:07:50.768-08:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"}],"title":{"type":"text","$t":"How Comparable and Comparator works internally in Java"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow Comparable and Comparator works internally in Java\u0026nbsp;\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIn Java, Comparable and Comparator are used for sorting collection of objects.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/2.bp.blogspot.com\/-U_9LZNH7xJM\/XIN0CUZGgNI\/AAAAAAAACPQ\/ypZCrWyVNnMfbowwrwwEwv5fdtiLm6JZwCLcBGAs\/s1600\/how-comparator-comparable-works-internally-in-java.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"178\" data-original-width=\"822\" height=\"137\" src=\"https:\/\/2.bp.blogspot.com\/-U_9LZNH7xJM\/XIN0CUZGgNI\/AAAAAAAACPQ\/ypZCrWyVNnMfbowwrwwEwv5fdtiLm6JZwCLcBGAs\/s640\/how-comparator-comparable-works-internally-in-java.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C!-- adsense --\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Ci\u003E\u003Cu\u003Ejava.lang.Comparable\u003C\/u\u003E\u003C\/i\u003E\u003C\/b\u003E is used to sort collection of same types(classes) like\u0026nbsp;\u003Cstudent\u003E\u003Cstudent\u003E\u003Cemployee\u003E\u003Coranges\u003E\u003Corange\u003E\u003Cemployee\u003EList\u0026lt;Student\u0026gt;, List\u0026lt;Employee\u0026gt;, List\u0026lt;Orange\u0026gt;, It means Comparable is like \"I can compare myself with another object of same type\".\u003C\/employee\u003E\u003C\/orange\u003E\u003C\/oranges\u003E\u003C\/employee\u003E\u003C\/student\u003E\u003C\/student\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EExample: if we want to sort List\u0026lt;Student\u0026gt;\u003Cstudent\u003E\u003Cstudents\u003E\u0026nbsp;based on roll number or their first name etc.\u003C\/students\u003E\u003C\/student\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cu\u003E\u003Cb\u003E\u003Ci\u003Ejava.util.Comparator\u003C\/i\u003E\u003C\/b\u003E \u003C\/u\u003Eis used to\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148); color: #0b5394;\"\u003Esort collection of\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003Edifferent types(classes) like List\u0026lt;Object\u0026gt;.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIt means Comparator is like \"I can compare myself with other object of same\/different type\"\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148); color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148); color: #0b5394;\"\u003EIf you have observe\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148); color: #0b5394;\"\u003E\u003Cb style=\"font-style: italic;\"\u003Ejava.util.Comparator \u003C\/b\u003Eis more like a Utility class that can sort objects of any class you provide and that is\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148);\"\u003Ewhy it is in util package.\u0026nbsp;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148);\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EComparable example\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cpre class=\"brush: java\"\u003Epackage com.javabypatel;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003Eimport java.util.ListIterator;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class ComparableExample {\u003Cbr \/\u003E\u003Cbr \/\u003E    private static final int INSERTIONSORT_THRESHOLD = 7;\u003Cbr \/\u003E\u003Cbr \/\u003E    public static void main(String[] args) {\u003Cbr \/\u003E        Student s1 = new Student(10);\u003Cbr \/\u003E        Student s2 = new Student(50);\u003Cbr \/\u003E        Student s3 = new Student(20);\u003Cbr \/\u003E        Student s4 = new Student(30);\u003Cbr \/\u003E\u003Cbr \/\u003E        List\u0026lt;Student\u0026gt; list = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        list.add(s1);\u003Cbr \/\u003E        list.add(s2);\u003Cbr \/\u003E        list.add(s3);\u003Cbr \/\u003E        list.add(s4);\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cpre class=\"brush: java\"\u003E        System.out.println(\"Before sort:\");\u003Cbr \/\u003E        list.forEach(s -\u0026gt; System.out.print(s.rollNo + \" \"));\u003Cbr \/\u003E\u003Cbr \/\u003E        sort(list);\u003Cbr \/\u003E        \/\/Collections.sort(list);\u003Cbr \/\u003E\u003Cbr \/\u003E        System.out.println(\"After sort:\");\u003Cbr \/\u003E        list.forEach(s -\u0026gt; System.out.print(s.rollNo + \" \"));\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    static void sort(List\u0026lt;Student\u0026gt; list) {\u003Cbr \/\u003E        int low = 0;\u003Cbr \/\u003E        Object[] dest = list.toArray();\u003Cbr \/\u003E        for (int i = 0; i \u0026lt; list.size(); i++)\u003Cbr \/\u003E            for (int j = i; j \u0026gt; low \u0026amp;\u0026amp; ((Comparable) dest[j - 1]).compareTo(dest[j]) \u0026gt; 0; j--)\u003Cbr \/\u003E                swap(dest, j, j - 1);\u003Cbr \/\u003E\u003Cbr \/\u003E        ListIterator\u0026lt;Student\u0026gt; i = list.listIterator();\u003Cbr \/\u003E        for (Object e : dest) {\u003Cbr \/\u003E            i.next();\u003Cbr \/\u003E            i.set((Student) e);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private static void swap(Object[] x, int a, int b) {\u003Cbr \/\u003E        Object t = x[a];\u003Cbr \/\u003E        x[a] = x[b];\u003Cbr \/\u003E        x[b] = t;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Eclass Student implements Comparable\u0026lt;Student\u0026gt;{\u003Cbr \/\u003E    int rollNo;\u003Cbr \/\u003E\u003Cbr \/\u003E    public Student(int rollNo) {\u003Cbr \/\u003E        this.rollNo = rollNo;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int compareTo(Student s) {\u003Cbr \/\u003E        if(rollNo==s.rollNo)\u003Cbr \/\u003E            return 0;\u003Cbr \/\u003E        else if(rollNo\u0026gt;s.rollNo)\u003Cbr \/\u003E            return 1;\u003Cbr \/\u003E        else\u003Cbr \/\u003E            return -1;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cspan style=\"caret-color: rgb(11, 83, 148); color: #0b5394;\"\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EOutput:\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003EBefore sort:\u003Cbr \/\u003E10 50 20 30\u003Cbr \/\u003EAfter sort:\u003Cbr \/\u003E10 20 30 50\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHere we are sorting List of Students by their roll number.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EGenerally we should be using \"\u003C\/span\u003E\u003Cspan style=\"background-color: white; color: grey; font-family: \u0026quot;menlo\u0026quot;; font-size: 9pt; font-style: italic;\"\u003ECollections.sort(list);\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\" for sorting the list, for better understanding I have copied the\u0026nbsp;\u003Cspan style=\"caret-color: rgb(11, 83, 148);\"\u003Ecode\u003C\/span\u003E\u0026nbsp;of sort method to understand how internally\u0026nbsp;it sort the list.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIt compare 2 objects and swap based on result returned by compareTo method.\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EComparator example\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cpre class=\"brush: java\"\u003Epackage com.javabypatel;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003Eimport java.util.Collections;\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class ComparatorExample {\u003Cbr \/\u003E\u003Cbr \/\u003E    public static void main(String[] args) {\u003Cbr \/\u003E        Student s1 = new Student(10, \"Zara\");\u003Cbr \/\u003E        Student s2 = new Student(50, \"Jayesh\");\u003Cbr \/\u003E        Student s3 = new Student(20, \"Ash\");\u003Cbr \/\u003E        Student s4 = new Student(30, \"Kate\");\u003Cbr \/\u003E\u003Cbr \/\u003E        List\u0026lt;Student\u0026gt; list = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        list.add(s1);\u003Cbr \/\u003E        list.add(s2);\u003Cbr \/\u003E        list.add(s3);\u003Cbr \/\u003E        list.add(s4);\u003Cbr \/\u003E\u003Cbr \/\u003E        System.out.println(\"Before sort:\");\u003Cbr \/\u003E        list.forEach(s -\u0026gt; System.out.print(s.name + \" \" + s.rollNo + \", \"));\u003Cbr \/\u003E\u003Cbr \/\u003E        NameComparator nameComparator = new NameComparator();\u003Cbr \/\u003E        Collections.sort(list, nameComparator);\u003Cbr \/\u003E\u003Cbr \/\u003E        System.out.println(\"\\n\\nAfter sort by name:\");\u003Cbr \/\u003E        list.forEach(s -\u0026gt; System.out.print(s.name + \" \" + s.rollNo + \", \"));\u003Cbr \/\u003E\u003Cbr \/\u003E        RollNumberComparator rollNumberComparator = new RollNumberComparator();\u003Cbr \/\u003E        Collections.sort(list, rollNumberComparator);\u003Cbr \/\u003E\u003Cbr \/\u003E        System.out.println(\"\\n\\nAfter sort by Roll number:\");\u003Cbr \/\u003E        list.forEach(s -\u0026gt; System.out.print(s.name + \" \" + s.rollNo + \", \"));\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cpre class=\"brush: java\"\u003Epackage com.javabypatel;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.Comparator;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class Student {\u003Cbr \/\u003E    int rollNo;\u003Cbr \/\u003E    String name;\u003Cbr \/\u003E\u003Cbr \/\u003E    public Student(int rollNo, String name) {\u003Cbr \/\u003E        this.rollNo = rollNo;\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/Name Comparator\u003Cbr \/\u003Eclass NameComparator implements Comparator\u0026lt;Student\u0026gt; {\u003Cbr \/\u003E    public int compare(Student s1, Student s2) {\u003Cbr \/\u003E        return s1.name.compareTo(s2.name);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/Roll number Comparator \u003Cbr \/\u003Eclass RollNumberComparator implements Comparator\u0026lt;Student\u0026gt; {\u003Cbr \/\u003E    public int compare(Student s1, Student s2) {\u003Cbr \/\u003E        if (s1.rollNo \u0026lt; s2.rollNo) return -1;\u003Cbr \/\u003E        if (s1.rollNo \u0026gt; s2.rollNo) return 1;\u003Cbr \/\u003E        else return 0;\u003Cbr \/\u003E    }\u003Cbr \/\u003E} \u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cspan style=\"color: #073763;\"\u003EOutput:\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #073763;\"\u003EBefore sort:\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #073763;\"\u003EZara 10, Jayesh 50, Ash 20, Kate 30,\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #073763;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #073763;\"\u003EAfter sort by name:\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #073763;\"\u003EAsh 20, Jayesh 50, Kate 30, Zara 10,\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #073763;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #073763;\"\u003EAfter sort by Roll number:\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #073763;\"\u003EZara 10, Ash 20, Kate 30, Jayesh 50, \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.com\/2015\/08\/binary-tree-traversals-inorder-preorder-postorder-levelorder.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ELevel Order Traversal of Binary Tree.\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/09\/java-multithreading-interview-questions-answers.html\" target=\"_blank\"\u003EAdvanced Multithreading Interview Question-Answer\u003C\/a\u003E\u003C\/span\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/08\/binary-tree-traversals-inorder-preorder-postorder-levelorder.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ETraverse a Binary Tree in Level Order Traversal\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/10\/serialize-deserialize-binary-tree.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESerialize and Deserialize a Binary Tree\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/12\/diameter-of-binary-tree.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EFind diameter of Binary Tree\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2016\/10\/trapping-rain-water-between-towers.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow Much Water Can a Bar Graph with different heights can Hold\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/search\/label\/Interviews\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EInterview Question-Answer on Java\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/7113971630544055580\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/03\/how-comparable-and-comparator-work-in-java.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/7113971630544055580"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/7113971630544055580"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2019\/03\/how-comparable-and-comparator-work-in-java.html","title":"How Comparable and Comparator works internally in Java"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/2.bp.blogspot.com\/-U_9LZNH7xJM\/XIN0CUZGgNI\/AAAAAAAACPQ\/ypZCrWyVNnMfbowwrwwEwv5fdtiLm6JZwCLcBGAs\/s72-c\/how-comparator-comparable-works-internally-in-java.png","height":"72","width":"72"},"thr$total":{"$t":"0"}}]}});
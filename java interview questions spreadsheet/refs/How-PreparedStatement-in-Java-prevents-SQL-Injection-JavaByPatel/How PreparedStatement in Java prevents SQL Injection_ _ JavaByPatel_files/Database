// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143"},"updated":{"$t":"2020-02-03T22:12:36.691-08:00"},"category":[{"term":"Interviews"},{"term":"Java"},{"term":"Datastructure"},{"term":"Algorithm"},{"term":"Binary Tree"},{"term":"Miscellaneous"},{"term":"Binary Search Tree"},{"term":"Array"},{"term":"Linked List"},{"term":"Sorting"},{"term":"Multithreading"},{"term":"Strings"},{"term":"Matrix"},{"term":"AngularJS"},{"term":"Bit Manipulation"},{"term":"OOPS"},{"term":"Database"},{"term":"Stack"},{"term":"Quartz"},{"term":"Angular2"},{"term":"Queue"},{"term":"Design Pattern"},{"term":"Typescript"},{"term":"Backtracking"},{"term":"Heap"},{"term":"Java8"},{"term":"Web Service"},{"term":"Graph"},{"term":"Puzzle"},{"term":"Stream"},{"term":"Windows"},{"term":"Binary Search"},{"term":"Javascript"},{"term":"Spring"}],"title":{"type":"text","$t":"JavaByPatel"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/-\/Database?alt=json-in-script\u0026max-results=8"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/search\/label\/Database"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"7"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"8"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-5183208457202963135"},"published":{"$t":"2017-06-13T00:15:00.001-07:00"},"updated":{"$t":"2017-06-13T00:15:22.622-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Database"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"}],"title":{"type":"text","$t":"Why Prepared Statement is faster than Statement in Java JDBC."},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhy Prepared Statement is faster than Statement in Java.\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EPrepared Statement is faster than Statement in Java. \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EPrepared Statement is better because it caches query so is fast and \u003C\/span\u003Eprevents from SQL Injection. \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EThis is the famous interview question for the beginners, So Let's see what it is all about.\u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ESQL Injection is code injection technique where SQL is injected by user (as part of user input) into the back end query, and ultimately changes query purpose which upon execution gives harmful result.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #134f5c;\"\u003E\u003Cb\u003EDetailed explanation on SQL Injection\u003C\/b\u003E: \u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003EWhat is SQL Injection?\u003C\/a\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow can SQL Injection happen.\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt server side, \u003C\/b\u003Equeries generally by themselves are not complete and require user data to make it complete, meaningful and executable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\"select * from user where username = ' \" + username + \" ' \";\u003C\/b\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C!-- adsense --\u003EAbove query is not complete as it has dependency on username variable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow if username variable is filled by third party, then there are chances that user data contains SQL,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ETake an example. Application is asking user to enter user name,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:________________________\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:___\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003Ejayesh'; delete from user where id='1\u003C\/b\u003E\u003C\/span\u003E__\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt Server Side,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \"\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\"\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EFinal Query\u003C\/b\u003E \u003Cb\u003E=\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"select * from user where username = ' \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E ' \";\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you observe final query, upon execution it will delete the record from user table which was never the purpose of original query and this is called SQL Injection attack.\u0026nbsp; \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBecause of user data (\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ewhich can be anything and uncontrolled) \u003C\/span\u003Einvolvement in formation of query, SQL Injection attack can happen.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #134f5c;\"\u003E\u003Cb\u003EDetailed explanation on\u003C\/b\u003E: \u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003EHow can SQL Injection happen?\u003C\/a\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow PreparedStatement in Java prevents SQL Injection?\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ETo understand this, Lets see steps involved in query execution.\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E1. Compilation Phase.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E2. Execution Phase.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhenever SQL server engine receives a query, It has to pass through below phases, \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s1600\/QueryExecutionPhases.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"282\" src=\"https:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s640\/QueryExecutionPhases.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-zIXPbZKGtAU\/VfbRFTEco4I\/AAAAAAAAAV4\/LeT-4DN7Ywg\/s1600\/SQLInjection.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1. Parsing and Normalization Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; In this phase, Query is checked for syntax and semantics. It checks whether references table and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; columns used in query exist or not.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It also has many other task to do, Let's not go in much detail.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E2. Compilation Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; \u003C\/b\u003EIn this phase, keywords used in query like \u003Cb\u003Eselect\u003C\/b\u003E,\u003Cb\u003E from\u003C\/b\u003E, \u003Cb\u003Ewhere\u003C\/b\u003E etc are converted into format\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; understandable by machine.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; This is the phase where query is interpreted and corresponding action to take is decided.\u003C\/b\u003E \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It also has many other task to do, Let's not go in much detail.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3. Query Optimization Plan\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp; In this phase, Decision Tree is created for finding the ways in which query can be executed.\u003Cb\u003E \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; It find out the number of ways in which query can be executed and cost associated with each way \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; of executing Query.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; It choose the best plan for executing a query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4. Cache\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003C\/b\u003EBest plan selected in Query optimization plan is stored in cache, so that whenever next\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; time\u003Cb\u003E \u003C\/b\u003Esame query come in, it doesn't has to pass through Phase 1, Phase 2 and Phase 3.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; When next time query come in, it will be checked directly in Cache and picked up from there\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; and execute.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E5. Execution Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/b\u003E In this phase, supplied query gets executed and data is returned to user as ResultSet object.\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003C\/h3\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBehaviour of PreparedStatement API on above steps?\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E PreparedStatement are not complete SQL query and contains placeholder, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; which at run time is replaced by actual user data.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E2. \u003C\/b\u003EWhenever any PreparedStatment containing placeholders is passed in to SQL Server engine, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It passes through below phases \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EUPDATE user set username=? and password=? WHERE id=?\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3. \u003C\/b\u003EAbove query will get parsed, compiled with placeholders as special treatment, optimized and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; get Cached.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003Cb\u003E\u003C\/b\u003E Query at this stage is already compiled and converted in machine understandable format.\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So we can say that Query stored in cache is Pre-Compiled means already compiled and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; only placeholders need to be replaced with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4.\u003C\/b\u003E Now at run-time when user data comes in, Pre-Compiled Query is picked up from Cache and\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; placeholders are replaced with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/--zpgQRL3mEc\/VfcdVU-9QKI\/AAAAAAAAAWY\/d3xZYZcUR5g\/s1600\/PrepareStatement.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"212\" src=\"https:\/\/2.bp.blogspot.com\/--zpgQRL3mEc\/VfcdVU-9QKI\/AAAAAAAAAWY\/d3xZYZcUR5g\/s640\/PrepareStatement.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E(Remember, after place holders are replaced with user data, final query is not \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; compiled\/interpreted again and SQL Server engine treats user data as pure data and not a\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; SQL that needs to be parsed or compiled again and that is beauty of PreparedStatement.)\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cspan style=\"color: #0b5394;\"\u003EIf the query doesn't has to go through compilation phase again, then whatever data is replaced to\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; placeholders are treated as pure data and has no meaning to SQL Server engine and it directly\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; executes the query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Note: It is the compilation phase after parsing phase, that understands\/interprets the query\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; structure and give meaningful behavior to it. In case of PreparedStatement, query is\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; compiled only once and cached compiled query is picked up all the time to replace \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; user data and execute.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Due to one time compilation feature of PreparedStatement, it is free of SQL Injection\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; attack.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ESUMMARY\u003C\/b\u003E:\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; PrepareStatment query which is incomplete and contain placeholders is first compiled.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp; In the compilation phase, actual query is parsed and at this point only, any inner queries or \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; any sub queries are checked. \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; After this phase query is optimized and saved in Cache.\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Now, when user data comes in, Pre-compiled Query is picked from Cache and placeholders are\u0026nbsp;\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; replaced with user data. \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; After user data replacement, final Query formed is not compiled again since it is Pre-Compiled, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Now, if user data contain any SQL then also it has no effect and will be treated as pure data.\u003Cbr \/\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; (Remember if query is compiled again then only it will treat data as SQL if it contains.)\u003C\/b\u003E \u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhy to use PreparedStatement instead of Statement API in Java?\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E \u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E Whenever Query is executed using Statement in java, then Query contains all the necessary data \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; for execution\u003Cb\u003E.\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; \u003C\/b\u003EQuery is supplied to SQL Server engine after placeholder replacement with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"SELECT * FROM user WHERE username = ' \" + username + \" ' \";\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E2. \u003C\/b\u003ENow at run time, if user supplied data\u0026nbsp;contains SQL\u003Cb\u003E \u003C\/b\u003Elike,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; username = jayesh'; delete from user where id='1 \u003C\/b\u003Ethen query becomes,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eselect * from user where username='jayesh'; delete from user where id='1';\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3.\u003C\/b\u003E This final query is now supplied to SQL Server engine, which pass through all the below phases,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4.\u003C\/b\u003E In Compilation phase, Query supplied will became,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='jayesh'; \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; delete from user where id='1';\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: red;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; and here the problem starts. So Statement API is prone to SQL Injection attack.\u003C\/span\u003E\u003C\/span\u003E  \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003ENOTE:\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; So problem with Statement API is query is not pre-compiled.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; In original query with placeholders, user data is first replaced and modified query is passed to\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SQL Server engine which runs compilation phase every time on query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp; In compilation phase, if user data contains SQL then that will be converted into instructions and\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; get executed which is not the case with PreparedStatment where compilation of query happens\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; only one time.\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E5. \u003C\/b\u003EWhen Compared to PreparedStatement\u003Cb\u003E,\u003C\/b\u003E Statement API are not Pre-Compiled and whenever\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; supplied to \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine, it passes through compilation phase, which doesn't differentiate \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; over user input and SQL and that is where problem starts.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E6.\u003C\/b\u003E In \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EPreparedStatement, SQL is supplied to \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine with place holders which doesn't \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; contain any user data. \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine passes the query to all above phases and keep it in ready \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; to run state, where only place holder replacement is remaining.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So whenever user data is supplied, placeholders are replaced with data and final query is executed\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; without compiling and that is where user data is treated as pure data and if SQL is supplied in data\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; that will be treated as data. \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EImportant benefits of PreparedStatement in Java? \u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E1. \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow, from above observation we saw that whenever a query is executed using PreparedStatment, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It passes through below phases,\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eand keep the SQL query in Pre-Compiled state.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp; \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So now, if we need to run a query 10 times or 100 times, it doesn't has to pass through all the\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; above phases\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E and can run quickly by simply replacing placeholders in Pre-Compiled query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; This feature of PreparedStatement gives better performance.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E6. \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESince \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EPreparedStatement are compiled only once, it helps SQL Injection\u003C\/b\u003E attacks while\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Statement is prone to SQL Injection due to its every time compile nature.\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.com\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EExplain SQL Injection with example?\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E \u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/5183208457202963135\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2017\/06\/why-prepared-statement-is-faster-than-statement-in-java.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/5183208457202963135"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/5183208457202963135"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2017\/06\/why-prepared-statement-is-faster-than-statement-in-java.html","title":"Why Prepared Statement is faster than Statement in Java JDBC."}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s72-c\/QueryExecutionPhases.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-3898669122573847006"},"published":{"$t":"2017-06-13T00:04:00.002-07:00"},"updated":{"$t":"2017-06-13T00:04:23.918-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Database"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"}],"title":{"type":"text","$t":"Advantages of Prepared Statement in Java JDBC."},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EAdvantages of Prepared Statement in Java.\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EAdvantages of Prepared Statement in Java JDBC. benefit of using Prepared Statement is it prevents from SQL Injection. \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EPreparedStatement is fast and gives \u003C\/span\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ebetter performance\u003C\/span\u003E.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EThis is the famous interview question for the beginners, So Let's see what it is all about.\u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ESQL Injection is code injection technique where SQL is injected by user (as part of user input) into the back end query, and ultimately changes query purpose which upon execution gives harmful result.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #134f5c;\"\u003E\u003Cb\u003EDetailed explanation on SQL Injection\u003C\/b\u003E: \u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003EWhat is SQL Injection?\u003C\/a\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow can SQL Injection happen.\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt server side, \u003C\/b\u003Equeries generally by themselves are not complete and require user data to make it complete, meaningful and executable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\"select * from user where username = ' \" + username + \" ' \";\u003C\/b\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C!-- adsense --\u003EAbove query is not complete as it has dependency on username variable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow if username variable is filled by third party, then there are chances that user data contains SQL,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ETake an example. Application is asking user to enter user name,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:________________________\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:___\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003Ejayesh'; delete from user where id='1\u003C\/b\u003E\u003C\/span\u003E__\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt Server Side,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \"\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\"\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EFinal Query\u003C\/b\u003E \u003Cb\u003E=\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"select * from user where username = ' \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E ' \";\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you observe final query, upon execution it will delete the record from user table which was never the purpose of original query and this is called SQL Injection attack.\u0026nbsp; \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBecause of user data (\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ewhich can be anything and uncontrolled) \u003C\/span\u003Einvolvement in formation of query, SQL Injection attack can happen.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #134f5c;\"\u003E\u003Cb\u003EDetailed explanation on\u003C\/b\u003E: \u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003EHow can SQL Injection happen?\u003C\/a\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow PreparedStatement in Java prevents SQL Injection?\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ETo understand this, Lets see steps involved in query execution.\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E1. Compilation Phase.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E2. Execution Phase.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhenever SQL server engine receives a query, It has to pass through below phases, \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s1600\/QueryExecutionPhases.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"282\" src=\"https:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s640\/QueryExecutionPhases.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-zIXPbZKGtAU\/VfbRFTEco4I\/AAAAAAAAAV4\/LeT-4DN7Ywg\/s1600\/SQLInjection.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1. Parsing and Normalization Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; In this phase, Query is checked for syntax and semantics. It checks whether references table and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; columns used in query exist or not.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It also has many other task to do, Let's not go in much detail.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E2. Compilation Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; \u003C\/b\u003EIn this phase, keywords used in query like \u003Cb\u003Eselect\u003C\/b\u003E,\u003Cb\u003E from\u003C\/b\u003E, \u003Cb\u003Ewhere\u003C\/b\u003E etc are converted into format\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; understandable by machine.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; This is the phase where query is interpreted and corresponding action to take is decided.\u003C\/b\u003E \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It also has many other task to do, Let's not go in much detail.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3. Query Optimization Plan\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp; In this phase, Decision Tree is created for finding the ways in which query can be executed.\u003Cb\u003E \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; It find out the number of ways in which query can be executed and cost associated with each way \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; of executing Query.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; It choose the best plan for executing a query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4. Cache\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003C\/b\u003EBest plan selected in Query optimization plan is stored in cache, so that whenever next\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; time\u003Cb\u003E \u003C\/b\u003Esame query come in, it doesn't has to pass through Phase 1, Phase 2 and Phase 3.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; When next time query come in, it will be checked directly in Cache and picked up from there\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; and execute.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E5. Execution Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/b\u003E In this phase, supplied query gets executed and data is returned to user as ResultSet object.\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003C\/h3\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBehaviour of PreparedStatement API on above steps?\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E PreparedStatement are not complete SQL query and contains placeholder, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; which at run time is replaced by actual user data.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E2. \u003C\/b\u003EWhenever any PreparedStatment containing placeholders is passed in to SQL Server engine, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It passes through below phases \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EUPDATE user set username=? and password=? WHERE id=?\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3. \u003C\/b\u003EAbove query will get parsed, compiled with placeholders as special treatment, optimized and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; get Cached.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003Cb\u003E\u003C\/b\u003E Query at this stage is already compiled and converted in machine understandable format.\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So we can say that Query stored in cache is Pre-Compiled means already compiled and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; only placeholders need to be replaced with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4.\u003C\/b\u003E Now at run-time when user data comes in, Pre-Compiled Query is picked up from Cache and\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; placeholders are replaced with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/--zpgQRL3mEc\/VfcdVU-9QKI\/AAAAAAAAAWY\/d3xZYZcUR5g\/s1600\/PrepareStatement.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"212\" src=\"https:\/\/2.bp.blogspot.com\/--zpgQRL3mEc\/VfcdVU-9QKI\/AAAAAAAAAWY\/d3xZYZcUR5g\/s640\/PrepareStatement.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E(Remember, after place holders are replaced with user data, final query is not \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; compiled\/interpreted again and SQL Server engine treats user data as pure data and not a\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; SQL that needs to be parsed or compiled again and that is beauty of PreparedStatement.)\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cspan style=\"color: #0b5394;\"\u003EIf the query doesn't has to go through compilation phase again, then whatever data is replaced to\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; placeholders are treated as pure data and has no meaning to SQL Server engine and it directly\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; executes the query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Note: It is the compilation phase after parsing phase, that understands\/interprets the query\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; structure and give meaningful behavior to it. In case of PreparedStatement, query is\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; compiled only once and cached compiled query is picked up all the time to replace \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; user data and execute.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Due to one time compilation feature of PreparedStatement, it is free of SQL Injection\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; attack.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ESUMMARY\u003C\/b\u003E:\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; PrepareStatment query which is incomplete and contain placeholders is first compiled.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp; In the compilation phase, actual query is parsed and at this point only, any inner queries or \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; any sub queries are checked. \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; After this phase query is optimized and saved in Cache.\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Now, when user data comes in, Pre-compiled Query is picked from Cache and placeholders are\u0026nbsp;\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; replaced with user data. \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; After user data replacement, final Query formed is not compiled again since it is Pre-Compiled, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Now, if user data contain any SQL then also it has no effect and will be treated as pure data.\u003Cbr \/\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; (Remember if query is compiled again then only it will treat data as SQL if it contains.)\u003C\/b\u003E \u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhy to use PreparedStatement instead of Statement API in Java?\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E \u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E Whenever Query is executed using Statement in java, then Query contains all the necessary data \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; for execution\u003Cb\u003E.\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; \u003C\/b\u003EQuery is supplied to SQL Server engine after placeholder replacement with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"SELECT * FROM user WHERE username = ' \" + username + \" ' \";\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E2. \u003C\/b\u003ENow at run time, if user supplied data\u0026nbsp;contains SQL\u003Cb\u003E \u003C\/b\u003Elike,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; username = jayesh'; delete from user where id='1 \u003C\/b\u003Ethen query becomes,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eselect * from user where username='jayesh'; delete from user where id='1';\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3.\u003C\/b\u003E This final query is now supplied to SQL Server engine, which pass through all the below phases,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4.\u003C\/b\u003E In Compilation phase, Query supplied will became,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='jayesh'; \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; delete from user where id='1';\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: red;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; and here the problem starts. So Statement API is prone to SQL Injection attack.\u003C\/span\u003E\u003C\/span\u003E  \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003ENOTE:\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; So problem with Statement API is query is not pre-compiled.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; In original query with placeholders, user data is first replaced and modified query is passed to\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SQL Server engine which runs compilation phase every time on query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp; In compilation phase, if user data contains SQL then that will be converted into instructions and\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; get executed which is not the case with PreparedStatment where compilation of query happens\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; only one time.\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E5. \u003C\/b\u003EWhen Compared to PreparedStatement\u003Cb\u003E,\u003C\/b\u003E Statement API are not Pre-Compiled and whenever\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; supplied to \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine, it passes through compilation phase, which doesn't differentiate \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; over user input and SQL and that is where problem starts.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E6.\u003C\/b\u003E In \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EPreparedStatement, SQL is supplied to \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine with place holders which doesn't \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; contain any user data. \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine passes the query to all above phases and keep it in ready \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; to run state, where only place holder replacement is remaining.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So whenever user data is supplied, placeholders are replaced with data and final query is executed\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; without compiling and that is where user data is treated as pure data and if SQL is supplied in data\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; that will be treated as data. \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EImportant benefits of PreparedStatement in Java? \u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E1. \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow, from above observation we saw that whenever a query is executed using PreparedStatment, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It passes through below phases,\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eand keep the SQL query in Pre-Compiled state.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp; \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So now, if we need to run a query 10 times or 100 times, it doesn't has to pass through all the\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; above phases\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E and can run quickly by simply replacing placeholders in Pre-Compiled query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; This feature of PreparedStatement gives better performance.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E6. \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESince \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EPreparedStatement are compiled only once, it helps SQL Injection\u003C\/b\u003E attacks while\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Statement is prone to SQL Injection due to its every time compile nature.\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.com\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EExplain SQL Injection with example?\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E \u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/3898669122573847006\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2017\/06\/advantages-of-prepared-statement-in.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/3898669122573847006"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/3898669122573847006"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2017\/06\/advantages-of-prepared-statement-in.html","title":"Advantages of Prepared Statement in Java JDBC."}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s72-c\/QueryExecutionPhases.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-290970995690100630"},"published":{"$t":"2017-06-12T23:47:00.001-07:00"},"updated":{"$t":"2017-06-12T23:47:44.849-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Database"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"}],"title":{"type":"text","$t":"How Prepared Statement works internally in Java."},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow Prepared Statement works internally in Java.\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow Prepared Statement works internally in Java. \u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EPrepared Statement is part of Java JDBC API. \u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EPreparedStatement internally caches query.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EThis is the famous interview question for the beginners, So Let's see what it is all about.\u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ESQL Injection is code injection technique where SQL is injected by user (as part of user input) into the back end query, and ultimately changes query purpose which upon execution gives harmful result.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #134f5c;\"\u003E\u003Cb\u003EDetailed explanation on SQL Injection\u003C\/b\u003E: \u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003EWhat is SQL Injection?\u003C\/a\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow can SQL Injection happen.\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt server side, \u003C\/b\u003Equeries generally by themselves are not complete and require user data to make it complete, meaningful and executable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\"select * from user where username = ' \" + username + \" ' \";\u003C\/b\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C!-- adsense --\u003EAbove query is not complete as it has dependency on username variable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow if username variable is filled by third party, then there are chances that user data contains SQL,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ETake an example. Application is asking user to enter user name,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:________________________\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:___\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003Ejayesh'; delete from user where id='1\u003C\/b\u003E\u003C\/span\u003E__\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt Server Side,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \"\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\"\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EFinal Query\u003C\/b\u003E \u003Cb\u003E=\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"select * from user where username = ' \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E ' \";\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you observe final query, upon execution it will delete the record from user table which was never the purpose of original query and this is called SQL Injection attack.\u0026nbsp; \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBecause of user data (\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ewhich can be anything and uncontrolled) \u003C\/span\u003Einvolvement in formation of query, SQL Injection attack can happen.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #134f5c;\"\u003E\u003Cb\u003EDetailed explanation on\u003C\/b\u003E: \u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003EHow can SQL Injection happen?\u003C\/a\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow PreparedStatement in Java prevents SQL Injection?\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ETo understand this, Lets see steps involved in query execution.\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E1. Compilation Phase.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E2. Execution Phase.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhenever SQL server engine receives a query, It has to pass through below phases, \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s1600\/QueryExecutionPhases.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"282\" src=\"https:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s640\/QueryExecutionPhases.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-zIXPbZKGtAU\/VfbRFTEco4I\/AAAAAAAAAV4\/LeT-4DN7Ywg\/s1600\/SQLInjection.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1. Parsing and Normalization Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; In this phase, Query is checked for syntax and semantics. It checks whether references table and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; columns used in query exist or not.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It also has many other task to do, Let's not go in much detail.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E2. Compilation Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; \u003C\/b\u003EIn this phase, keywords used in query like \u003Cb\u003Eselect\u003C\/b\u003E,\u003Cb\u003E from\u003C\/b\u003E, \u003Cb\u003Ewhere\u003C\/b\u003E etc are converted into format\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; understandable by machine.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; This is the phase where query is interpreted and corresponding action to take is decided.\u003C\/b\u003E \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It also has many other task to do, Let's not go in much detail.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3. Query Optimization Plan\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp; In this phase, Decision Tree is created for finding the ways in which query can be executed.\u003Cb\u003E \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; It find out the number of ways in which query can be executed and cost associated with each way \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; of executing Query.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; It choose the best plan for executing a query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4. Cache\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003C\/b\u003EBest plan selected in Query optimization plan is stored in cache, so that whenever next\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; time\u003Cb\u003E \u003C\/b\u003Esame query come in, it doesn't has to pass through Phase 1, Phase 2 and Phase 3.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; When next time query come in, it will be checked directly in Cache and picked up from there\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; and execute.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E5. Execution Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/b\u003E In this phase, supplied query gets executed and data is returned to user as ResultSet object.\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003C\/h3\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBehaviour of PreparedStatement API on above steps?\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E PreparedStatement are not complete SQL query and contains placeholder, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; which at run time is replaced by actual user data.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E2. \u003C\/b\u003EWhenever any PreparedStatment containing placeholders is passed in to SQL Server engine, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It passes through below phases \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EUPDATE user set username=? and password=? WHERE id=?\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3. \u003C\/b\u003EAbove query will get parsed, compiled with placeholders as special treatment, optimized and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; get Cached.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003Cb\u003E\u003C\/b\u003E Query at this stage is already compiled and converted in machine understandable format.\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So we can say that Query stored in cache is Pre-Compiled means already compiled and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; only placeholders need to be replaced with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4.\u003C\/b\u003E Now at run-time when user data comes in, Pre-Compiled Query is picked up from Cache and\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; placeholders are replaced with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/--zpgQRL3mEc\/VfcdVU-9QKI\/AAAAAAAAAWY\/d3xZYZcUR5g\/s1600\/PrepareStatement.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"212\" src=\"https:\/\/2.bp.blogspot.com\/--zpgQRL3mEc\/VfcdVU-9QKI\/AAAAAAAAAWY\/d3xZYZcUR5g\/s640\/PrepareStatement.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E(Remember, after place holders are replaced with user data, final query is not \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; compiled\/interpreted again and SQL Server engine treats user data as pure data and not a\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; SQL that needs to be parsed or compiled again and that is beauty of PreparedStatement.)\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cspan style=\"color: #0b5394;\"\u003EIf the query doesn't has to go through compilation phase again, then whatever data is replaced to\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; placeholders are treated as pure data and has no meaning to SQL Server engine and it directly\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; executes the query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Note: It is the compilation phase after parsing phase, that understands\/interprets the query\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; structure and give meaningful behavior to it. In case of PreparedStatement, query is\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; compiled only once and cached compiled query is picked up all the time to replace \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; user data and execute.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Due to one time compilation feature of PreparedStatement, it is free of SQL Injection\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; attack.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ESUMMARY\u003C\/b\u003E:\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; PrepareStatment query which is incomplete and contain placeholders is first compiled.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp; In the compilation phase, actual query is parsed and at this point only, any inner queries or \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; any sub queries are checked. \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; After this phase query is optimized and saved in Cache.\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Now, when user data comes in, Pre-compiled Query is picked from Cache and placeholders are\u0026nbsp;\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; replaced with user data. \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; After user data replacement, final Query formed is not compiled again since it is Pre-Compiled, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Now, if user data contain any SQL then also it has no effect and will be treated as pure data.\u003Cbr \/\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; (Remember if query is compiled again then only it will treat data as SQL if it contains.)\u003C\/b\u003E \u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhy to use PreparedStatement instead of Statement API in Java?\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E \u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E Whenever Query is executed using Statement in java, then Query contains all the necessary data \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; for execution\u003Cb\u003E.\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; \u003C\/b\u003EQuery is supplied to SQL Server engine after placeholder replacement with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"SELECT * FROM user WHERE username = ' \" + username + \" ' \";\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E2. \u003C\/b\u003ENow at run time, if user supplied data\u0026nbsp;contains SQL\u003Cb\u003E \u003C\/b\u003Elike,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; username = jayesh'; delete from user where id='1 \u003C\/b\u003Ethen query becomes,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eselect * from user where username='jayesh'; delete from user where id='1';\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3.\u003C\/b\u003E This final query is now supplied to SQL Server engine, which pass through all the below phases,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4.\u003C\/b\u003E In Compilation phase, Query supplied will became,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='jayesh'; \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; delete from user where id='1';\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: red;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; and here the problem starts. So Statement API is prone to SQL Injection attack.\u003C\/span\u003E\u003C\/span\u003E  \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003ENOTE:\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; So problem with Statement API is query is not pre-compiled.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; In original query with placeholders, user data is first replaced and modified query is passed to\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SQL Server engine which runs compilation phase every time on query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp; In compilation phase, if user data contains SQL then that will be converted into instructions and\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; get executed which is not the case with PreparedStatment where compilation of query happens\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; only one time.\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E5. \u003C\/b\u003EWhen Compared to PreparedStatement\u003Cb\u003E,\u003C\/b\u003E Statement API are not Pre-Compiled and whenever\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; supplied to \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine, it passes through compilation phase, which doesn't differentiate \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; over user input and SQL and that is where problem starts.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E6.\u003C\/b\u003E In \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EPreparedStatement, SQL is supplied to \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine with place holders which doesn't \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; contain any user data. \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine passes the query to all above phases and keep it in ready \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; to run state, where only place holder replacement is remaining.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So whenever user data is supplied, placeholders are replaced with data and final query is executed\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; without compiling and that is where user data is treated as pure data and if SQL is supplied in data\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; that will be treated as data. \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EImportatnt benefits of PreparedStatement in Java? \u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E1. \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow, from above observation we saw that whenever a query is executed using PreparedStatment, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It passes through below phases,\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eand keep the SQL query in Pre-Compiled state.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp; \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So now, if we need to run a query 10 times or 100 times, it doesn't has to pass through all the\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; above phases\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E and can run quickly by simply replacing placeholders in Pre-Compiled query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; This feature of PreparedStatement gives better performance.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E6. \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESince \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EPreparedStatement are compiled only once, it helps SQL Injection\u003C\/b\u003E attacks while\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Statement is prone to SQL Injection due to its every time compile nature.\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.com\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EExplain SQL Injection with example?\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E \u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/290970995690100630\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2017\/06\/how-prepared-statement-works-internally-java.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/290970995690100630"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/290970995690100630"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2017\/06\/how-prepared-statement-works-internally-java.html","title":"How Prepared Statement works internally in Java."}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s72-c\/QueryExecutionPhases.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-7430192175327636967"},"published":{"$t":"2017-05-21T11:11:00.002-07:00"},"updated":{"$t":"2017-05-21T21:20:23.484-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Database"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Interviews"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Miscellaneous"}],"title":{"type":"text","$t":"SQL Injection attack example in Java."},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003C!-- adsense --\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EExplain SQL Injection\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E along with example?\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Injection attack with Example in Java. Let's see what is \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Injection. How SQL Injection attack works. How to prevent SQL Injection. \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Injection is code injection technique. \u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Injection is code injection technique where SQL is injected by user (as part of user input) into the back end query. Injected SQL data alters the purpose of original query and upon execution can gives harmful result. \u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EA SQL injection attack is very dangerous and attacker can,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E1. Read sensitive data from the database.\u003Cbr \/\u003E2. Update database data (Insert\/Update\/Delete).\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E3. Slowdown the complete Database system etc.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-gHP66NHsFRs\/VfaWdrg1HhI\/AAAAAAAAAVo\/Dgt0PZr-q2U\/s1600\/How-SQL-Injection-happen.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"408\" src=\"https:\/\/1.bp.blogspot.com\/-gHP66NHsFRs\/VfaWdrg1HhI\/AAAAAAAAAVo\/Dgt0PZr-q2U\/s640\/How-SQL-Injection-happen.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-SAoX017dURw\/VfaUAyx70cI\/AAAAAAAAAVc\/Ov2tiSoNn94\/s1600\/How-SQL-Injection-happen.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cbr \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cspan style=\"color: #0b5394;\"\u003EAt server side, generally, query is not complete without user data.\u003Cbr \/\u003ELet's understand by taking one example, say you want to get user details, for that query will be,\u003Cbr \/\u003E\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\"select * from user where username = ' \" + username + \" ' \"; \u003C\/b\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIs the above query complete and ready to execute? NO. there is dependency on user data.\u003Cbr \/\u003E\u003Cbr \/\u003Eusername\u003C\/b\u003E here is the placeholder, which is going to be replaced by actual user name of the person stored in our database.\u003Cbr \/\u003EWe ask user to enter his\/her username, which is going to fill our placeholder username.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EClient\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ELets take a input from user,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003Cbr \/\u003EEnter your user name: ___________________\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003EDo we have control on what user is going to fill in username? NO. say user entered,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E1.\u003C\/b\u003E user can fill name of animal and press submit \u003Cb\u003E(\u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = dog\u003C\/span\u003E)\u003C\/b\u003E or,\u003Cbr \/\u003E\u003Cb\u003E2.\u003C\/b\u003E user can fill name of some hospital and press submit \u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E(\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eapollo\u003C\/span\u003E\u003C\/span\u003E)\u003C\/b\u003E \u003C\/span\u003Eor,\u003Cbr \/\u003E\u003Cb\u003E3.\u003C\/b\u003E user can fill some junk data say $$##^^aahh* and press submit \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E(\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E$$##^^aahh*\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E)\u003C\/b\u003E \u003C\/span\u003E\u003C\/span\u003Eor,\u003Cbr \/\u003E\u003Cb\u003E4. \u003C\/b\u003Euser can fill query like say \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E and press submit \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E(\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E)\u003C\/span\u003E\u003C\/span\u003E.\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/span\u003E \u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EServer\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EBehavior of user input on server data\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E \u003Cb\u003Eusername = dog\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Query will turn into,\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='dog';\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E2.\u003C\/b\u003E \u003Cb\u003Eusername = apollo\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Query will turn into,\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='apollo';\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E3. username = $$##^^aahh*\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Query will turn into,\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='$$##^^aahh*';\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E4. username = jayesh'; delete from user where id='1\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Query will turn into,\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='jayesh'; delete from user where id='1';\u003Cbr \/\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cu\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow our application will behave in above cases?\u003C\/b\u003E\u0026nbsp;\u003C\/span\u003E\u003C\/u\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; 1. For \u003Cb\u003ECase 1, 2 and 3\u003C\/b\u003E it may or may not have harmful behavior but \u003Cbr \/\u003E\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: red;\"\u003E\u0026nbsp; 2. For\u003Cb\u003E Case 4,\u003C\/b\u003E it is sure that we are in trouble, \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Appending user data to\u003Cb\u003E \u003C\/b\u003Eour query template, turned query template into 2 queries and our SQL\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; server engine will execute 2 queries separately.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #38761d;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1. Select Query.\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='jayesh'; \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: red;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2. Delete Query (This query will delete user record, which was never intended.)\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp; \u0026nbsp;\u003Cspan style=\"color: red;\"\u003E delete from user where id='1';\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EThis indirect way of injecting SQL code inside the query is called SQL Injection.\u003C\/span\u003E\u003C\/h3\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ESUMMARY\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt server side, \u003C\/b\u003Equeries generally by themselves are not complete and require user data to make it complete, meaningful and executable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\"select * from user where username = ' \" + username + \" ' \";\u003C\/b\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003EAbove query is not complete as it has dependency on username variable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow if username variable is filled by third party, then there are chances that user data contains SQL,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ETake an example. Application is asking user to enter user name,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:________________________\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:___\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003Ejayesh'; delete from user where id='1\u003C\/b\u003E\u003C\/span\u003E__\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt Server Side,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \"\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\"\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EFinal Query\u003C\/b\u003E \u003Cb\u003E=\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"select * from user where username = ' \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E ' \";\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf  you observe final query, upon execution it will delete the record from  user table which was never the purpose of original query and this is  called SQL Injection attack.\u0026nbsp; \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBecause of user data (\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ewhich can be anything and uncontrolled) \u003C\/span\u003Einvolvement in formation of query, SQL Injection attack can happen.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/how-prepared-statement-in-java-prevents-sql-injection.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow prepared statement prevents SQL Injection?\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/7430192175327636967\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2017\/05\/sql-injection-attack-example-in-java.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/7430192175327636967"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/7430192175327636967"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2017\/05\/sql-injection-attack-example-in-java.html","title":"SQL Injection attack example in Java."}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-gHP66NHsFRs\/VfaWdrg1HhI\/AAAAAAAAAVo\/Dgt0PZr-q2U\/s72-c\/How-SQL-Injection-happen.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-8445747380071022651"},"published":{"$t":"2015-09-14T11:53:00.000-07:00"},"updated":{"$t":"2017-05-21T21:23:51.323-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Database"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Java"}],"title":{"type":"text","$t":"How PreparedStatement in Java prevents SQL Injection?"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhat is PreparedStatement in java?\u003Cbr \/\u003EWhy use PreparedStatement in Java JDBC? \u003Cbr \/\u003EHow prepared statement prevents SQL Injection?\u003Cbr \/\u003EDifference between Statement and PreparedStatement in Java?\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EThis is the famous interview question for the beginners, So Let's see what it is all about.\u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ESQL Injection is code injection technique where SQL is injected by user (as part of user input) into the back end query, and ultimately changes query purpose which upon execution gives harmful result.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #134f5c;\"\u003E\u003Cb\u003EDetailed explanation on SQL Injection\u003C\/b\u003E: \u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003EWhat is SQL Injection?\u003C\/a\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow can SQL Injection happen.\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt server side, \u003C\/b\u003Equeries generally by themselves are not complete and require user data to make it complete, meaningful and executable.\u003C\/span\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\"select * from user where username = ' \" + username + \" ' \";\u003C\/b\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C!-- adsense --\u003EAbove query is not complete as it has dependency on username variable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow if username variable is filled by third party, then there are chances that user data contains SQL,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ETake an example. Application is asking user to enter user name,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:________________________\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:___\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003Ejayesh'; delete from user where id='1\u003C\/b\u003E\u003C\/span\u003E__\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt Server Side,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \"\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\"\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EFinal Query\u003C\/b\u003E \u003Cb\u003E=\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"select * from user where username = ' \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E ' \";\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you observe final query, upon execution it will delete the record from user table which was never the purpose of original query and this is called SQL Injection attack.\u0026nbsp; \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBecause of user data (\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ewhich can be anything and uncontrolled) \u003C\/span\u003Einvolvement in formation of query, SQL Injection attack can happen.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #134f5c;\"\u003E\u003Cb\u003EDetailed explanation on\u003C\/b\u003E: \u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003EHow can SQL Injection happen?\u003C\/a\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow PreparedStatement in Java prevents SQL Injection?\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ETo understand this, Lets see steps involved in query execution.\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E1. Compilation Phase.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E2. Execution Phase.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhenever SQL server engine receives a query, It has to pass through below phases, \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s1600\/QueryExecutionPhases.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"282\" src=\"https:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s640\/QueryExecutionPhases.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-zIXPbZKGtAU\/VfbRFTEco4I\/AAAAAAAAAV4\/LeT-4DN7Ywg\/s1600\/SQLInjection.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-zIXPbZKGtAU\/VfbRFTEco4I\/AAAAAAAAAV4\/LeT-4DN7Ywg\/s1600\/SQLInjection.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003C\/a\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1. Parsing and Normalization Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; In this phase, Query is checked for syntax and semantics. It checks whether references table and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; columns used in query exist or not.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It also has many other task to do, Let's not go in much detail.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E2. Compilation Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; \u003C\/b\u003EIn this phase, keywords used in query like \u003Cb\u003Eselect\u003C\/b\u003E,\u003Cb\u003E from\u003C\/b\u003E, \u003Cb\u003Ewhere\u003C\/b\u003E etc are converted into format\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; understandable by machine.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; This is the phase where query is interpreted and corresponding action to take is decided.\u003C\/b\u003E \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It also has many other task to do, Let's not go in much detail.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3. Query Optimization Plan\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp; In this phase, Decision Tree is created for finding the ways in which query can be executed.\u003Cb\u003E \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; It find out the number of ways in which query can be executed and cost associated with each way \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; of executing Query.\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; It choose the best plan for executing a query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4. Cache\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003C\/b\u003EBest plan selected in Query optimization plan is stored in cache, so that whenever next\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; time\u003Cb\u003E \u003C\/b\u003Esame query come in, it doesn't has to pass through Phase 1, Phase 2 and Phase 3.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; When next time query come in, it will be checked directly in Cache and picked up from there\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; and execute.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E5. Execution Phase\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/b\u003E In this phase, supplied query gets executed and data is returned to user as ResultSet object.\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003C\/h3\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBehaviour of PreparedStatement API on above steps?\u003C\/span\u003E\u003C\/h3\u003E\u003Chr\/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E PreparedStatement are not complete SQL query and contains placeholder, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; which at run time is replaced by actual user data.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E2. \u003C\/b\u003EWhenever any PreparedStatment containing placeholders is passed in to SQL Server engine, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It passes through below phases \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EUPDATE user set username=? and password=? WHERE id=?\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3. \u003C\/b\u003EAbove query will get parsed, compiled with placeholders as special treatment, optimized and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; get Cached.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003Cb\u003E\u003C\/b\u003E Query at this stage is already compiled and converted in machine understandable format.\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So we can say that Query stored in cache is Pre-Compiled means already compiled and \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; only placeholders need to be replaced with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4.\u003C\/b\u003E Now at run-time when user data comes in, Pre-Compiled Query is picked up from Cache and\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; placeholders are replaced with user data.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/--zpgQRL3mEc\/VfcdVU-9QKI\/AAAAAAAAAWY\/d3xZYZcUR5g\/s1600\/PrepareStatement.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"212\" src=\"https:\/\/2.bp.blogspot.com\/--zpgQRL3mEc\/VfcdVU-9QKI\/AAAAAAAAAWY\/d3xZYZcUR5g\/s640\/PrepareStatement.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E(Remember, after place holders are replaced with user data, final query is not \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; compiled\/interpreted again and SQL Server engine treats user data as pure data and not a\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; SQL that needs to be parsed or compiled again and that is beauty of PreparedStatement.)\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cspan style=\"color: #0b5394;\"\u003EIf the query doesn't has to go through compilation phase again, then whatever data is replaced to\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; placeholders are treated as pure data and has no meaning to SQL Server engine and it directly\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; executes the query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Note: It is the compilation phase after parsing phase, that understands\/interprets the query\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; structure and give meaningful behavior to it. In case of PreparedStatement, query is\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; compiled only once and cached compiled query is picked up all the time to replace \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; user data and execute.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Due to one time compilation feature of PreparedStatement, it is free of SQL Injection\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; attack.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ESUMMARY\u003C\/b\u003E:\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; PrepareStatment query which is incomplete and contain placeholders is first compiled.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp; In the compilation phase, actual query is parsed and at this point only, any inner queries or \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; any sub queries are checked. \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; After this phase query is optimized and saved in Cache.\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Now, when user data comes in, Pre-compiled Query is picked from Cache and placeholders are\u0026nbsp;\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; replaced with user data. \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; After user data replacement, final Query formed is not compiled again since it is Pre-Compiled, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Now, if user data contain any SQL then also it has no effect and will be treated as pure data.\u003Cbr \/\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; (Remember if query is compiled again then only it will treat data as SQL if it contains.)\u003C\/b\u003E \u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EWhy to use PreparedStatement instead of Statement API in Java?\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E \u003C\/span\u003E\u003C\/h3\u003E\u003Chr\/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E Whenever Query is executed using Statement in java, then Query contains all the necessary data \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; for execution\u003Cb\u003E.\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; \u003C\/b\u003EQuery is supplied to SQL Server engine after placeholder replacement with user data.\u003C\/span\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"SELECT * FROM user WHERE username = ' \" + username + \" ' \";\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E2. \u003C\/b\u003ENow at run time, if user supplied data\u0026nbsp;contains SQL\u003Cb\u003E \u003C\/b\u003Elike,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; username = jayesh'; delete from user where id='1 \u003C\/b\u003Ethen query becomes,\u003C\/span\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eselect * from user where username='jayesh'; delete from user where id='1';\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E3.\u003C\/b\u003E This final query is now supplied to SQL Server engine, which pass through all the below phases,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E4.\u003C\/b\u003E In Compilation phase, Query supplied will became,\u003C\/span\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='jayesh'; \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; delete from user where id='1';\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: red;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; and here the problem starts. So Statement API is prone to SQL Injection attack.\u003C\/span\u003E\u003C\/span\u003E  \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003ENOTE:\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; So problem with Statement API is query is not pre-compiled.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; In original query with placeholders, user data is first replaced and modified query is passed to\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SQL Server engine which runs compilation phase every time on query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp; In compilation phase, if user data contains SQL then that will be converted into instructions and\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; get executed which is not the case with PreparedStatment where compilation of query happens\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; only one time.\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E5. \u003C\/b\u003EWhen Compared to PreparedStatement\u003Cb\u003E,\u003C\/b\u003E Statement API are not Pre-Compiled and whenever\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; supplied to \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine, it passes through compilation phase, which doesn't differentiate \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; over user input and SQL and that is where problem starts.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E6.\u003C\/b\u003E In \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EPreparedStatement, SQL is supplied to \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine with place holders which doesn't \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; contain any user data. \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESQL Server engine passes the query to all above phases and keep it in ready \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; to run state, where only place holder replacement is remaining.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So whenever user data is supplied, placeholders are replaced with data and final query is executed\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; without compiling and that is where user data is treated as pure data and if SQL is supplied in data\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; that will be treated as data. \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EImportatnt benefits of PreparedStatement in Java? \u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E1. \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow, from above observation we saw that whenever a query is executed using PreparedStatment, \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; It passes through below phases,\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eand keep the SQL query in Pre-Compiled state.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003Cb\u003E1.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EParsing and Normalization Phase\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 2.\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003ECompilation Phase\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 3.\u003C\/b\u003E Query Optimization Plan\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; 4. \u003C\/b\u003ECache (Compiled Query with placeholders are stored in Cache.)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; \u0026nbsp; \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; So now, if we need to run a query 10 times or 100 times, it doesn't has to pass through all the\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; above phases\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E and can run quickly by simply replacing placeholders in Pre-Compiled query.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; This feature of PreparedStatement gives better performance.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E6. \u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003ESince \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EPreparedStatement are compiled only once, it helps SQL Injection\u003C\/b\u003E attacks while\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Statement is prone to SQL Injection due to its every time compile nature.\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.com\/2015\/09\/what-is-sql-injection.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EExplain SQL Injection with example?\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E \u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/8445747380071022651\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2015\/09\/how-prepared-statement-in-java-prevents-sql-injection.html#comment-form","title":"2 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/8445747380071022651"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/8445747380071022651"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2015\/09\/how-prepared-statement-in-java-prevents-sql-injection.html","title":"How PreparedStatement in Java prevents SQL Injection?"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/3.bp.blogspot.com\/-Ru6lCV80PTE\/Vfb44kaVfvI\/AAAAAAAAAWI\/6lLFVMsbe3E\/s72-c\/QueryExecutionPhases.png","height":"72","width":"72"},"thr$total":{"$t":"2"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-4648525225407082247"},"published":{"$t":"2015-09-14T02:38:00.001-07:00"},"updated":{"$t":"2016-08-12T23:05:05.052-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Database"}],"title":{"type":"text","$t":"What is SQL Injection?"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EExplain SQL Injection\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E along with example?\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EThis is the famous interview question for the beginners, So Let's see what it is all about.\u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ESQL Injection is code injection technique where SQL is injected by user (as part of user input) into the back end query. Injected SQL data alters the purpose of original query and upon execution can gives harmful result. \u003C!-- adsense --\u003E\u003Cb\u003EA SQL injection attack is very dangerous and attacker can,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E1. Read sensitive data from the database.\u003Cbr \/\u003E2. Update database data (Insert\/Update\/Delete).\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E3. Slowdown the complete Database system etc.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-gHP66NHsFRs\/VfaWdrg1HhI\/AAAAAAAAAVo\/Dgt0PZr-q2U\/s1600\/How-SQL-Injection-happen.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"408\" src=\"https:\/\/1.bp.blogspot.com\/-gHP66NHsFRs\/VfaWdrg1HhI\/AAAAAAAAAVo\/Dgt0PZr-q2U\/s640\/How-SQL-Injection-happen.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-SAoX017dURw\/VfaUAyx70cI\/AAAAAAAAAVc\/Ov2tiSoNn94\/s1600\/How-SQL-Injection-happen.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cbr \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cspan style=\"color: #0b5394;\"\u003EAt server side, generally, query is not complete without user data.\u003Cbr \/\u003ELet's understand by taking one example, say you want to get user details, for that query will be,\u003Cbr \/\u003E\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\"select * from user where username = ' \" + username + \" ' \"; \u003C\/b\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIs the above query complete and ready to execute? NO. there is dependency on user data.\u003Cbr \/\u003E\u003Cbr \/\u003Eusername\u003C\/b\u003E here is the placeholder, which is going to be replaced by actual user name of the person stored in our database.\u003Cbr \/\u003EWe ask user to enter his\/her username, which is going to fill our placeholder username.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EClient\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ELets take a input from user,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003Cbr \/\u003EEnter your user name: ___________________\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003EDo we have control on what user is going to fill in username? NO. say user entered,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E1.\u003C\/b\u003E user can fill name of animal and press submit \u003Cb\u003E(\u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = dog\u003C\/span\u003E)\u003C\/b\u003E or,\u003Cbr \/\u003E\u003Cb\u003E2.\u003C\/b\u003E user can fill name of some hospital and press submit \u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E(\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eapollo\u003C\/span\u003E\u003C\/span\u003E)\u003C\/b\u003E \u003C\/span\u003Eor,\u003Cbr \/\u003E\u003Cb\u003E3.\u003C\/b\u003E user can fill some junk data say $$##^^aahh* and press submit \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E(\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E$$##^^aahh*\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E)\u003C\/b\u003E \u003C\/span\u003E\u003C\/span\u003Eor,\u003Cbr \/\u003E\u003Cb\u003E4. \u003C\/b\u003Euser can fill query like say \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E and press submit \u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; \u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E(\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E)\u003C\/span\u003E\u003C\/span\u003E.\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003C\/b\u003E\u003C\/span\u003E \u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EServer\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EBehavior of user input on server data\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E1.\u003C\/b\u003E \u003Cb\u003Eusername = dog\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Query will turn into,\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='dog';\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E2.\u003C\/b\u003E \u003Cb\u003Eusername = apollo\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Query will turn into,\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='apollo';\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E3. username = $$##^^aahh*\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Query will turn into,\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='$$##^^aahh*';\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E4. username = jayesh'; delete from user where id='1\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; Query will turn into,\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='jayesh'; delete from user where id='1';\u003Cbr \/\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cu\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EHow our application will behave in above cases?\u003C\/b\u003E\u0026nbsp;\u003C\/span\u003E\u003C\/u\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp; 1. For \u003Cb\u003ECase 1, 2 and 3\u003C\/b\u003E it may or may not have harmful behavior but \u003Cbr \/\u003E\u0026nbsp;\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: red;\"\u003E\u0026nbsp; 2. For\u003Cb\u003E Case 4,\u003C\/b\u003E it is sure that we are in trouble, \u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Appending user data to\u003Cb\u003E \u003C\/b\u003Eour query template, turned query template into 2 queries and our SQL\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; server engine will execute 2 queries separately.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #38761d;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1. Select Query.\u003C\/b\u003E\u003Cbr \/\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; select * from user where username='jayesh'; \u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: red;\"\u003E\u003Cb\u003E\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2. Delete Query (This query will delete user record, which was never intended.)\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp; \u0026nbsp;\u003Cspan style=\"color: red;\"\u003E delete from user where id='1';\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EThis indirect way of injecting SQL code inside the query is called SQL Injection.\u003C\/span\u003E\u003C\/h3\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 18px;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ESUMMARY\u003C\/b\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt server side, \u003C\/b\u003Equeries generally by themselves are not complete and require user data to make it complete, meaningful and executable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cblockquote class=\"tr_bq\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\"select * from user where username = ' \" + username + \" ' \";\u003C\/b\u003E\u003C\/span\u003E\u003C\/blockquote\u003E\u003Cspan style=\"color: #0b5394;\"\u003EAbove query is not complete as it has dependency on username variable.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003ENow if username variable is filled by third party, then there are chances that user data contains SQL,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003ETake an example. Application is asking user to enter user name,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:________________________\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnter user name:___\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003Ejayesh'; delete from user where id='1\u003C\/b\u003E\u003C\/span\u003E__\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EAt Server Side,\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eusername = \"\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\"\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EFinal Query\u003C\/b\u003E \u003Cb\u003E=\u003C\/b\u003E \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\"select * from user where username = ' \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ejayesh'; delete from user where id='1\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E ' \";\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf  you observe final query, upon execution it will delete the record from  user table which was never the purpose of original query and this is  called SQL Injection attack.\u0026nbsp; \u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EBecause of user data (\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Ewhich can be anything and uncontrolled) \u003C\/span\u003Einvolvement in formation of query, SQL Injection attack can happen.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Ch3 style=\"font-size: 20px; text-align: center;\"\u003E\u003Cspan style=\"color: #444444;\"\u003EYou may also like to see\u003C\/span\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/javabypatel.blogspot.in\/2015\/09\/how-prepared-statement-in-java-prevents-sql-injection.html\" target=\"_blank\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EHow prepared statement prevents SQL Injection?\u003C\/span\u003E\u003C\/a\u003E\u003C\/h4\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/4648525225407082247\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2015\/09\/what-is-sql-injection.html#comment-form","title":"5 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/4648525225407082247"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/4648525225407082247"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2015\/09\/what-is-sql-injection.html","title":"What is SQL Injection?"}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-gHP66NHsFRs\/VfaWdrg1HhI\/AAAAAAAAAVo\/Dgt0PZr-q2U\/s72-c\/How-SQL-Injection-happen.png","height":"72","width":"72"},"thr$total":{"$t":"5"}},{"id":{"$t":"tag:blogger.com,1999:blog-4024526618507914143.post-2514294706992344570"},"published":{"$t":"2015-07-16T00:02:00.000-07:00"},"updated":{"$t":"2016-05-03T08:39:10.707-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Database"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Miscellaneous"}],"title":{"type":"text","$t":"How to enable or allow remote access to PostgreSQL database server."},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EFor\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E enabling \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003Eremote access to\u0026nbsp;\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EPostgreSQL \u003C\/b\u003Edatabase server,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-WbjhW6PUgdQ\/VadUwQeJpuI\/AAAAAAAAAH4\/D59Yo1hEhn0\/s1600\/pgsql-logo.png\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"https:\/\/1.bp.blogspot.com\/-WbjhW6PUgdQ\/VadUwQeJpuI\/AAAAAAAAAH4\/D59Yo1hEhn0\/s1600\/pgsql-logo.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cspan style=\"color: #0b5394;\"\u003EThere are 2 main PostgreSQL configuration files that need to be changed to allow remote connections.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E1. postgresql.conf\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E2. pg_hba.conf\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Ch3\u003Epostgresql.conf\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIt will be located in PostgreSQL installed directory,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIn Linux, You may find file at location below,\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\/var\/lib\/pgsql\/data\/\u003C\/span\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\/etc\/postgresql\/9.1\/main\/\u003C\/span\u003E\u003C\/li\u003E\u003C\/ol\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIn Windows, \u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EYou may find file at location below,\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003E\u003Cspan style=\"color: #0b5394;\"\u003EC:\/ProgramData\/PostgreSQL\/9.3\/postgresql.conf\u003C\/span\u003E\u003C\/li\u003E\u003C\/ol\u003E\u003Cbr\/\u003E\u003C!-- adsense --\u003E\u003Cbr\/\u003E\u003Cspan style=\"color: #741b47;\"\u003E\u003Cspan style=\"color: #741b47;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EFor exact location of \"postgresql.conf\" file, run the below command in psql command prompt.\u003C\/span\u003E\u003C\/b\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003ESHOW config_file;\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cspan style=\"color: #741b47;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EOpen the file and search for \u003Cb\u003E\"listen_addresses\"\u003C\/b\u003E and set listen_addresses parameter to,\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003Elisten_addresses = '*'\u003C\/pre\u003E\u003Cbr\/\u003E\u003Ch3\u003Epg_hba.conf\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003E \u003C\/span\u003E\u003C\/b\u003E\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIt will be located in several directory, depending on how postgresql is installed\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIn Linux, \u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EYou may find file at location below,\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\/home, \u003C\/span\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\/var\/lib\/pgsql,\u0026nbsp;\u003C\/span\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\/var\/lib\/postgresql\/[version]\/,\u0026nbsp;\u003C\/span\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\/opt\/postgres\/ \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u0026nbsp;\u003C\/span\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\/etc\/postgresql\/\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E[version]\u003C\/span\u003E\/main\/\u003C\/span\u003E\u003C\/li\u003E\u003C\/ol\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIn Windows, \u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EYou may find file at location below,\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003E\u003Cspan style=\"color: #0b5394;\"\u003EC:\/ProgramData\/PostgreSQL\/9.3\/pg_hba.conf\u003C\/span\u003E\u003C\/li\u003E\u003C\/ol\u003E\u003Cspan style=\"color: #741b47;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #741b47;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EFor exact location of \"pg_hba.conf\" file, run the below command in psql command prompt.\u003C\/span\u003E\u003C\/b\u003E\u003C\/span\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003ESHOW hba_file; \u003C\/pre\u003E\u003Cbr\/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIf you want PostgreSQL to accept incoming connection from any IP address then add entry like below,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003E host             all             all             0.0.0.0\/0             md5 \u003C\/pre\u003E\u003Cbr\/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIf you want PostgreSQL to accept incoming connection from particular IP address, say \u003C\/span\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E192.168.82.2 \u003C\/span\u003Ethen add entry in \u003C\/span\u003E\u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003Epg_hba.conf file \u003C\/span\u003Elike below,\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003Ehost             all             all            192.168.82.2\/24       md5 \u003C\/pre\u003E\u003Cbr\/\u003E\u003Ch3\u003EReload Configuration\u003C\/h3\u003E\u003Chr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EAfter the changes are done, you have to reload the configuration as a superuser. run below command,\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003ESELECT pg_reload_conf(); \u003C\/pre\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EDone.\u003C\/b\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIf \u003C\/span\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003EPostgreSQL is still not accepting remote connection then \u003C\/span\u003Etry restarting the PostgreSQL service like below.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIn Linux,\u003C\/span\u003E\u003C\/b\u003E\u003Cspan style=\"color: #0b5394;\"\u003E If your PostgreSQL service name is \"postgresql\" then execute below command\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003Eservice postgresql restart\u003C\/pre\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EIn Windows, You can find service at \u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:java\"\u003EStart Menu ---\u0026gt; Search \"Run\" ---\u0026gt; Type \"Services.msc\" ---\u0026gt; Search \"PosgreSQL\"  \u003Cbr \/\u003E ---\u0026gt; Right click and select Restart Service.\u003C\/pre\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EDone.\u003C\/span\u003E\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #0b5394;\"\u003EEnjoy !!!!\u003C\/span\u003E\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;\u003C\/b\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cspan style=\"color: #0b5394;\"\u003E\u003Cb\u003EIf you find any issue in post or face any error while implementing, Please comment.\u003C\/b\u003E\u003C\/span\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/javabypatel.blogspot.com\/feeds\/2514294706992344570\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2015\/07\/enable-remote-access-to-postgresql-database-server.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/2514294706992344570"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4024526618507914143\/posts\/default\/2514294706992344570"},{"rel":"alternate","type":"text/html","href":"http:\/\/javabypatel.blogspot.com\/2015\/07\/enable-remote-access-to-postgresql-database-server.html","title":"How to enable or allow remote access to PostgreSQL database server."}],"author":[{"name":{"$t":"JavaByPatel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/09708930365600138535"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-WbjhW6PUgdQ\/VadUwQeJpuI\/AAAAAAAAAH4\/D59Yo1hEhn0\/s72-c\/pgsql-logo.png","height":"72","width":"72"},"thr$total":{"$t":"0"}}]}});
<!DOCTYPE html>
<!-- saved from url=(0060)https://dzone.com/articles/common-fork-join-pool-and-streams -->
<html xmlns:ng="http://angularjs.org" id="ng-app" lang="en" ng-app="TH" class="ng-scope"><head ng-controller="DZHeadController" class="ng-scope"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <meta name="description" ng-attr-content="{{ service.description }}" content="Parallel streams are a boon to concurrency, and Common Fork Join Pools are an important part of that interaction. This overview should shed some light on how they work.">
    <meta name="keywords" ng-attr-content="{{ service.keywords }}" content="java,java 8 streams,fork join,tutorial,parallel streams">

    <meta property="og:description" ng-attr-content="{{ service.description }}" content="Parallel streams are a boon to concurrency, and Common Fork Join Pools are an important part of that interaction. This overview should shed some light on how they work.">

    <meta ng-attr-content="{{ service.noIndex ? &#39;noindex&#39; : &#39;&#39; }}" ng-attr-name="{{ service.noIndex ? &#39;robots&#39; : &#39;&#39; }}" name="" content="">

    <meta property="og:site_name" ng-attr-content="{{ service.siteName }}" content="dzone.com">
    <meta property="og:title" ng-attr-content="{{ service.title }}" content="Common Fork Join Pool and Streams - DZone Java">
    <meta property="og:url" ng-attr-content="{{ service.canonical }}" content="https://dzone.com/articles/common-fork-join-pool-and-streams">
    <!-- ngIf: service.img --><meta ng-if="service.img" ng-attr-content="{{ service.img }}" property="og:image" content="//dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg" class="ng-scope"><!-- end ngIf: service.img -->
    <!-- ngIf: service.type --><meta ng-if="service.type" ng-attr-content="{{ service.type }}" property="og:type" content="tutorial" class="ng-scope"><!-- end ngIf: service.type -->

    <meta name="twitter:site" content="@DZoneInc">
    <!-- ngIf: service.twitterImage -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:description" ng-attr-content="{{ service.description }}" content="Parallel streams are a boon to concurrency, and Common Fork Join Pools are an important part of that interaction. This overview should shed some light on how they work.">
    <meta name="twitter:title" ng-attr-content="{{ service.title }}" content="Common Fork Join Pool and Streams - DZone Java">

    <!-- ngIf: service.wordCount --><meta ng-if="service.wordCount" property="article:wordcount" ng-attr-content="{{service.wordCount}}" content="1014" class="ng-scope"><!-- end ngIf: service.wordCount -->
    <meta name="referrer" content="origin">
    <meta name="google-site-verification" content="kndbhxcupfEqWmZclhCpB6vlgOs7QSmx2UHAGGnP2mA">

    <link rel="dns-prefetch" href="https://www.googletagservices.com/">
    <link rel="dns-prefetch" href="https://secure.adnxs.com/">
    <link rel="dns-prefetch" href="https://hn.inspectlet.com/">
    <link rel="dns-prefetch" href="https://inspectletws.herokuapp.com/">
    <link rel="dns-prefetch" href="https://www.google-analytics.com/">
    <link rel="dns-prefetch" href="https://a.optnmstr.com/">
    <link rel="dns-prefetch" href="https://ajax.googleapis.com/">
    <link rel="dns-prefetch" href="https://cdn.inspectlet.com/">
    <link rel="dns-prefetch" href="https://csi.gstatic.com/">

    <link rel="image_src" ng-href="//dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg" href="https://dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg">

    <!-- ngIf: service.prevPage -->
    <!-- ngIf: service.nextPage -->
    <link rel="icon" type="image/x-icon" href="https://dzone.com/themes/dz20/images/favicon.png">

    <title ng-bind="service.title" class="ng-binding">Common Fork Join Pool and Streams - DZone Java</title>

    <meta name="df-verify" content="df0d76632b4543">

<link rel="stylesheet" type="text/css" href="./Common Fork Join Pool and Streams - DZone Java_files/combined.css" charset="utf-8"><link rel="stylesheet" type="text/css" href="./Common Fork Join Pool and Streams - DZone Java_files/combined(1).css" charset="utf-8"><script src="./Common Fork Join Pool and Streams - DZone Java_files/pubads_impl_rendering_2020013001.js"></script><script type="text/javascript" async="" src="./Common Fork Join Pool and Streams - DZone Java_files/js"></script><script type="text/javascript" async="" src="./Common Fork Join Pool and Streams - DZone Java_files/tag.aspx"></script><script type="text/javascript" async="" src="./Common Fork Join Pool and Streams - DZone Java_files/analytics.js"></script><script type="text/javascript" async="" src="./Common Fork Join Pool and Streams - DZone Java_files/linkid.js"></script><link rel="preload" href="./Common Fork Join Pool and Streams - DZone Java_files/f.txt" as="script"><script type="text/javascript" src="./Common Fork Join Pool and Streams - DZone Java_files/f.txt"></script><link rel="preload" href="./Common Fork Join Pool and Streams - DZone Java_files/f(1).txt" as="script"><script type="text/javascript" src="./Common Fork Join Pool and Streams - DZone Java_files/f(1).txt"></script><script src="./Common Fork Join Pool and Streams - DZone Java_files/pubads_impl_2020013001.js" async=""></script><link rel="prefetch" href="https://tpc.googlesyndication.com/safeframe/1-0-37/html/container.html"></head>
<body>

    <script async="" src="./Common Fork Join Pool and Streams - DZone Java_files/gtm.js"></script><script async="" src="./Common Fork Join Pool and Streams - DZone Java_files/analytics.js"></script><script async="" type="text/javascript" src="./Common Fork Join Pool and Streams - DZone Java_files/gpt.js"></script><script type="application/ld+json">
        {
            "@context": "https://schema.org",
            "@type": "Organization",
            "url": "https://dzone.com",
            "logo": "https://dzone.com/themes/dz20/images/dz_cropped.png",
            "contactPoint": [{
                "@type": "ContactPoint",
                "telephone": "+1-919-678-0300",
                "contactType": "customer service"
            }]
        }
    </script>

    <div class="ng-toast ng-toast--right ng-toast--bottom ng-toast--animate-fade"><ul class="ng-toast__list"><!-- ngRepeat: message in messages --></ul></div>

    <div class="container-fluid header" th-element="header" th-element-groups="[]" ng-hide="$root.isHidden(&#39;header&#39;)" data-th-element-name="header"><div class="row mainHeaderRow" th-element="mainHeaderRow" th-element-groups="[&#39;header&#39;]" ng-hide="$root.isHidden(&#39;mainHeaderRow&#39;)" data-th-element-name="mainHeaderRow"><div class="col-md-12 mainHeader headerHeaderV2 oUhbWOfRPSwBoUhM ng-scope" th-element="mainHeader" th-element-groups="[&#39;header&#39;,&#39;mainHeaderRow&#39;]" ng-hide="$root.isHidden(&#39;mainHeader&#39;)" data-th-element-name="mainHeader" data-th-widget="header.headerV2" data-widget-header-header-v2="" ng-controller="mainHeader" style="height: 1px; margin-top: 0px;">
<script type="text/ng-template" id="like-article.html">
        <div class="dz-like"
             ng-class='{liked: status.liked}'
             ng-click='like()'

<a href="#">
    <i ng-class="{'icon-thumbs-up-alt': status.liked, 'icon-thumbs-up liked': !status.liked}"></i>
    <span>Like ({{ status.score }})</span>
</a>
</div>
</script>

<script type="text/ng-template" id="refcard-save.html">
    <button type="button" ng-class="{'icon-star gold': status.saved, 'icon-star-empty': !status.saved}"
            ng-click="save()" class="btn btn-save btn-lg"><span class="save-title">Save</span><span ng-if="status.saved"
                                                                                                    class="d-letter">D</span>
    </button>
</script>

<div class="header-top">
    <div class="header-container">
        <div class="pull-left logo-container">
            <div class="logo">
                <a class="inner" href="https://dzone.com/"><img src="./Common Fork Join Pool and Streams - DZone Java_files/dz_cropped.png" alt="DZone"></a>
            </div>

        <div class="active-portal"><a href="https://dzone.com/java-jdk-development-tutorials-tools-news">Java Zone</a></div>
        </div>

        <div class="pull-right login-and-search">

                <div class="dz-intro">Over a million developers have joined DZone.</div>
                <!-- ngIf: !$root.user.authenticated --><div class="mobile-invisible sign-in-join ng-scope" ng-if="!$root.user.authenticated"><a href="https://dzone.com/articles/common-fork-join-pool-and-streams#" ng-click="login()">Log In</a> <span class="dz-intro-span">/</span> <a href="https://dzone.com/articles/common-fork-join-pool-and-streams#" ng-click="signIn()">Join</a></div><!-- end ngIf: !$root.user.authenticated -->
                <button class="join-icon"><!-- ngIf: !$root.user.authenticated --><i class="icon-user ng-scope" ng-if="!$root.user.authenticated" ng-click="login()"></i><!-- end ngIf: !$root.user.authenticated --></button>
                <div class="headerSearch">
                    <button class="icon-search dropdown-toggle" ng-click="focusSearch()" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                        <li>
                            <form class="form-wrapper ng-pristine ng-invalid ng-invalid-required">
                                <label for="search" class="sr-only">Search</label>
                                <input id="search" role="search" ng-model="searchT" type="text" placeholder="Search" required="" class="ng-pristine ng-untouched ng-invalid ng-invalid-required">
                                <input type="button" value="Search" class="btn btn-action search-button" ng-click="allResults()" ng-disabled="searchT.length &lt; 3" disabled="disabled">
                            </form>
                        </li>

                      <div class="results-area">
                          <div class="col-md-12"><th-loader flag="loading" class="ng-isolate-scope"><div ng-show="flag" class="loading-indicator ng-hide"><i class="icon-spin6 animate-spin"></i></div></th-loader></div>
                          <!-- ngRepeat: node in nodes -->
                      </div>

                      <!-- ngIf: totalResults || haveResults -->
                    </ul>
                </div>

        </div>
    </div>
</div>

<div class="header-bottom">



    <ul class="portals header-container scrollable-ul">
            <li>
                <a href="https://dzone.com/refcardz" id="header-refcardz">
                    <em>
                      Refcardz
                    </em>
                </a>
            </li>
            <li>
                <a href="https://dzone.com/research" id="header-research">
                    <em>
                      Research
                    </em>
                </a>
            </li>
            <li>
                <a href="https://dzone.com/webinars" id="header-webinars">
                    <em>
                      Webinars
                    </em>
                </a>
            </li>
            <li class="last-portal-link">
                <a href="https://dzone.com/portals" id="header-portals" ng-click="toggleZones(&#39;/portals&#39;, $event)">
                    <em>
                      Zones
                      <span class="collapsible-toggle ">
                        <i class="icon-angle-down"></i>
                        <i class="icon-angle-up"></i>
                      </span>
                    </em>
                </a>
            </li>

        <li class="separator" aria-hidden="true" style="color: #d9dcdd">|</li>
        <li class="portal-topics ">
          <ul>
                <li>
                    <a href="https://dzone.com/agile-methodology-training-tools-news" id="header-2" ng-class="{&#39;active-state&#39;: isActivePortal(2)}">
                        Agile
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/artificial-intelligence-tutorials-tools-news" id="header-4001" ng-class="{&#39;active-state&#39;: isActivePortal(4001)}">
                        AI
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/big-data-analytics-tutorials-tools-news" id="header-3" ng-class="{&#39;active-state&#39;: isActivePortal(3)}">
                        Big Data
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/cloud-computing-tutorials-tools-news" id="header-4" ng-class="{&#39;active-state&#39;: isActivePortal(4)}">
                        Cloud
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/database-sql-nosql-tutorials-tools-news" id="header-5" ng-class="{&#39;active-state&#39;: isActivePortal(5)}">
                        Database
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/devops-tutorials-tools-news" id="header-6" ng-class="{&#39;active-state&#39;: isActivePortal(6)}">
                        DevOps
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/enterprise-integration-training-tools-news" id="header-7" ng-class="{&#39;active-state&#39;: isActivePortal(7)}">
                        Integration
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/iot-developer-tutorials-tools-news-reviews" id="header-8" ng-class="{&#39;active-state&#39;: isActivePortal(8)}">
                        IoT
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/java-jdk-development-tutorials-tools-news" id="header-1" class="active-state" ng-class="{&#39;active-state&#39;: isActivePortal(1)}">
                        Java
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/microservices-news-tutorials-tools" id="header-6001" ng-class="{&#39;active-state&#39;: isActivePortal(6001)}">
                        Microservices
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/open-source-news-tutorials-tools" id="header-7001" ng-class="{&#39;active-state&#39;: isActivePortal(7001)}">
                        Open Source
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/apm-tools-performance-monitoring-optimization" id="header-10" ng-class="{&#39;active-state&#39;: isActivePortal(10)}">
                        Performance
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/application-web-network-security" id="header-2001" ng-class="{&#39;active-state&#39;: isActivePortal(2001)}">
                        Security
                    </a>
                </li>
                <li>
                    <a href="https://dzone.com/web-development-programming-tutorials-tools-news" id="header-11" ng-class="{&#39;active-state&#39;: isActivePortal(11)}">
                        Web Dev
                    </a>
                </li>
          </ul>
        </li>
    </ul>
</div></div></div></div><div class="container-fluid body withSlider" th-element="body" th-element-groups="[]" ng-hide="$root.isHidden(&#39;body&#39;)" data-th-element-name="body"><div class="row mainContentRow" th-element="mainContentRow" th-element-groups="[&#39;body&#39;]" ng-hide="$root.isHidden(&#39;mainContentRow&#39;)" data-th-element-name="mainContentRow"><div class="col-md-12 announcementBar1 announcementBar oUhbYlrRaqMaoUhM ng-scope" th-element="announcementBar1" th-element-groups="[&#39;body&#39;,&#39;mainContentRow&#39;]" ng-hide="$root.isHidden(&#39;announcementBar1&#39;)" data-th-element-name="announcementBar1" data-th-widget="announcementBar" data-widget-announcement-bar="" ng-controller="announcementBar1" style="margin-bottom: 10px;"><!-- ngIf: announcement && toShow --><div ng-if="announcement &amp;&amp; toShow" back-img="" hasimage="false" img="https://dz2cdn1.dzone.com/notificationImage.html?id=4162299" imgbackup="/notificationImage.html?id=4162299" id="acontainer" class="ann-container ng-scope" style="margin-right: -310px; margin-left: -310px;">
    <div class="ann-body ng-binding">Let us know how you like to work in this quick survey!</div><!-- ngIf: announcement.link --><a ng-if="announcement.link" class="ann-link ng-binding ng-scope" ng-click="track(announcement.id)" ng-ref="https://www.surveygizmo.com/s3/5426143/AnswerHub-2020-State-of-the-Developer-Survey">Take the Survey<span class="icon-right-dir"></span></a><!-- end ngIf: announcement.link -->
</div><!-- end ngIf: announcement && toShow -->
</div><div class="col-md-12 articleContent4 articleContent oUhbblYOaqbcblYOaqbcC ng-scope" th-element="articleContent4" th-element-groups="[&#39;body&#39;,&#39;mainContentRow&#39;]" ng-hide="$root.isHidden(&#39;articleContent4&#39;)" data-th-element-name="articleContent4" data-th-widget="article.content" data-widget-article-content="" header-change-trigger="" ng-controller="articleContent4">
<script type="text/ng-template" id="like-article.html">
        <div class="dz-like"
             ng-class='{liked: status.liked}'
             ng-click='like()'

<a href="#">
    <i ng-class="{'icon-thumbs-up-alt': status.liked, 'icon-thumbs-up liked': !status.liked}"></i>
    <span>Like ({{ status.score }})</span>
</a>
</div>
</script>

<script type="text/ng-template" id="link-article-save.html">
    <div class="save "
         ng-class="{'icon-star gold': status.saved, 'icon-star-empty': !status.saved}"
         ng-click="save()"><span
                class="action-label">
                {{ status.saved ? 'Saved' : 'Save' }}</span></div>
</script>

<script type="text/ng-template" id="like-article.html">
    <div class="dz-like" ng-class="{'icon-thumbs-up-alt liked': status.liked, 'icon-thumbs-up': !status.liked}" ng-click="like()"><span class="action-label"><span>Like</span><span ng-if="status.liked" class="d-letter">d</span></span>
        <a href="#">
            <span>({{ status.score }})</span>
        </a>
    </div>
</script>

<!-- ngIf: articles[0].id == 1458130 --><div class="articles-wrap ng-scope" ng-if="articles[0].id == 1458130">
        <!-- ngIf: ads.top.show() && articles[0].readyForAd --><div ng-if="ads.top.show() &amp;&amp; articles[0].readyForAd" class="ad-container ng-scope">
            <div dc-slot="ads.top.slot()" tags="ads.top.tags(articles[0])" size="ads.top.size()" class="ng-isolate-scope" id="div-gpt-ad-1435246566686-0" style=""><div id="google_ads_iframe_/2916070/dz2_article_billboard_new_0__container__" style="border: 0pt none; width: 728px; height: 90px;"></div></div>
        </div><!-- end ngIf: ads.top.show() && articles[0].readyForAd -->


    <div>
        <th-if-scroll relative-to="top" from="0" to="50" callback="activateT(articles[0])" class="ng-isolate-scope"></th-if-scroll>
    </div>


    <!-- ngIf: articles[0].id == 1458130 --><div class="article-stream widget-top-border ng-scope" ng-class="{&#39;widget-top-border&#39;: articles[0].published }" ng-if="articles[0].id == 1458130">
    <div class="social-media-icons mobile-only ng-scope" follow-dzone="">
<div class="top-social">
    <p>Let's be friends:</p>
    <ul class="icons-only ng-isolate-scope" ng-class="{open: isOpen}" click-outside="outside()">
        <li class="rss-icon" id="rss-spotlight-1">
            <a href="https://dzone.com/pages/feeds"><i class="icon-rss-1"></i></a>
        </li>
        <li class="twitter-icon">
            <a href="https://twitter.com/DZoneInc" target="_blank"><i class="icon-twitter"></i></a>
        </li>
        <li class="facebook-icon">
            <a href="https://www.facebook.com/DZoneInc" target="_blank"><i class="icon-facebook-1"></i></a>
        </li>
        <li class="google-icon">
            <a href="https://plus.google.com/+dzone/posts" target="_blank"><i class="icon-gplus"></i></a>
        </li>
        <li class="linkedin-icon">
            <a href="https://www.linkedin.com/company/devada-team" target="_blank"><i class="icon-linkedin-1"></i></a>
        </li>

            <ul class="social-dropdown dropdown-menu">
                <li class="rss" id="rss-spotlight"><a href="https://dzone.com/pages/feeds"><i class="icon-rss-squared"></i> <span>RSS Feed</span></a></li>
                <li class="twitter" id="twitter-spotlight">
                    <a href="https://twitter.com/DZoneInc" class="twitter-follow-button" data-show-count="true" data-show-screen-name="false">Follow @DZoneInc</a>
                </li>
                <li class="fb-like" id="fb-spotlight" data-href="https://www.facebook.com/DZoneInc" data-layout="button_count" data-action="like" data-show-faces="true" data-share="false"></li>
                <li class="google-plus" id="gplus-spotlight">
                    <div class="g-follow" data-annotation="bubble" data-height="20" data-href="https://plus.google.com/108688665090780146602" data-rel="publisher"></div>
                </li>
                <li class="linkedin" id="linkedin-spotlight">
                    <script type="IN/FollowCompany" data-id="114427" data-counter="right"></script></li></ul></ul></div></div>
        <div ng-show="!edition || (width &gt; 1024 &amp;&amp; edition)" class="content-right-images ng-isolate-scope" header-affix-element="div.content" style="position: fixed; top: 96px; left: 1277px; width: 302px;">

           <!--Sponsor Logo-->
           <!-- ngIf: articles[0].readyForAd && (width > 1024) --><div class="sidebar-ad ng-scope ng-isolate-scope" ng-if="articles[0].readyForAd &amp;&amp; (width &gt; 1024)" dc-slot="ads.sl1.slot(articles[0], 0)" tags="ads.sl1.tags(articles[0], 0)" size="ads.sl1.size(articles[0], 0)" style="border: 0px;" id="div-gpt-ad-1435246566686-1"><div id="google_ads_iframe_/2916070/dz2_sponsor_logo_0__container__" style="border: 0pt none; width: 100px; height: 100px;"></div></div><!-- end ngIf: articles[0].readyForAd && (width > 1024) -->

            <!-- ngIf: articles[0].readyForAd && (width > 1024) --><div class="sidebar-ad ng-scope ng-isolate-scope" ng-if="articles[0].readyForAd &amp;&amp; (width &gt; 1024)" dc-slot="ads.sb1.slot(articles[0], 0)" tags="ads.sb1.tags(articles[0], 0)" size="ads.sb1.size(articles[0], 0)" id="div-gpt-ad-1435246566686-2" style=""><div id="google_ads_iframe_/2916070/dz2_article_halfpage_new_0__container__" style="border: 0pt none; width: 300px; height: 250px;"></div></div><!-- end ngIf: articles[0].readyForAd && (width > 1024) -->

            <!-- ngIf: articles[0].readyForAd && 0 > 1 && !articles[0].partner.isSponsoringArticle && (width > 1024) -->

        </div>

            <div id="article-1458130">
                <script type="application/ld+json">
                    {
                        "@context": "http://schema.org",
                        "@type": "Article",
                        "headline": "Common Fork Join Pool and Streams",
                        "author": {
                            "@type": "Person",
                            "name": "Dan Newton"
                        },
                        "audience": "software developers",
                        "keywords": "java,java 8 streams,fork join,tutorial,parallel streams",
                        "timeRequired": "PT4M",
                        "commentCount": 9,
                        "wordCount": "998",
                        "accessMode": "textual, visual",
                        "dateCreated": "2017-02-06T08:01:00Z",
                        "datePublished": "2017-02-06T00:00:00Z",
                        "dateModified": "2018-10-25T06:30:11Z",
                        "articleSection": "java-jdk-development-tutorials-tools-news",
                        "publisher": {
                            "@type": "Organization",
                            "name": "DZone",
                            "url": "https://dzone.com",
                            "logo": {
                                "@type": "ImageObject",
                                "url": "https://dzone.com/themes/dz20/images/dz_cropped.png"
                            }
                        },
                        "articleBody": "In my post Dipping into Java 8 Streams, a comment was added that I should explain what the Common Fork Join Pool is and how it is linked to parallel streams. Honestly, I had never heard of it, so I set out on my quest to find the answer somewhere on the Internet and make this post to attempt to follow up on the posted comment. Unfortunately, I wasn’t able to reach the understanding about this subject that I hoped I would, so I am going to write what I found out from doing some research and from debugging some code myself. If you think anything is missing, then leave a comment. This is, after all, a place to learn! So let's start with something I am pretty sure about. When you use a parallel stream, it will run its process in multiple threads when appropriate. Now that’s what you would expect, as it has the word parallel in its name. But what it doesn’t say is that all the parallel streams that you create will share their threads from one Common Fork Join Pool. This shouldn’t be a problem if you're just using a single parallel stream every now and then, but if you're running a few of them concurrently, it might run slower than expected, as the threads they use are being shared between them. Another piece of information to note is that although it is called a parallel stream, it does not run concurrently by default. The Collection that is being processed is done multi-threaded but the main thread will still wait for the overall process to finish. Let's start with a single parallel stream to see how many threads it creates so we have a baseline to continue from. public class CommonForkJoinPoolExample1 { public static void main(String args[]) throws InterruptedException { final List&lt;Integer&gt; numbers = getNumbers(); numbers.parallelStream().forEach(n -&gt; { try { Thread.sleep(5); System.out.println(&quot;Loop 1 : &quot; + Thread.currentThread()); } catch (InterruptedException e) { } }); } private static List&lt;Integer&gt; getNumbers() { for (int i = 0; i &lt; 100; i++) numbers.add(i); return Collections.unmodifiableList(numbers); } } Thread [main] [Daemon Thread [ForkJoinPool.commonPool-worker-1] [Daemon Thread [ForkJoinPool.commonPool-worker-2] [Daemon Thread [ForkJoinPool.commonPool-worker-3] So if you debug into this code after adding some breakpoints into the forEach code, it shows that when a parallel stream is run, it uses the main thread and the threads in the Common Fork Join Pool. Now let's see what happens when two parallel streams are run at once. What happens to the threads that are used? public class CommonForkJoinPoolExample2 { public static void main(String args[]) throws InterruptedException { final List&lt;Integer&gt; numbers = getNumbers(); Thread t1 = new Thread(() -&gt; numbers.parallelStream().forEach(n -&gt; { try { Thread.sleep(5); System.out.println(&quot;Loop 1 : &quot; + Thread.currentThread()); } catch (InterruptedException e) { } })); Thread t2 = new Thread(() -&gt; numbers.parallelStream().forEach(n -&gt; { try { Thread.sleep(5); System.out.println(&quot;Loop 2 : &quot; + Thread.currentThread()); } catch (InterruptedException e) { } })); t1.start(); t2.start(); t1.join(); t2.join(); } private static List&lt;Integer&gt; getNumbers() { List&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(5); for (int i = 0; i &lt; 100; i++) numbers.add(i); return Collections.unmodifiableList(numbers); } } Thread [Thread-0] Thread [Thread-1] [Daemon Thread [ForkJoinPool.commonPool-worker-1] [Daemon Thread [ForkJoinPool.commonPool-worker-2] [Daemon Thread [ForkJoinPool.commonPool-worker-3] From this, you can see the running threads consist of the two created threads plus the common pool threads. Even though the two parallel streams are being run concurrently, there is no indication of this from looking at the common pool threads and can only be seen by the fact that there are two normal threads running as well. So how do you make the parallel streams use their own Fork Join Pools instead of sharing the common pool? Well, you need to create your own ForkJoinPool object and use this pool to contain the stream code. public class ForkJoinPoolExample { public static void main(String args[]) throws InterruptedException { List&lt;Integer&gt; numbers = buildIntRange(); ForkJoinPool forkJoinPool = new ForkJoinPool(4); Thread t1 = new Thread(() -&gt; forkJoinPool.submit(() -&gt; { numbers.parallelStream().forEach(n -&gt; { try { Thread.sleep(5); System.out.println(&quot;Loop 1 : &quot; + Thread.currentThread()); } catch (InterruptedException e) { } }); }).invoke()); ForkJoinPool forkJoinPool2 = new ForkJoinPool(4); Thread t2 = new Thread(() -&gt; forkJoinPool2.submit(() -&gt; { numbers.parallelStream().forEach(n -&gt; { try { Thread.sleep(5); System.out.println(&quot;Loop 2 : &quot; + Thread.currentThread()); } catch (InterruptedException e) { } }); }).invoke()); t1.start(); t2.start(); t1.join(); t2.join(); } private static List&lt;Integer&gt; buildIntRange() { List&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(5); for (int i = 0; i &lt; 100; i++) numbers.add(i); return Collections.unmodifiableList(numbers); } } The number defined in ForkJoinPool(4) refers to the number of threads in the pool, which in this case is four threads. One of the ways to execute a parallel stream from inside a ForkJoinPool is to submit a Runnable task (which submits the task to be executed sometime in the future) and is invoked to start its execution. Let's look at the threads. Thread [Thread-0] Thread [Thread-1] [Daemon Thread [ForkJoinPool.commonPool-worker-1] [Daemon Thread [ForkJoinPool.commonPool-worker-2] [Daemon Thread [ForkJoinPool.commonPool-worker-3] [Daemon Thread [ForkJoinPool-1-worker-0] [Daemon Thread [ForkJoinPool-1-worker-1] [Daemon Thread [ForkJoinPool-1-worker-2] [Daemon Thread [ForkJoinPool-1-worker-3] [Daemon Thread [ForkJoinPool-2-worker-0] [Daemon Thread [ForkJoinPool-2-worker-1] [Daemon Thread [ForkJoinPool-2-worker-2] [Daemon Thread [ForkJoinPool-2-worker-3] The first thing you see is that there are way more threads being run. The second thing you will probably notice is that pools ForkJoinPool-1 and ForkJoinPool-2 now exist and have four workers/threads defined from 0 to 3. Hopefully, you will also notice that the common pool is still there even though streams are being run from inside the defined Fork Join Pools. Honestly, I do not know how this happens, but it looks like when a ForkJoinPool is defined, the common pool will still be used — with the defined pool being added on top. So if you know something about this, leave a comment! Hopefully, in this post, I have somewhat answered the comment that was left on my Dipping into Java 8 Streams. If I haven’t done this effectively, maybe someone will leave a comment telling me how silly I am (hopefully not in much harsher words) while also adding some useful information for everyone to see.",
                        "mainEntityOfPage": {
                            "@type": "WebPage",
                            "@id": "https://dzone.com/articles/common-fork-join-pool-and-streams"
                        },
                        "image": {
                            "@type": "ImageObject",
                            "url": "https://dzone.com//dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg"
                        }
                    }
                </script>
            </div>

            <script type="application/ld+json">
                {
                    "@context": "https://schema.org",
                    "@type": "BreadcrumbList",
                    "itemListElement": [{
                        "@type": "ListItem",
                        "position": 1,
                        "name": "DZone",
                        "item": "https://dzone.com"
                    }, {
                        "@type": "ListItem",
                        "position": 2,
                        "name": "Java Zone",
                        "item": "https://dzone.com/java-jdk-development-tutorials-tools-news"
                    }, {
                        "@type": "ListItem",
                        "position": 3,
                        "name": "Common Fork Join Pool and Streams",
                        "item": "https://dzone.com/articles/common-fork-join-pool-and-streams"
                    }]
                }
            </script>

        <article>
            <div class="content" ng-class="{&#39;content-full&#39;: (width &lt;= 1024 &amp;&amp; edition)}">
                <div class="header">
                    <div class="col-xs-12 breadcrumb-padding">
                        <a href="https://dzone.com/">DZone</a>
                        &gt;
                            <a href="https://dzone.com/java-jdk-development-tutorials-tools-news">Java Zone</a>
                            &gt;
                            <a href="https://dzone.com/articles/common-fork-join-pool-and-streams#">Common Fork Join Pool and Streams</a>
                    </div>
                    <div class="header-title">
                        <!-- ngIf: articles[0].rawType != 'guide' --><div class="title ng-scope" ng-if="articles[0].rawType != &#39;guide&#39;">
                            <h1 class="article-title">
                                Common Fork Join Pool and Streams
                            </h1>
                        </div><!-- end ngIf: articles[0].rawType != 'guide' -->

                        <!-- ngIf: articles[0].rawType == 'guide' -->

                        <div class="subhead">
                            <h3>
                                Parallel streams are a boon to concurrency, and Common Fork Join Pools are an important part of that interaction. This overview should shed some light on how they work.
                            </h3>
                        </div>

                        <!-- ngIf: articles[0].rawType != 'guide' && articles[0].rawType != 'whitepaper' --><div class="publish-meta ng-scope" ng-if="articles[0].rawType != &#39;guide&#39; &amp;&amp; articles[0].rawType != &#39;whitepaper&#39;">


    <div class="article-author-meta">
        <a href="https://dzone.com/users/2947070/lanky-dan.html">
             <img src="./Common Fork Join Pool and Streams - DZone Java_files/thumbnail" data-src="https://dz2cdn3.dzone.com/thumbnail?fid=12981850&amp;w=80" class="avatar lazyloaded" width="40">
        </a> by

        <div class="author-info">
                        <span class="author-name">
                            <a th-popup="users.profile.mini" popup-data="{user: 2947070}" href="https://dzone.com/users/2947070/lanky-dan.html" class="ng-isolate-scope">
                                Dan Newton</a>
                        </span>

        </div>
            <div class="mvb-award">
                <i tooltip="Most Valuable Blogger" class="icon-mvb-1"></i>
            </div>

            <div class="mvb-partner">

            </div>
            <div class="zone-leader">

            </div>

         ·
    </div>
                            <span class="author-date">Feb. 06, 17</span>
                            ·
                                <a href="https://dzone.com/java-jdk-development-tutorials-tools-news" id="portal-name"><span class="portal-name">Java
                                Zone</span></a>
                            ·
                                <article-type type="&#39;tutorial&#39;" class="ng-isolate-scope"><span class="ng-binding">Tutorial</span></article-type>
                        </div><!-- end ngIf: articles[0].rawType != 'guide' && articles[0].rawType != 'whitepaper' -->

                        <!-- ngIf: articles[0].rawType == 'whitepaper' -->

                    </div>
                </div>
                    <!-- ngIf: article.isOld -->

                <div class="author-n-useraction">
                    <div class="like action">
                        <dz-like template="like-article.html" node="articles[0]" class="ng-isolate-scope">
    <div class="dz-like icon-thumbs-up" ng-class="{&#39;icon-thumbs-up-alt liked&#39;: status.liked, &#39;icon-thumbs-up&#39;: !status.liked}" ng-click="like()"><span class="action-label"><span>Like</span><!-- ngIf: status.liked --></span>
        <a href="https://dzone.com/articles/common-fork-join-pool-and-streams#">
            <span class="ng-binding">(15)</span>
        </a>
    </div>
</dz-like>
                    </div>

                    <div class="comment action">
                        <p ng-show="!articles[0].isLocked" slider-toggle="commentsSlider" slider-data="{parent: articles[0]}" activate-with-url-params="{showComments: articles[0].id}" class="ng-isolate-scope">
                            <span><i class="icon-comment" tooltip-html-unsafe=""></i></span>
                            Comment (<span class="comment-after number-of-comments ng-binding" ng-bind="articles[0].nComments">13</span>)
                        </p>
                        <p ng-show="articles[0].isLocked" class="ng-hide">
                <span><i class="icon-icon-comment comment-disabled" tooltip-html-unsafe="Comments have been disabled for this article"></i></span>
                        </p>
                    </div>

                    <div class="save action">
                        <dz-save template="link-article-save.html" node="articles[0]" class="save ng-isolate-scope">
    <div ng-class="{&#39;icon-star gold&#39;: status.saved, &#39;icon-star-empty&#39;: !status.saved}" ng-click="save()" class="save icon-star-empty"><span class="save-title">Save</span><!-- ngIf: status.saved --></div>
</dz-save>
                    </div>

                    <div class="tweet action"><a ng-href="#" ng-click="shareTwitter($event, articles[0].header.title, articles[0].url)" class="title" target="_blank" href="https://dzone.com/articles/common-fork-join-pool-and-streams#"><span><i class="icon-twitter"></i></span>
                            <span class="action-label">Tweet</span></a>
                    </div>

                    <div class="pull-right">
                        <div class="article-views action ng-binding"><i class="icon-eye"></i> 43.13k

                            <span class="action-label">Views</span>
                        </div>

                            <!-- ngIf: canEdit(articles[0]) || canDelete(articles[0]) -->
                    </div>
                </div>
                    <div class="signin-prompt">
                        <p>Join the DZone community and get the full member experience.</p>
                        <a id="article-signin-prompt" href="https://dzone.com/articles/common-fork-join-pool-and-streams#" ng-click="loginForm()">Join For Free</a>
                    </div>
                    <div class="arrow-down"></div>

                <!-- ngIf: articles[0].readyForAd --><div ng-if="articles[0].readyForAd" class="ng-scope">
                  <div class="article-bumper  article-bumper-top ng-isolate-scope" dc-slot="ads.bt1.slot(articles[0], 0)" tags="ads.bt1.tags(articles[0], 0)" size="ads.bt1.size(articles[0], 0)" data-gtm-vis-first-on-screen-6133197_143="12" data-gtm-vis-total-visible-time-6133197_143="100" data-gtm-vis-has-fired-6133197_143="1" id="div-gpt-ad-1435246566686-3" style=""><div id="google_ads_iframe_/2916070/dz2_bumper_text_ad_0__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div>
                </div><!-- end ngIf: articles[0].readyForAd -->

                <!-- ngIf: !edition || (articles[0].rawType != 'refcard' && articles[0].rawType != 'guide') --><div ng-if="!edition || (articles[0].rawType != &#39;refcard&#39; &amp;&amp; articles[0].rawType != &#39;guide&#39;)" class="ng-scope">
                    <div class="content-html" dz-code-container="" ng-non-bindable="">
                    <p pid="2">In my post&nbsp;<a href="https://dzone.com/articles/dipping-into-java-8-streams" rel="nofollow">Dipping into Java 8&nbsp;Streams</a>, a comment was added that I should explain what the Common Fork Join Pool is and how it is linked to parallel streams. Honestly, I had never heard of it, so I set out on my quest to find the answer somewhere on the Internet and make this post to attempt to follow up on the posted comment. Unfortunately, I wasn’t able to reach the understanding about this subject that I hoped I would, so I am going to write what I found out from doing some research and from debugging some code myself. If you think anything is missing, then leave a comment. This is, after all, a place to learn!</p> 
<p pid="3">So let's start with something I am pretty sure about. When you use a parallel stream, it will run its process in multiple threads when appropriate. Now that’s what you would expect, as it has the word parallel in its name. But what it doesn’t say is that all the parallel streams that you create will share their threads from one Common Fork Join Pool. This shouldn’t be a problem if you're just using a single parallel stream every now and then, but if you're running a few of them concurrently, it might run slower than expected, as the threads they use are being shared between them. Another piece of information to note is that although it is called a parallel stream, it does not run concurrently by default. The&nbsp;<em>Collection</em>&nbsp;that is being processed is done multi-threaded but the main thread will still wait for the overall process to finish.</p> 
<p pid="4">Let's start with a single parallel stream to see how many threads it creates so we have a baseline to continue from.</p> 
<div class="CodeMirror cm-s-default"><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-width: 319px; min-height: 26px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="1"></div></div><pre><span style="padding-right: 29px;"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">CommonForkJoinPoolExample1</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="2"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="3"></div></div><pre><span style="padding-right: 29px;">    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">void</span> <span class="cm-variable">main</span>(<span class="cm-type">String</span> <span class="cm-variable">args</span>[]) <span class="cm-keyword">throws</span> <span class="cm-variable">InterruptedException</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="4"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="5"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-keyword">final</span> <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">Integer</span><span class="cm-operator">&gt;</span> <span class="cm-variable">numbers</span> <span class="cm-operator">=</span> <span class="cm-variable">getNumbers</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="6"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="7"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">numbers</span>.<span class="cm-variable">parallelStream</span>().<span class="cm-variable">forEach</span>(<span class="cm-variable">n</span> <span class="cm-operator">-&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="8"></div></div><pre><span style="padding-right: 29px;">            <span class="cm-keyword">try</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="9"></div></div><pre><span style="padding-right: 29px;">                <span class="cm-variable">Thread</span>.<span class="cm-variable">sleep</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="10"></div></div><pre><span style="padding-right: 29px;">                <span class="cm-variable">System</span>.<span class="cm-variable">out</span>.<span class="cm-variable">println</span>(<span class="cm-string">"Loop 1 : "</span> <span class="cm-operator">+</span> <span class="cm-variable">Thread</span>.<span class="cm-variable">currentThread</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="11"></div></div><pre><span style="padding-right: 29px;">            } <span class="cm-keyword">catch</span> (<span class="cm-variable">InterruptedException</span> <span class="cm-variable">e</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="12"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="13"></div></div><pre><span style="padding-right: 29px;">            }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="14"></div></div><pre><span style="padding-right: 29px;">        });</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="15"></div></div><pre><span style="padding-right: 29px;">    }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="16"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="17"></div></div><pre><span style="padding-right: 29px;">    <span class="cm-keyword">private</span> <span class="cm-keyword">static</span> <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">Integer</span><span class="cm-operator">&gt;</span> <span class="cm-variable">getNumbers</span>() {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="18"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-keyword">for</span> (<span class="cm-type">int</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-number">100</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="19"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">numbers</span>.<span class="cm-variable">add</span>(<span class="cm-variable">i</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="20"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-keyword">return</span> <span class="cm-variable">Collections</span>.<span class="cm-variable">unmodifiableList</span>(<span class="cm-variable">numbers</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="21"></div></div><pre><span style="padding-right: 29px;">    }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="22"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="23"></div></div><pre><span style="padding-right: 29px;">}</span></pre></div></div></div></div></div></div><div class="CodeMirror-gutters" style="height: 422px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 28px;"></div></div></div></div> 
<p pid="6">&nbsp;<code>Thread [main]</code><span id="_tmp_pre_23">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool.commonPool-worker-1]</code><span id="_tmp_pre_24">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool.commonPool-worker-2]</code><span id="_tmp_pre_25">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool.commonPool-worker-3]</code><span id="_tmp_pre_26">&nbsp;</span></p> 
<p pid="15">So if you debug into this code after adding some breakpoints into the&nbsp;<em>forEach</em>&nbsp;code, it shows that when a parallel stream is run, it uses the main thread and the threads in the Common Fork Join Pool.</p> 
<p pid="16">Now let's see what happens when two parallel streams are run at once. What happens to the threads that are used?</p> 
<div class="CodeMirror cm-s-default"><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-width: 319px; min-height: 26px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="1"></div></div><pre><span style="padding-right: 29px;"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">CommonForkJoinPoolExample2</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="2"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="3"></div></div><pre><span style="padding-right: 29px;">    <span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">void</span> <span class="cm-variable">main</span>(<span class="cm-type">String</span> <span class="cm-variable">args</span>[]) <span class="cm-keyword">throws</span> <span class="cm-variable">InterruptedException</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="4"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="5"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-keyword">final</span> <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">Integer</span><span class="cm-operator">&gt;</span> <span class="cm-variable">numbers</span> <span class="cm-operator">=</span> <span class="cm-variable">getNumbers</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="6"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="7"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">Thread</span> <span class="cm-variable">t1</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">Thread</span>(() <span class="cm-operator">-&gt;</span> <span class="cm-variable">numbers</span>.<span class="cm-variable">parallelStream</span>().<span class="cm-variable">forEach</span>(<span class="cm-variable">n</span> <span class="cm-operator">-&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="8"></div></div><pre><span style="padding-right: 29px;">            <span class="cm-keyword">try</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="9"></div></div><pre><span style="padding-right: 29px;">                <span class="cm-variable">Thread</span>.<span class="cm-variable">sleep</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="10"></div></div><pre><span style="padding-right: 29px;">                <span class="cm-variable">System</span>.<span class="cm-variable">out</span>.<span class="cm-variable">println</span>(<span class="cm-string">"Loop 1 : "</span> <span class="cm-operator">+</span> <span class="cm-variable">Thread</span>.<span class="cm-variable">currentThread</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="11"></div></div><pre><span style="padding-right: 29px;">            } <span class="cm-keyword">catch</span> (<span class="cm-variable">InterruptedException</span> <span class="cm-variable">e</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="12"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="13"></div></div><pre><span style="padding-right: 29px;">            }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="14"></div></div><pre><span style="padding-right: 29px;">        }));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="15"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">Thread</span> <span class="cm-variable">t2</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">Thread</span>(() <span class="cm-operator">-&gt;</span> <span class="cm-variable">numbers</span>.<span class="cm-variable">parallelStream</span>().<span class="cm-variable">forEach</span>(<span class="cm-variable">n</span> <span class="cm-operator">-&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="16"></div></div><pre><span style="padding-right: 29px;">            <span class="cm-keyword">try</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="17"></div></div><pre><span style="padding-right: 29px;">                <span class="cm-variable">Thread</span>.<span class="cm-variable">sleep</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="18"></div></div><pre><span style="padding-right: 29px;">                <span class="cm-variable">System</span>.<span class="cm-variable">out</span>.<span class="cm-variable">println</span>(<span class="cm-string">"Loop 2 : "</span> <span class="cm-operator">+</span> <span class="cm-variable">Thread</span>.<span class="cm-variable">currentThread</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="19"></div></div><pre><span style="padding-right: 29px;">            } <span class="cm-keyword">catch</span> (<span class="cm-variable">InterruptedException</span> <span class="cm-variable">e</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="20"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="21"></div></div><pre><span style="padding-right: 29px;">            }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="22"></div></div><pre><span style="padding-right: 29px;">        }));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="23"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="24"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">t1</span>.<span class="cm-variable">start</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="25"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">t2</span>.<span class="cm-variable">start</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="26"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">t1</span>.<span class="cm-variable">join</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="27"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">t2</span>.<span class="cm-variable">join</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="28"></div></div><pre><span style="padding-right: 29px;">    }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="29"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="30"></div></div><pre><span style="padding-right: 29px;">    <span class="cm-keyword">private</span> <span class="cm-keyword">static</span> <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">Integer</span><span class="cm-operator">&gt;</span> <span class="cm-variable">getNumbers</span>() {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="31"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">Integer</span><span class="cm-operator">&gt;</span> <span class="cm-variable">numbers</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">ArrayList</span><span class="cm-operator">&lt;&gt;</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="32"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-keyword">for</span> (<span class="cm-type">int</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-number">100</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="33"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">numbers</span>.<span class="cm-variable">add</span>(<span class="cm-variable">i</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="34"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-keyword">return</span> <span class="cm-variable">Collections</span>.<span class="cm-variable">unmodifiableList</span>(<span class="cm-variable">numbers</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="35"></div></div><pre><span style="padding-right: 29px;">    }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="36"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="37"></div></div><pre><span style="padding-right: 29px;">}</span></pre></div></div></div></div></div></div><div class="CodeMirror-gutters" style="height: 674px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 28px;"></div></div></div></div> 
<p pid="19">&nbsp;<code>Thread [Thread-0]</code><span id="_tmp_pre_18">&nbsp;</span><br>&nbsp;<code>Thread [Thread-1]</code><span id="_tmp_pre_19">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool.commonPool-worker-1]</code><span id="_tmp_pre_20">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool.commonPool-worker-2]</code><span id="_tmp_pre_21">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool.commonPool-worker-3]</code><span id="_tmp_pre_22">&nbsp;</span></p> 
<p pid="18">From this, you can see the running threads consist of the two created threads plus the common pool threads. Even though the two parallel streams are being run concurrently, there is no indication of this from looking at the common pool threads and can only be seen by the fact that there are two normal threads running as well.</p> 
<p pid="10">So how do you make the parallel streams use their own Fork Join&nbsp;Pools instead of sharing the common pool? Well, you need to create your own&nbsp;<em>ForkJoinPool</em>&nbsp;object and use this pool to contain the stream code.</p> 
<div class="CodeMirror cm-s-default"><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-width: 319px; min-height: 26px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="1"></div></div><pre><span style="padding-right: 29px;"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">ForkJoinPoolExample</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="2"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="3"></div></div><pre><span style="padding-right: 29px;">	<span class="cm-keyword">public</span> <span class="cm-keyword">static</span> <span class="cm-type">void</span> <span class="cm-variable">main</span>(<span class="cm-type">String</span> <span class="cm-variable">args</span>[]) <span class="cm-keyword">throws</span> <span class="cm-variable">InterruptedException</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="4"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="5"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">Integer</span><span class="cm-operator">&gt;</span> <span class="cm-variable">numbers</span> <span class="cm-operator">=</span> <span class="cm-variable">buildIntRange</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="6"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="7"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">ForkJoinPool</span> <span class="cm-variable">forkJoinPool</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">ForkJoinPool</span>(<span class="cm-number">4</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="8"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">Thread</span> <span class="cm-variable">t1</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">Thread</span>(() <span class="cm-operator">-&gt;</span> <span class="cm-variable">forkJoinPool</span>.<span class="cm-variable">submit</span>(() <span class="cm-operator">-&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="9"></div></div><pre><span style="padding-right: 29px;">            <span class="cm-variable">numbers</span>.<span class="cm-variable">parallelStream</span>().<span class="cm-variable">forEach</span>(<span class="cm-variable">n</span> <span class="cm-operator">-&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="10"></div></div><pre><span style="padding-right: 29px;">                <span class="cm-keyword">try</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="11"></div></div><pre><span style="padding-right: 29px;">                    <span class="cm-variable">Thread</span>.<span class="cm-variable">sleep</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="12"></div></div><pre><span style="padding-right: 29px;">                    <span class="cm-variable">System</span>.<span class="cm-variable">out</span>.<span class="cm-variable">println</span>(<span class="cm-string">"Loop 1 : "</span> <span class="cm-operator">+</span> <span class="cm-variable">Thread</span>.<span class="cm-variable">currentThread</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="13"></div></div><pre><span style="padding-right: 29px;">                } <span class="cm-keyword">catch</span> (<span class="cm-variable">InterruptedException</span> <span class="cm-variable">e</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="14"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="15"></div></div><pre><span style="padding-right: 29px;">                }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="16"></div></div><pre><span style="padding-right: 29px;">            });</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="17"></div></div><pre><span style="padding-right: 29px;">        }).<span class="cm-variable">invoke</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="18"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="19"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">ForkJoinPool</span> <span class="cm-variable">forkJoinPool2</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">ForkJoinPool</span>(<span class="cm-number">4</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="20"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">Thread</span> <span class="cm-variable">t2</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">Thread</span>(() <span class="cm-operator">-&gt;</span> <span class="cm-variable">forkJoinPool2</span>.<span class="cm-variable">submit</span>(() <span class="cm-operator">-&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="21"></div></div><pre><span style="padding-right: 29px;">            <span class="cm-variable">numbers</span>.<span class="cm-variable">parallelStream</span>().<span class="cm-variable">forEach</span>(<span class="cm-variable">n</span> <span class="cm-operator">-&gt;</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="22"></div></div><pre><span style="padding-right: 29px;">                <span class="cm-keyword">try</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="23"></div></div><pre><span style="padding-right: 29px;">                    <span class="cm-variable">Thread</span>.<span class="cm-variable">sleep</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="24"></div></div><pre><span style="padding-right: 29px;">                    <span class="cm-variable">System</span>.<span class="cm-variable">out</span>.<span class="cm-variable">println</span>(<span class="cm-string">"Loop 2 : "</span> <span class="cm-operator">+</span> <span class="cm-variable">Thread</span>.<span class="cm-variable">currentThread</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="25"></div></div><pre><span style="padding-right: 29px;">                } <span class="cm-keyword">catch</span> (<span class="cm-variable">InterruptedException</span> <span class="cm-variable">e</span>) {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="26"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="27"></div></div><pre><span style="padding-right: 29px;">                }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="28"></div></div><pre><span style="padding-right: 29px;">            });</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="29"></div></div><pre><span style="padding-right: 29px;">        }).<span class="cm-variable">invoke</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="30"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="31"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">t1</span>.<span class="cm-variable">start</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="32"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">t2</span>.<span class="cm-variable">start</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="33"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">t1</span>.<span class="cm-variable">join</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="34"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">t2</span>.<span class="cm-variable">join</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="35"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="36"></div></div><pre><span style="padding-right: 29px;">    }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="37"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="38"></div></div><pre><span style="padding-right: 29px;">    <span class="cm-keyword">private</span> <span class="cm-keyword">static</span> <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">Integer</span><span class="cm-operator">&gt;</span> <span class="cm-variable">buildIntRange</span>() {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="39"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">List</span><span class="cm-operator">&lt;</span><span class="cm-type">Integer</span><span class="cm-operator">&gt;</span> <span class="cm-variable">numbers</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">ArrayList</span><span class="cm-operator">&lt;&gt;</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="40"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-keyword">for</span> (<span class="cm-type">int</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-number">100</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="41"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-variable">numbers</span>.<span class="cm-variable">add</span>(<span class="cm-variable">i</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="42"></div></div><pre><span style="padding-right: 29px;">        <span class="cm-keyword">return</span> <span class="cm-variable">Collections</span>.<span class="cm-variable">unmodifiableList</span>(<span class="cm-variable">numbers</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="43"></div></div><pre><span style="padding-right: 29px;">    }</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="44"></div></div><pre><span style="padding-right: 29px;"></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px; width: 29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 20px;" data-line-number="45"></div></div><pre><span style="padding-right: 29px;">}</span></pre></div></div></div></div></div></div><div class="CodeMirror-gutters" style="height: 818px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 28px;"></div></div></div></div> 
<p pid="12">The number defined in&nbsp;<em>ForkJoinPool(4)</em>&nbsp;refers to the number of threads in the pool, which in this case is four threads. One of the ways to execute a parallel stream from inside a&nbsp;<em>ForkJoinPool</em>&nbsp;is to submit a&nbsp;<em>Runnable</em>&nbsp;task (which submits the task to be&nbsp;executed sometime in the future) and is invoked to start its execution. Let's look at the threads.</p> 
<p pid="13">&nbsp;<code>Thread [Thread-0]</code><span id="_tmp_pre_4">&nbsp;</span><br>&nbsp;<code>Thread [Thread-1]</code><span id="_tmp_pre_5">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool.commonPool-worker-1]</code><span id="_tmp_pre_6">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool.commonPool-worker-2]</code><span id="_tmp_pre_7">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool.commonPool-worker-3]</code><span id="_tmp_pre_8">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool-1-worker-0]</code><span id="_tmp_pre_9">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool-1-worker-1]</code><span id="_tmp_pre_10">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool-1-worker-2]</code><span id="_tmp_pre_11">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool-1-worker-3]</code><span id="_tmp_pre_12">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool-2-worker-0]</code><span id="_tmp_pre_13">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool-2-worker-1]</code><span id="_tmp_pre_14">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool-2-worker-2]</code><span id="_tmp_pre_15">&nbsp;</span><br>&nbsp;<code>[Daemon Thread [ForkJoinPool-2-worker-3]</code><span id="_tmp_pre_16">&nbsp;</span></p> 
<p pid="21">The first thing you&nbsp;see is that there are way more threads being run. The second thing you will probably notice is that pools&nbsp;<em>ForkJoinPool-1</em>&nbsp;and&nbsp;<em>ForkJoinPool-2</em>&nbsp;now exist and have four workers/threads defined from 0 to 3. Hopefully, you will also notice that the common pool is still there even though streams are being run from inside the defined Fork Join Pools. Honestly, I do not know how this happens, but it looks like when a&nbsp;<em>ForkJoinPool</em>&nbsp;is defined, the common pool will still be used — with the defined pool being added on top. So if you know something about this, leave a comment!</p> 
<p pid="22">Hopefully, in this post, I have somewhat answered the comment that was left on my&nbsp;<a href="https://dzone.com/articles/dipping-into-java-8-streams" rel="nofollow">Dipping into Java 8&nbsp;Streams</a>.&nbsp;If I haven’t done this effectively, maybe someone will leave a comment telling me how silly I am (hopefully not in much harsher words) while also adding some useful information for everyone to see.</p>
                </div>
                </div><!-- end ngIf: !edition || (articles[0].rawType != 'refcard' && articles[0].rawType != 'guide') -->

                <!-- ngIf: (articles[0].rawType == 'refcard' || articles[0].rawType == 'guide') && edition -->

                <!-- ngIf: articles[0].readyForAd --><div ng-if="articles[0].readyForAd" class="ng-scope">
                    <!-- ngIf: articles[0].readyForAd --><div class="article-bumper article-bumper-bottom ng-scope ng-isolate-scope" ng-if="articles[0].readyForAd" dc-slot="ads.bt2.slot(articles[0], 0)" tags="ads.bt2.tags(articles[0], 0)" size="ads.bt2.size(articles[0], 0)" id="div-gpt-ad-1435246566686-4" style=""><div id="google_ads_iframe_/2916070/dz2_bumper_text_ad_1__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div><!-- end ngIf: articles[0].readyForAd -->
                </div><!-- end ngIf: articles[0].readyForAd -->

            <!-- ngIf: articles[0].rawType != 'article' -->

                    <!-- ngIf: !edition --><div ng-if="!edition" class="related ng-scope">
                        <h3>Like This Article? Read More From DZone</h3>
                        <div class="row">
                            <div class="relateddiv col-xs-6 col-md-6">
                                <a href="https://dzone.com/articles/diving-into-java-8s-newworkstealingpools?fromrel=true">
                                    <img class="relatedimg col-xs-3 col-md-3 ls-is-cached lazyloaded" src="./Common Fork Join Pool and Streams - DZone Java_files/thumbnail(1)" data-src="https://dz2cdn3.dzone.com/thumbnail?fid=4794378&amp;w=120" alt="Diving Into Java 8&#39;s newWorkStealingPools" width="60">
                                </a>
                                <a href="https://dzone.com/articles/diving-into-java-8s-newworkstealingpools?fromrel=true" class="col-xs-9 col-md-9">Diving Into Java 8's newWorkStealingPools</a>
                            </div>

                            <div class="relateddiv col-xs-6 col-md-6">
                                <a href="https://dzone.com/articles/streamplify-your-code?fromrel=true">
                                    <img class="relatedimg col-xs-3 col-md-3 lazyloaded" src="./Common Fork Join Pool and Streams - DZone Java_files/thumbnail(2)" data-src="https://dz2cdn1.dzone.com/thumbnail?fid=3228644&amp;w=120" alt="Streamplify Your Code" width="60">
                                </a>
                                <a href="https://dzone.com/articles/streamplify-your-code?fromrel=true" class="col-xs-9 col-md-9">
                                    Streamplify Your Code</a>
                            </div>
                        </div>

                        <div class="row">
                            <div class="relateddiv col-xs-6 col-md-6">
                                <a href="https://dzone.com/articles/mastering-java-8-streams-part-5-video?fromrel=true">
                                    <img class="relatedimg col-xs-3 col-md-3 lazyloaded" src="./Common Fork Join Pool and Streams - DZone Java_files/thumbnail(3)" data-src="https://dz2cdn1.dzone.com/thumbnail?fid=9460724&amp;w=120" alt="Mastering Java 8 Parallel Streams (Part 5) [Video]" width="60">
                                </a>
                                <a href="https://dzone.com/articles/mastering-java-8-streams-part-5-video?fromrel=true" class="col-xs-9 col-md-9">Mastering Java 8 Parallel Streams (Part 5) [Video]</a>
                            </div>

                            <div class="relateddiv col-xs-6 col-md-6">
                                <a href="https://dzone.com/refcardz/getting-started-with-headless-cms?fromrel=true">
                                    <img class="relatedimg col-xs-3 col-md-3 ls-is-cached lazyloaded" src="./Common Fork Join Pool and Streams - DZone Java_files/thumbnail(4)" data-src="https://dz2cdn1.dzone.com/thumbnail?fid=12672764&amp;w=120" alt="Getting Started With Headless CMS" width="60">
                                </a>
                                <a href="https://dzone.com/refcardz/getting-started-with-headless-cms?fromrel=true" class="col-xs-9 col-md-9">
                                    <p class="relatedres">Free DZone Refcard</p>
                                    Getting Started With Headless CMS</a>
                            </div>
                        </div>
                    </div><!-- end ngIf: !edition -->


            <!-- ngIf: articles[0].rawType != 'article' && articles[0].pdf -->


            <div class="article-topics">
                <div class="topic-label">Topics:</div>
                <div class="topics">
                        <span class="topics-tag">java
                            ,</span><span class="topics-tag">java 8 streams
                            ,</span><span class="topics-tag">fork join
                            ,</span><span class="topics-tag">tutorial
                            ,</span><span class="topics-tag">parallel streams</span>
                </div>
            </div>
            <div class="author-n-useraction">
                <div class="like action">
                    <dz-like template="like-article.html" node="articles[0]" class="ng-isolate-scope">
    <div class="dz-like icon-thumbs-up" ng-class="{&#39;icon-thumbs-up-alt liked&#39;: status.liked, &#39;icon-thumbs-up&#39;: !status.liked}" ng-click="like()"><span class="action-label"><span>Like</span><!-- ngIf: status.liked --></span>
        <a href="https://dzone.com/articles/common-fork-join-pool-and-streams#">
            <span class="ng-binding">(15)</span>
        </a>
    </div>
</dz-like>
                </div>

                <div class="comment action">
                    <p ng-show="!articles[0].isLocked" slider-toggle="commentsSlider" slider-data="{parent: articles[0]}" activate-with-url-params="{showComments: articles[0].id}" class="ng-isolate-scope">
                        <span><i class="icon-comment" tooltip-html-unsafe=""></i></span>
                        Comment (<span class="comment-after number-of-comments ng-binding" ng-bind="articles[0].nComments">13</span>)
                    </p>
                    <p ng-show="articles[0].isLocked" class="ng-hide">
            <span><i class="icon-icon-comment comment-disabled" tooltip-html-unsafe="Comments have been disabled for this article"></i></span>
                    </p>
                </div>

                <div class="save action">
                    <dz-save template="link-article-save.html" node="articles[0]" class="save ng-isolate-scope">
    <div ng-class="{&#39;icon-star gold&#39;: status.saved, &#39;icon-star-empty&#39;: !status.saved}" ng-click="save()" class="save icon-star-empty"><span class="save-title">Save</span><!-- ngIf: status.saved --></div>
</dz-save>
                </div>

                <div class="tweet action"><a ng-href="#" ng-click="shareTwitter($event, articles[0].header.title, articles[0].url)" class="title" target="_blank" href="https://dzone.com/articles/common-fork-join-pool-and-streams#"><span><i class="icon-twitter"></i></span>
                        <span class="action-label">Tweet</span></a>
                </div>

                <div class="pull-right">
                    <div class="article-views action ng-binding"><i class="icon-eye"></i> 43.13k

                        <span class="action-label">Views</span></div>

                        <!-- ngIf: !edition && (canEdit(articles[0]) || canDelete(articles[0])) -->
                </div>
            </div>
                <div class="attribution">
                    <p>Published at DZone with permission
                        of 
                            <span>Dan Newton
                        <!-- ngIf: articles[0].authors[0].isMVB --><span ng-if="articles[0].authors[0].isMVB" class="ng-scope">, DZone MVB</span><!-- end ngIf: articles[0].authors[0].isMVB -->. <!-- ngIf: articles[0].source --><span ng-if="articles[0].source" class="ng-scope"><a href="https://lankydanblog.wordpress.com/2017/02/01/common-fork-join-pool-and-streams/" target="_blank">See the original article here.<i class="icon-link-ext-alt"></i></a></span><!-- end ngIf: articles[0].source --></span></p>
                    <p>Opinions expressed by DZone contributors are their own.</p>
                </div>
            <load-article node="article || articles[0]" class="ng-isolate-scope"></load-article>
        </div></article>

        <div class="col-md-12 col-sm-12 col-xs-12">
            <th-if-scroll relative-to="bottom" from="-20" to="0" callback="activateB(articles[0])" class="ng-isolate-scope"></th-if-scroll>
        </div>
    </div><!-- end ngIf: articles[0].id == 1458130 -->

        <!-- Had to use a nested ng-if to ensure that this section loads after the top of the page-->
        <!-- TODO: Figure out why partnerResources get loaded before the rest of the article -->
        <!-- ngIf: true --><div ng-if="true" class="ng-scope">
          <!-- ngIf: true --><div ng-if="true" class="ng-scope">

<div class="layout-card widget-top-border partner-resources-block" style="width:100%;margin-bottom: 1em;">

    <div class="main-container">
        <div class="featured-header">
            <h2>
                    Java<span> Partner Resources</span>
            </h2>
        </div>

        <div class="partner-resources-container">
                <div class="resource-block ng-isolate-scope" dc-slot="&#39;/2916070/dz2_partner_resource_link&#39;" tags="ads.partnerResources.tags(articles[0], &#39;pr&#39; + calculatePartnerResourceIndex())" size="[&#39;fluid&#39;]" id="div-gpt-ad-1435246566686-5" style=""><div id="google_ads_iframe_/2916070/dz2_partner_resource_link_0__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div>
                <div class="resource-block ng-isolate-scope" dc-slot="&#39;/2916070/dz2_partner_resource_link&#39;" tags="ads.partnerResources.tags(articles[0], &#39;pr&#39; + calculatePartnerResourceIndex())" size="[&#39;fluid&#39;]" id="div-gpt-ad-1435246566686-6" style=""><div id="google_ads_iframe_/2916070/dz2_partner_resource_link_1__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div>
                <div class="resource-block ng-isolate-scope" dc-slot="&#39;/2916070/dz2_partner_resource_link&#39;" tags="ads.partnerResources.tags(articles[0], &#39;pr&#39; + calculatePartnerResourceIndex())" size="[&#39;fluid&#39;]" id="div-gpt-ad-1435246566686-7" style=""><div id="google_ads_iframe_/2916070/dz2_partner_resource_link_2__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div>
                <div class="resource-block ng-isolate-scope" dc-slot="&#39;/2916070/dz2_partner_resource_link&#39;" tags="ads.partnerResources.tags(articles[0], &#39;pr&#39; + calculatePartnerResourceIndex())" size="[&#39;fluid&#39;]" id="div-gpt-ad-1435246566686-8" style=""><div id="google_ads_iframe_/2916070/dz2_partner_resource_link_3__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div>
                <div class="resource-block ng-isolate-scope" dc-slot="&#39;/2916070/dz2_partner_resource_link&#39;" tags="ads.partnerResources.tags(articles[0], &#39;pr&#39; + calculatePartnerResourceIndex())" size="[&#39;fluid&#39;]" id="div-gpt-ad-1435246566686-9" style=""><div id="google_ads_iframe_/2916070/dz2_partner_resource_link_4__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div>
                <div class="resource-block ng-isolate-scope" dc-slot="&#39;/2916070/dz2_partner_resource_link&#39;" tags="ads.partnerResources.tags(articles[0], &#39;pr&#39; + calculatePartnerResourceIndex())" size="[&#39;fluid&#39;]" id="div-gpt-ad-1435246566686-10" style=""><div id="google_ads_iframe_/2916070/dz2_partner_resource_link_5__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div>
        </div>

    </div>
</div>



          </div><!-- end ngIf: true -->
        </div><!-- end ngIf: true -->

        <!-- ngIf: articles[1] && !articles[1].partner.isSponsoringArticle && width >= 768 --><div class="ad-silver row ng-scope" ng-if="articles[1] &amp;&amp; !articles[1].partner.isSponsoringArticle &amp;&amp; width &gt;= 768" style="">

    </div><!-- end ngIf: articles[1] && !articles[1].partner.isSponsoringArticle && width >= 768 -->

        <!-- ngIf: articles[1] && !articles[1].partner.isSponsoringArticle && width < 768 -->


</div><!-- end ngIf: articles[0].id == 1458130 -->
<!-- ngRepeat: article in articles --><!-- ngIf: $index > 0 || article.id != 1458130 --><!-- end ngRepeat: article in articles --><!-- ngIf: $index > 0 || article.id != 1458130 --><!-- ngInclude: '/static/article/article.html' --><div class="articles-wrap ng-scope" ng-repeat="article in articles" ng-if="$index &gt; 0 || article.id != 1458130" ng-include="&#39;/static/article/article.html&#39;" style="">
        <!-- ngIf: ads.top.show() && ($index == 0 || article.partner.isSponsoringArticle) && articles[0].readyForAd -->

        <!-- ngIf: article.type == 'loader' -->

    <div class="ng-scope">
        <th-if-scroll relative-to="top" from="0" to="50" callback="activateT(article)" class="ng-isolate-scope"></th-if-scroll>
    </div>


    <!-- ngIf: article.type != 'loader' --><div class="article-stream widget-top-border ng-scope" ng-class="{&#39;widget-top-border&#39;: article.published }" ng-if="article.type != &#39;loader&#39;">
    <div class="social-media-icons mobile-only ng-scope" follow-dzone="">
<div class="top-social">
    <p>Let's be friends:</p>
    <ul class="icons-only ng-isolate-scope" ng-class="{open: isOpen}" click-outside="outside()">
        <li class="rss-icon" id="rss-spotlight-1">
            <a href="https://dzone.com/pages/feeds"><i class="icon-rss-1"></i></a>
        </li>
        <li class="twitter-icon">
            <a href="https://twitter.com/DZoneInc" target="_blank"><i class="icon-twitter"></i></a>
        </li>
        <li class="facebook-icon">
            <a href="https://www.facebook.com/DZoneInc" target="_blank"><i class="icon-facebook-1"></i></a>
        </li>
        <li class="google-icon">
            <a href="https://plus.google.com/+dzone/posts" target="_blank"><i class="icon-gplus"></i></a>
        </li>
        <li class="linkedin-icon">
            <a href="https://www.linkedin.com/company/devada-team" target="_blank"><i class="icon-linkedin-1"></i></a>
        </li>

            <ul class="social-dropdown dropdown-menu">
                <li class="rss" id="rss-spotlight"><a href="https://dzone.com/pages/feeds"><i class="icon-rss-squared"></i> <span>RSS Feed</span></a></li>
                <li class="twitter" id="twitter-spotlight">
                    <a href="https://twitter.com/DZoneInc" class="twitter-follow-button" data-show-count="true" data-show-screen-name="false">Follow @DZoneInc</a>
                </li>
                <li class="fb-like" id="fb-spotlight" data-href="https://www.facebook.com/DZoneInc" data-layout="button_count" data-action="like" data-show-faces="true" data-share="false"></li>
                <li class="google-plus" id="gplus-spotlight">
                    <div class="g-follow" data-annotation="bubble" data-height="20" data-href="https://plus.google.com/108688665090780146602" data-rel="publisher"></div>
                </li>
                <li class="linkedin" id="linkedin-spotlight">
                    <script type="IN/FollowCompany" data-id="114427" data-counter="right"></script></li></ul></ul></div></div>
        <div ng-show="!edition || (width &gt; 1024 &amp;&amp; edition)" class="content-right-images ng-isolate-scope" header-affix-element="div.content" style="position: relative;">

           <!--Sponsor Logo-->
           <!-- ngIf: article.readyForAd && (width > 1024) --><div class="sidebar-ad ng-scope ng-isolate-scope" ng-if="article.readyForAd &amp;&amp; (width &gt; 1024)" dc-slot="ads.sl1.slot(article, $index)" tags="ads.sl1.tags(article, $index)" size="ads.sl1.size(article, $index)" style="border: 0px;" id="div-gpt-ad-1435246566686-11"><div id="google_ads_iframe_/2916070/dz2_sponsor_logo_1__container__" style="border: 0pt none; width: 100px; height: 100px;"></div></div><!-- end ngIf: article.readyForAd && (width > 1024) -->

            <!-- ngIf: article.readyForAd && (width > 1024) --><div class="sidebar-ad ng-scope ng-isolate-scope" ng-if="article.readyForAd &amp;&amp; (width &gt; 1024)" dc-slot="ads.sb1.slot(article, $index)" tags="ads.sb1.tags(article, $index)" size="ads.sb1.size(article, $index)" id="div-gpt-ad-1435246566686-12" style=""><div id="google_ads_iframe_/2916070/dz2_article_halfpage_new_1__container__" style="border: 0pt none; width: 300px; height: 250px;"></div></div><!-- end ngIf: article.readyForAd && (width > 1024) -->

            <!-- ngIf: article.readyForAd && $index > 1 && !article.partner.isSponsoringArticle && (width > 1024) -->

        </div>

            <div id="article-2939798"><script type="application/ld+json">{"@context":"http://schema.org","@type":"Article","headline":"JSON Values and the Joy of Scala","author":{"@type":"Person","name":"Rafael Merino"},"audience":"software developers","keywords":"scala,functional programming,json,library,immutability,persistent data","timeRequired":"PT7M","commentCount":0,"wordCount":1737,"accessMode":"textual, visual","dateCreated":"2020-02-07T19:13:37Z","datePublished":"2020-02-07T00:00:00Z","dateModified":"2020-02-07T19:13:36Z","articleSection":"java-jdk-development-tutorials-tools-news","publisher":{"@type":"Organization","name":"DZone","url":"https://dzone.com","logo":{"@type":"ImageObject","url":"https://dzone.com/themes/dz20/images/dz_cropped.png"}},"articleBody":"One of the most important aspects of functional programming is immutable data structures, better known as values. Updating these structures using the copy-on-write approach is very inefficient, and this is the reason why persistent data structures were created. On the other hand, JSON is a lightweight, text-based, language-independent data interchange format. It's become so popular due to its simplicity. There are a lot of libraries out there to work with JSON in the JVM ecosystem; however, none of them use persistent data structures. In most cases, those libraries parse a string or array of bytes into an object. The thing is, why do that? JSON is a great structure. It's simple, easy to aggregate, ease to create, easy to reason about, so why create yet another abstraction over JSON? Moreover, there are many architectures that work with JSON end-to-end. Going from JSON to objects or strings back and forth is not very efficient, especially when copy-on-write is the only option to avoid mutation. All these points are way better elaborated in the talk the value of values, a masterpiece from Rich Hickey. Json-values, the library I'm introducing here, was named after that talk. json-values is a functional JSON library in Scala that uses persistent data structures. In this first article, we are going to focus on two more important aspects of software development where json-values can make a difference: data validation and testing. To test json-values, I did property-based-testing with ScalaCheck. It's a great library where creating generators and composing them is very simple. To generate JSON values, I created json-values-generators, a series of generators to work with ScalaCheck. I argue that it's the most declarative and beautiful Json generator in the world! You may also like: Using JSON With Play and Scala. Validation is extremely important in software. Corrupt data can propagate throughout your system and cause a nightmare. Errors that blow up in your face are way better! If you think about it, the definition, validation, and generation of a JSON value could be implemented using the same data structure; after all, the three of them are just bindings with different elements: values, value generators, or value specs. Let's check out an example: Scala xxxxxxxxxx 1 50 1 import value.{JsObj,JsArray} 2 import value.Preamble._ 3 4 // DEFINING A JSON 5 6 JsObj(&quot;name&quot; -&gt; &quot;Rafael&quot;, 7 &quot;age&quot; -&gt; 37, 8 &quot;languages&quot; -&gt; JsArray(&quot;Haskell&quot;, &quot;Scala&quot;, &quot;Java&quot;, &quot;Clojure&quot;) 9 &quot;github&quot; -&gt; &quot;imrafaelmerino&quot;, 10 &quot;profession&quot; -&gt; &quot;frustrated consultant&quot;, 11 &quot;address&quot; -&gt; JsObj(&quot;city&quot; -&gt; &quot;Madrid&quot;, 12 &quot;location&quot; -&gt; JsArray(40.566, 87.987), 13 &quot;country&quot; -&gt; &quot;ES&quot; 14 ) 15 ) 16 17 // DEFINING A JSON SPEC 18 19 import value.spec.{JsObjSpec,JsArraySpec} 20 import value.spec.JsNumberSpecs._ 21 import value.spec.JsStrSpecs._ 22 import value.spec.JsArraySpecs._ 23 24 JsObjSpec(&quot;name&quot; -&gt; str, 25 &quot;age&quot; -&gt; int, 26 &quot;languages&quot; -&gt; arrayOfStr, 27 &quot;github&quot; -&gt; str, 28 &quot;profession&quot; -&gt; str, 29 &quot;address&quot; -&gt; JsObjSpec(&quot;number&quot; -&gt; str, 30 &quot;location&quot; -&gt; JsArraySpec(decimal, decimal), 31 &quot;country&quot; -&gt; str 32 ) 33 ) 34 35 // DEFINING A JSON GENERATOR 36 37 import valuegen.{JsObjGen,JsArrayGen} 38 import valuegen.Preamble._ 39 import org.scalacheck.Arbitrary.arbitrary 40 import org.scalacheck.Gen 41 42 JsObjGen(&quot;name&quot; -&gt; arbitrary[String], 43 &quot;age&quot; -&gt; Gen.choose(18,120), 44 &quot;profession&quot; -&gt; arbitrary[String], 45 &quot;address&quot; -&gt; JsObjGen(&quot;city&quot; -&gt; arbitrary[String], 46 &quot;location&quot; -&gt; JsArrayGen(doubleGen,doubleGen) 47 &quot;country&quot; -&gt; Gen.oneOf(&quot;ES&quot;,&quot;PO&quot;) 48 ) 49 ) 50 As you can see, creating specs and generators is as simple as creating raw JSON. Writing specs and generators for our tests is child's play. It has enormous advantages for development, such as: Increase productivity. More readable code. The more readable code is, the easier it is to maintain and reason about that code. Let's focus for a while on what I call json-spec. I named it after spec, a Clojure library. It's really powerful and composable. Any spec can be defined in terms of predicates. Let's put a more elaborated example: Java x 1 val ageSpec: Int =&gt; Result = age =&gt; 2 if(age &lt; 0) Invalid(&quot;you must be kidding!&quot;) 3 else if(age &gt; 120) Invalid(&quot;you can stil fill out forms!!&quot;) 4 else Valid 5 6 val noLongerThat: Int =&gt; String =&gt; Result = max =&gt; value =&gt; 7 if(value.length &gt; max) Invalid(&quot;too long&quot;) 8 else Valid 9 10 val personSpec = JsObjSpec(&quot;name&quot; -&gt; str(noLongerThat(100)), 11 &quot;last_name&quot; -&gt; str(noLongerThat(200)), 12 &quot;profession&quot; -&gt; str(noLongerThat(200), nullable=true), 13 &quot;country&quot; -&gt; enum(&quot;ES&quot;,&quot;PO&quot;), 14 &quot;languages&quot; -&gt; arrayOfStr(elemNullable=false), 15 &quot;age&quot; -&gt; intSuchThat(ageSpec,required=false), 16 * -&gt; any 17 ) 18 // * -&gt; any means: any binding different than the specified is allowed 19 20 // specs are easy to compose 21 22 val address = JsObjSpec(&quot;number&quot; -&gt; str, 23 &quot;street&quot; -&gt; str, 24 &quot;city&quot; -&gt; str, 25 &quot;location&quot; -&gt; JsArraySpec(double, double) 26 ) 27 28 val personWithAddressSpec = personSpec + (&quot;address&quot;, address) A spec can be used to validate existing JSON: Scala xxxxxxxxxx 1 10 1 import value.JsObjParser 2 import value.Invalid 3 import value.JsPath 4 5 val spec:JsObjSpec = ??? // a json spec 6 val str:String = ??? // a string representing a json 7 val json:Either[Invalid,JsObj] = JsObjParser.parse(str) 8 9 // a lazy list of path/error pairs is returned 10 val errors:LazyList[(JsPath,InvalidValue)] = json.fold(throw _) 11 (obj =&gt; obj.validate(spec)) Returning a lazy list decouples the validate function from its consumers. Consumers can take only an error if they are just interested in whether the JSON is valid or not, or they can take them all to print out a report. In both cases, they are invoking the same function. A json-spec can be also used to parse a string or an array of bytes into JSON. Instead of parsing the whole string and then validating it, we can validate the JSON while parsing it and stop the parsing as soon as an error happens. After all, failing fast is important as well! Scala xxxxxxxxxx 1 1 val bytes:Array[Byte] = ??? // bytes representing a Json 2 val spec = ??? // a json spec 3 val parser = JsObjParser(spec) // a json parser from a spec 4 val result:Either[InvalidJson,JsObj] = parser.parse(bytes) Let's move on and introduce some of the most important functions in the library: Scala x 1 // every element is a JsValue. It's a sum type: 2 3 val value: JsValue = ??? 4 5 value match 6 { 7 case primitive: JsPrimitive =&gt; primitive match 8 { 9 case JsStr(value) =&gt; println(&quot;I'm a string&quot;) 10 case number: JsNumber =&gt; number match 11 { 12 case JsInt(value) =&gt; println(&quot;I'm an integer&quot;) 13 case JsDouble(value) =&gt; println(&quot;I'm a double&quot;) 14 case JsLong(value) =&gt; println(&quot;I'm a long&quot;) 15 case JsBigDec(value) =&gt; println(&quot;I'm a big decimal&quot;) 16 case JsBigInt(value) =&gt; println 17 (&quot;I'm a big integer&quot;) 18 } 19 case JsBool(value) =&gt; println(&quot;I'm a boolean&quot;) 20 case JsNull =&gt; println(&quot;I'm null&quot;) 21 } 22 case json: Json[_] =&gt; json match 23 { 24 case o: JsObj =&gt; println(&quot;I'm an object&quot;) 25 case a: JsArray =&gt; println(&quot;I'm an array&quot;) 26 } 27 case JsNothing =&gt; println(&quot;I'm a special type!&quot;) 28 } 29 30 // A Json can be modeled as a set of path/value pairs: 31 32 val obj = JsObj(&quot;a&quot; -&gt; &quot;hi&quot;, 33 &quot;b&quot; -&gt; JsArray(1,2,3), 34 &quot;c&quot; -&gt; JsObj(&quot;d&quot; -&gt; true, 35 &quot;e&quot; -&gt; JsNull 36 ) 37 ) 38 39 val pairs:LazyList[(JsPath,JsValue)] = obj.flatten pairs.foreach(println) 40 41 // (&quot;a&quot;, &quot;hi&quot;) 42 // (&quot;b&quot; / 0, 1) 43 // (&quot;b&quot; / 1, 2) 44 // (&quot;b&quot; / 2, 3) 45 // (&quot;c&quot; / &quot;d&quot;, true) 46 // (&quot;c&quot; / &quot;e&quot;, null) 47 48 // in fact, a Json can be created from a set of path/value pairs: 49 50 val obj = JsObj((&quot;a&quot;, &quot;hi&quot; ), 51 (&quot;b&quot; / 0, 1 ), 52 (&quot;b&quot; / 1, 2 ), 53 (&quot;b&quot; / 2, 3 ), 54 (&quot;c&quot; / &quot;d&quot;, true ), 55 (&quot;c&quot; / &quot;e&quot;, null ) 56 ) 57 58 // lets get some value out using the apply function 59 60 obj(&quot;a&quot;) == JsStr(&quot;hi&quot;) 61 obj(&quot;b&quot; / 0) == JsInt(1) 62 obj(&quot;c&quot; / &quot;d&quot;) == TRUE 63 obj(&quot;c&quot; / &quot;e&quot;) == JsNull 64 65 // apply is a total function, it always returns a JsValue: 66 67 obj(&quot;d&quot; / &quot;e&quot;) == JsNothing 68 69 // let's put some data in 70 71 val json = JsObj.empty.inserted(&quot;a&quot; / &quot;b&quot;, 1) 72 .inserted(&quot;a&quot; / &quot;c&quot; / 2, 10, padWith=0) 73 74 json == JsObj(&quot;a&quot; -&gt; JsObj(&quot;b&quot; -&gt; 1, 75 &quot;c&quot; -&gt; JsArray(0,0,10) 76 ) 77 ) 78 79 // trim string values. Imperative impl of fn. Later a Prism will be used 80 81 val trimStr: JsPrimitive =&gt; JsValue = 82 x =&gt; if (x.isStr) x.toJsStr.map(_.trim) else x 83 84 json map trimStr 85 86 // map keys to lowercase 87 88 val toLowerCase: String =&gt; String =_.toLowerCase 89 90 json mapKeys toLowerCase 91 92 // remove null values 93 94 val isNotNull: JsPrimitive =&gt; Boolean = _.isNotNull 95 96 json filter isNotNull 97 98 // remove empty keys 99 100 val isNotBlank: String =&gt; Boolean = !_.isBlank 101 100 val isNotBlank: String =&gt; Boolean = key =&gt; !key.isBlank 102 json filterKeys isNotBlank One important thing about the map functions listed above is that they are functors, so the structure of the JSON doesn't change. Some optics to work with json-values have been defined in a different library. I didn't want to be opinionated about anything. There are some libraries to create optics out there and the users of json-values are free to use their favorite ones. I use monocle. For example, Prisms are really useful to pass in functions to filter and map: Scala xxxxxxxxxx 1 19 1 import JsStrOptics.toJsStr 2 // toJsStr :: Prism[JsValue,String] 3 4 val toLowerCase = toJsStr.modify(_.toLowerCase) 5 // JsValue =&gt; JsValue 6 7 val trim = toJsStr.modify(_.trim) 8 // JsValue =&gt; JsValue 9 10 val isNotEmpty = toJsStr.exist(_ != &quot;&quot;) 11 // JsValue =&gt; JsValue 12 13 // prism and map/filter are good friends: 14 15 obj map toLowerCase 16 17 obj map trim 18 19 obj filter isNotEmpty This is just a quick introduction to json-values. Go to the project page for further details. At this moment, I'm migrating the library to Scala 3 and adding some more documentation. Wrapping up: json-values implements an immutable Json with persistent data structures. Specs and generators are composable data structures that are defined just as Jsons. json-values is simple, and as Rich Hickey said simplicity matters. Scala is a great language that makes it possible for developers to write expressive and beautiful code. Further Reading Immutable Data Structures in Java. The Data Structures and Algorithms Learning Problem. A Journey With Scala.","mainEntityOfPage":{"@type":"WebPage","@id":"https://dzone.com/articles/json-values-and-the-joy-of-scala-i"},"image":{"@type":"ImageObject","url":"https://dzone.com//dz2cdn2.dzone.com/storage/article-thumb/13019725-thumb.jpg"}}</script></div>


        <article>
            <!-- ngIf: article.type != 'loader' --><div class="content ng-scope" ng-class="{&#39;content-full&#39;: (width &lt;= 1024 &amp;&amp; edition)}" ng-if="article.type != &#39;loader&#39;">
                <div class="header">
                    <div class="col-xs-12 breadcrumb-padding">
                        <a href="https://dzone.com/">DZone</a>
                        &gt;
                            <a ng-href="/java-jdk-development-tutorials-tools-news" class="ng-binding" href="https://dzone.com/java-jdk-development-tutorials-tools-news">Java Zone</a>
                            &gt;
                            <a ng-href="/articles/json-values-and-the-joy-of-scala-i" class="ng-binding" href="https://dzone.com/articles/json-values-and-the-joy-of-scala-i">JSON Values and the Joy of Scala</a>
                    </div>
                    <div class="header-title">
                        <!-- ngIf: article.rawType != 'guide' --><div class="title ng-scope" ng-if="article.rawType != &#39;guide&#39;">
                            <h1 class="article-title ng-binding">
                                JSON Values and the Joy of Scala
                            </h1>
                        </div><!-- end ngIf: article.rawType != 'guide' -->

                        <!-- ngIf: article.rawType == 'guide' -->

                        <div class="subhead">
                            <h3 class="ng-binding">
                                In this article, we introduce json-values, a Scala library that makes use of persistent data structures to allow users to better handle JSON.
                            </h3>
                        </div>

                        <!-- ngIf: article.rawType != 'guide' && article.rawType != 'whitepaper' --><div class="publish-meta ng-scope" ng-if="article.rawType != &#39;guide&#39; &amp;&amp; article.rawType != &#39;whitepaper&#39;">


    <!-- ngRepeat: author in article.authors --><div class="article-author-meta ng-scope" ng-repeat="author in article.authors">
        <a ng-href="/users/3811013/imrafaelmerino.html" href="https://dzone.com/users/3811013/imrafaelmerino.html">
             <img src="./Common Fork Join Pool and Streams - DZone Java_files/03861f5f829152c41ea99949ea5605a5" dz-image-fid-width="80" dz-image-fid="https://secure.gravatar.com/avatar/03861f5f829152c41ea99949ea5605a5?d=identicon&amp;r=PG" data-lazy="true" class="avatar ls-is-cached lazyloaded" width="40">
        </a> by

        <div class="author-info">
                        <span class="author-name">
                            <a th-popup="users.profile.mini" popup-data="{user: author.id}" ng-href="/users/3811013/imrafaelmerino.html" class="ng-binding ng-isolate-scope" href="https://dzone.com/users/3811013/imrafaelmerino.html">
                                Rafael Merino</a>
                        </span>

        </div>
            <!-- ngIf: author.isStaff -->
            <!-- ngIf: author.isMVB -->

            <!-- ngIf: author.isMVB -->
            <div class="zone-leader">
                    <user-is-zone-leader user="author.id" class="ng-isolate-scope"><!-- ngIf: userZoneLeader --></user-is-zone-leader>
            </div>

         ·
    </div><!-- end ngRepeat: author in article.authors -->
                            <span class="author-date ng-binding">
                                    Feb 07, 20</span>
                            ·
                                <a ng-href="/java-jdk-development-tutorials-tools-news" id="portal-name" href="https://dzone.com/java-jdk-development-tutorials-tools-news"><span class="portal-name ng-binding">Java
                                Zone</span></a>
                            ·
                                <article-type type="article.articleType" class="ng-isolate-scope"><span class="ng-binding">Tutorial</span></article-type>
                        </div><!-- end ngIf: article.rawType != 'guide' && article.rawType != 'whitepaper' -->

                        <!-- ngIf: article.rawType == 'whitepaper' -->

                    </div>
                </div>
                    <!-- ngIf: article.isOld -->

                <div class="author-n-useraction">
                    <div class="like action">
                        <dz-like template="like-article.html" node="article" class="ng-isolate-scope">
    <div class="dz-like icon-thumbs-up" ng-class="{&#39;icon-thumbs-up-alt liked&#39;: status.liked, &#39;icon-thumbs-up&#39;: !status.liked}" ng-click="like()"><span class="action-label"><span>Like</span><!-- ngIf: status.liked --></span>
        <a href="https://dzone.com/articles/common-fork-join-pool-and-streams#">
            <span class="ng-binding">(3)</span>
        </a>
    </div>
</dz-like>
                    </div>

                    <div class="comment action">
                        <p ng-show="!article.isLocked" slider-toggle="commentsSlider" slider-data="{parent: article}" activate-with-url-params="{showComments: article.id}" class="ng-isolate-scope">
                            <span><i class="icon-comment" tooltip-html-unsafe=""></i></span>
                            Comment (<span class="comment-after number-of-comments ng-binding" ng-bind="article.nComments">0</span>)
                        </p>
                        <p ng-show="article.isLocked" class="ng-hide">
                <span><i class="icon-icon-comment comment-disabled" tooltip-html-unsafe="Comments have been disabled for this article"></i></span>
                        </p>
                    </div>

                    <div class="save action">
                        <dz-save template="link-article-save.html" node="article" class="save ng-isolate-scope">
    <div ng-class="{&#39;icon-star gold&#39;: status.saved, &#39;icon-star-empty&#39;: !status.saved}" ng-click="save()" class="save icon-star-empty"><span class="save-title">Save</span><!-- ngIf: status.saved --></div>
</dz-save>
                    </div>

                    <div class="tweet action"><a ng-href="#" ng-click="shareTwitter($event, article.header.title, article.url)" class="title" target="_blank" href="https://dzone.com/articles/common-fork-join-pool-and-streams#"><span><i class="icon-twitter"></i></span>
                            <span class="action-label">Tweet</span></a>
                    </div>

                    <div class="pull-right">
                        <div class="article-views action ng-binding"><i class="icon-eye"></i> 7,087

                            <span class="action-label">Views</span>
                        </div>

                            <!-- ngIf: canEdit(article) || canDelete(article) -->
                    </div>
                </div>
                    <div class="signin-prompt">
                        <p>Join the DZone community and get the full member experience.</p>
                        <a id="article-signin-prompt" href="https://dzone.com/articles/common-fork-join-pool-and-streams#" ng-click="loginForm()">Join For Free</a>
                    </div>
                    <div class="arrow-down"></div>

                <!-- ngIf: article.readyForAd --><div ng-if="article.readyForAd" class="ng-scope">
                  <div class="article-bumper  article-bumper-top ng-isolate-scope" dc-slot="ads.bt1.slot(article, $index)" tags="ads.bt1.tags(article, $index)" size="ads.bt1.size(article, $index)" id="div-gpt-ad-1435246566686-13" style=""><div id="google_ads_iframe_/2916070/dz2_bumper_text_ad_2__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div>
                </div><!-- end ngIf: article.readyForAd -->

                <!-- ngIf: !edition || (article.rawType != 'refcard' && article.rawType != 'guide') --><div ng-if="!edition || (article.rawType != &#39;refcard&#39; &amp;&amp; article.rawType != &#39;guide&#39;)" class="ng-scope">
                    <div class="content-html ng-binding" dz-code-container="" ng-bind-html="article.fullHtml"><p><span data-preserver-spaces="true">One of the most important aspects of functional programming is immutable data structures, better known as values. Updating these structures using the&nbsp;</span>copy-on-write<span data-preserver-spaces="true">&nbsp;approach is very inefficient, and this is the reason why&nbsp;</span>persistent data structures<span data-preserver-spaces="true">&nbsp;were created.&nbsp;</span></p> 
<p><span data-preserver-spaces="true">On the other hand, JSON is a lightweight, text-based, language-independent data interchange format. It's become so popular due to its simplicity</span><span data-preserver-spaces="true">. There are a lot of libraries out there to work with JSON in the JVM ecosystem; however,&nbsp;</span>none of them use persistent data structures<span data-preserver-spaces="true">. </span></p> 
<p><span data-preserver-spaces="true">In most cases, those libraries parse a string or array of bytes into an object. The thing is, why do that? JSON is a great structure. It's simple, easy to aggregate, ease to create, easy to reason about, so&nbsp;</span>why create yet another abstraction over JSON?</p> 
<p><span data-preserver-spaces="true">Moreover, there are many architectures that work with JSON end-to-end. Going from JSON to objects or strings back and forth is not very efficient, especially when copy-on-write is the only option to avoid mutation. All these points are way better elaborated in the talk&nbsp;</span><a href="https://www.youtube.com/watch?v=-6BsiVyC1kM" rel="nofollow" target="_blank"><em>the value of values</em></a><em>,&nbsp;</em>a masterpiece from<span data-preserver-spaces="true"> Rich Hickey</span><em>.&nbsp;</em>Json-values<a href="https://github.com/imrafaelmerino/json-scala-values-generator" rel="nofollow"></a><span data-preserver-spaces="true">, the library I'm introducing here, was named after that talk.</span></p> 
<p><a href="https://github.com/imrafaelmerino/json-scala-values" rel="nofollow" target="_blank">json-values</a><span data-preserver-spaces="true">&nbsp;is a functional JSON library in Scala that uses persistent data structures. In this first article, we are going to focus on two more important aspects of software development where json-values can make a difference: data validation and testing.</span></p> 
<p><span data-preserver-spaces="true">To test json-values, I did property-based-testing with&nbsp;</span><a href="https://www.scalacheck.org/" rel="nofollow" target="_blank">ScalaCheck</a><span data-preserver-spaces="true">. It's a great library where creating generators and composing them is very simple. To generate JSON values, I created&nbsp;</span><a href="https://github.com/imrafaelmerino/json-scala-values-generator" rel="nofollow">json-values-generators</a><span data-preserver-spaces="true">, a series of generators to work with ScalaCheck. I argue that it's the most declarative and beautiful Json generator in the world! </span></p> 
<blockquote>
  You may also like: 
 <a href="https://dzone.com/articles/use-json-with-play-and-scala" rel="nofollow">Using JSON With Play and Scala</a>. 
</blockquote> 
<p><span data-preserver-spaces="true">Validation is extremely important in software. Corrupt data can propagate throughout your system and cause a nightmare. Errors that blow up in your face are way better! If you think about it, the definition, validation, and generation of a JSON value could be implemented using the same data structure; after all, the three of them are just bindings with different elements: values, value generators, or value specs. Let's check out an example:</span></p> 
<div class="codeMirror-wrapper"> 
 <div> 
  <div class="codeHeader"> 
   <div class="nameLanguage">
     Scala 
   </div> 
   <i class="icon-cancel-circled-1 cm-remove"> </i> 
  </div> 
  <div class="codeMirror-code--wrapper" data-code="import value.{JsObj,JsArray} import value.Preamble._ // DEFINING A JSON JsObj(&quot;name&quot; -&gt; &quot;Rafael&quot;, &quot;age&quot; -&gt; 37, &quot;languages&quot; -&gt; JsArray(&quot;Haskell&quot;, &quot;Scala&quot;, &quot;Java&quot;, &quot;Clojure&quot;) &quot;github&quot; -&gt; &quot;imrafaelmerino&quot;, &quot;profession&quot; -&gt; &quot;frustrated consultant&quot;, &quot;address&quot; -&gt; JsObj(&quot;city&quot; -&gt; &quot;Madrid&quot;, &quot;location&quot; -&gt; JsArray(40.566, 87.987), &quot;country&quot; -&gt; &quot;ES&quot; ) ) // DEFINING A JSON SPEC import value.spec.{JsObjSpec,JsArraySpec} import value.spec.JsNumberSpecs._ import value.spec.JsStrSpecs._ import value.spec.JsArraySpecs._ JsObjSpec(&quot;name&quot; -&gt; str, &quot;age&quot; -&gt; int, &quot;languages&quot; -&gt; arrayOfStr, &quot;github&quot; -&gt; str, &quot;profession&quot; -&gt; str, &quot;address&quot; -&gt; JsObjSpec(&quot;number&quot; -&gt; str, &quot;location&quot; -&gt; JsArraySpec(decimal, decimal), &quot;country&quot; -&gt; str ) ) // DEFINING A JSON GENERATOR import valuegen.{JsObjGen,JsArrayGen} import valuegen.Preamble._ import org.scalacheck.Arbitrary.arbitrary import org.scalacheck.Gen JsObjGen(&quot;name&quot; -&gt; arbitrary[String], &quot;age&quot; -&gt; Gen.choose(18,120), &quot;profession&quot; -&gt; arbitrary[String], &quot;address&quot; -&gt; JsObjGen(&quot;city&quot; -&gt; arbitrary[String], &quot;location&quot; -&gt; JsArrayGen(doubleGen,doubleGen) &quot;country&quot; -&gt; Gen.oneOf(&quot;ES&quot;,&quot;PO&quot;) ) )" data-lang="text/x-scala"> 
   <div class="CodeMirror cm-s-default CodeMirror-wrap"> 
    <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 249px; left: 126px;"> 
     <textarea value="" tabindex="0" spellcheck="false" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea> 
    </div> 
    <div class="CodeMirror-vscrollbar" style="width: 18px; pointer-events: none; display: block; bottom: 0px;"> 
     <div style="min-width: 1px; height: 1135px;"> 
      <br> 
     </div> 
    </div> 
    <div class="CodeMirror-hscrollbar" style="height: 18px; pointer-events: none;"> 
     <div style="height: 100%; min-height: 1px; width: 0px;"> 
      <br> 
     </div> 
    </div> 
    <div class="CodeMirror-scrollbar-filler"> 
     <br> 
    </div> 
    <div class="CodeMirror-gutter-filler"> 
     <br> 
    </div> 
    <div class="CodeMirror-scroll" tabindex="-1"> 
     <div class="CodeMirror-sizer" style="margin-left: 31px; margin-bottom: 0px; border-right-width: 30px; min-height: 1135px; padding-right: 0px; padding-bottom: 0px;"> 
      <div style="position: relative; top: 0px;"> 
       <div class="CodeMirror-lines"> 
        <div style="position: relative; outline: none;"> 
         <div class="CodeMirror-measure"> 
          <pre><span>xxxxxxxxxx</span></pre> 
          <div class="CodeMirror-linenumber CodeMirror-gutter-elt"> 
           <div>
             1 
           </div> 
          </div> 
          <div class="CodeMirror-linenumber CodeMirror-gutter-elt"> 
           <div>
             50 
           </div> 
          </div> 
         </div> 
         <div class="CodeMirror-measure"> 
          <br> 
         </div> 
         <div style="position: relative; z-index: 1;"> 
          <br> 
         </div> 
         <div class="CodeMirror-cursors" style="visibility: hidden;"> 
          <div class="CodeMirror-cursor" style="left: 94px; top: 1104px; height: 23px;">
            &nbsp; 
          </div> 
         </div> 
         <div class="CodeMirror-code"> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              1 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">value</span>.{<span class="cm-variable">JsObj</span>,<span class="cm-variable">JsArray</span>}</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              2 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">value</span>.<span class="cm-variable">Preamble</span>.<span class="cm-keyword">_</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              3 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              4 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// DEFINING A JSON</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              5 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              6 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">JsObj</span>(<span class="cm-string">"name"</span> <span class="cm-operator">-&gt;</span> <span class="cm-string">"Rafael"</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              7 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string">"age"</span> <span class="cm-operator">-&gt;</span> <span class="cm-number">37</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              8 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string">"languages"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsArray</span>(<span class="cm-string">"Haskell"</span>, <span class="cm-string">"Scala"</span>, <span class="cm-string">"Java"</span>, <span class="cm-string">"Clojure"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              9 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string">"github"</span> <span class="cm-operator">-&gt;</span> <span class="cm-string">"imrafaelmerino"</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              10 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string">"profession"</span> <span class="cm-operator">-&gt;</span> <span class="cm-string">"frustrated consultant"</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              11 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string">"address"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsObj</span>(<span class="cm-string">"city"</span> <span class="cm-operator">-&gt;</span> <span class="cm-string">"Madrid"</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              12 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"location"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsArray</span>(<span class="cm-number">40.566</span>, <span class="cm-number">87.987</span>),</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              13 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"country"</span> <span class="cm-operator">-&gt;</span> <span class="cm-string">"ES"</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              14 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              15 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; )</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              16 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              17 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// DEFINING A JSON SPEC</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              18 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              19 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">value</span>.<span class="cm-variable">spec</span>.{<span class="cm-variable">JsObjSpec</span>,<span class="cm-variable">JsArraySpec</span>}</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              20 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">value</span>.<span class="cm-variable">spec</span>.<span class="cm-variable">JsNumberSpecs</span>.<span class="cm-keyword">_</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              21 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">value</span>.<span class="cm-variable">spec</span>.<span class="cm-variable">JsStrSpecs</span>.<span class="cm-keyword">_</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              22 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">value</span>.<span class="cm-variable">spec</span>.<span class="cm-variable">JsArraySpecs</span>.<span class="cm-keyword">_</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              23 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              24 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">JsObjSpec</span>(<span class="cm-string">"name"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              25 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"age"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">int</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              26 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"languages"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">arrayOfStr</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              27 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"github"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              28 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"profession"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              29 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"address"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsObjSpec</span>(<span class="cm-string">"number"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              30 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"location"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsArraySpec</span>(<span class="cm-variable">decimal</span>, <span class="cm-variable">decimal</span>),</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              31 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"country"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              32 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              33 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; )</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              34 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              35 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// DEFINING A JSON GENERATOR</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              36 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              37 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">valuegen</span>.{<span class="cm-variable">JsObjGen</span>,<span class="cm-variable">JsArrayGen</span>}</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              38 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">valuegen</span>.<span class="cm-variable">Preamble</span>.<span class="cm-keyword">_</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              39 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">org</span>.<span class="cm-variable">scalacheck</span>.<span class="cm-variable">Arbitrary</span>.<span class="cm-variable">arbitrary</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              40 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">org</span>.<span class="cm-variable">scalacheck</span>.<span class="cm-variable">Gen</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              41 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              42 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">JsObjGen</span>(<span class="cm-string">"name"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">arbitrary</span>[<span class="cm-type">String</span>],</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              43 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"age"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">Gen</span>.<span class="cm-variable">choose</span>(<span class="cm-number">18</span>,<span class="cm-number">120</span>),</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              44 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"profession"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">arbitrary</span>[<span class="cm-type">String</span>],</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              45 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"address"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsObjGen</span>(<span class="cm-string">"city"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">arbitrary</span>[<span class="cm-type">String</span>],</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              46 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"location"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsArrayGen</span>(<span class="cm-variable">doubleGen</span>,<span class="cm-variable">doubleGen</span>) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              47 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"country"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">Gen</span>.<span class="cm-variable">oneOf</span>(<span class="cm-string">"ES"</span>,<span class="cm-string">"PO"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              48 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              49 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; )</span></pre> 
          </div> 
          <div style="position: relative; display: none;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              50 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div style="position: absolute; height: 30px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 1135px;"> 
      <br> 
     </div> 
     <div class="CodeMirror-gutters" style="height: 1165px; left: 0px;"> 
      <div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 31px;"> 
       <br> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
 </div> 
</div> 
<p> <br> </p> 
<p>As you can see, creating specs and generators is as simple as creating raw JSON. Writing specs and generators for our tests is child's play. It has enormous advantages for development, such as:</p> 
<ul style="list-style-type: circle;"> 
 <li>Increase productivity.</li> 
 <li><a href="https://dzone.com/articles/code-quality-1" rel="nofollow">More readable code</a>. The more readable code is,&nbsp;the easier it is to maintain and reason about that code.</li> 
</ul> 
<p>Let's focus for a while on what I call json-spec. I named it after <a href="https://clojure.org/guides/spec" rel="nofollow">spec</a>, a Clojure library. It's really powerful and composable. Any spec can be defined in terms of predicates. Let's put a more elaborated example:</p> 
<div class="codeMirror-wrapper"> 
 <div> 
  <div class="codeHeader"> 
   <div class="nameLanguage">
     Java 
   </div> 
   <i class="icon-cancel-circled-1 cm-remove"> </i> 
  </div> 
  <div class="codeMirror-code--wrapper" data-code="val ageSpec: Int =&gt; Result = age =&gt; if(age &lt; 0) Invalid(&quot;you must be kidding!&quot;) else if(age &gt; 120) Invalid(&quot;you can stil fill out forms!!&quot;) else Valid val noLongerThat: Int =&gt; String =&gt; Result = max =&gt; value =&gt; if(value.length &gt; max) Invalid(&quot;too long&quot;) else Valid val personSpec = JsObjSpec(&quot;name&quot; -&gt; str(noLongerThat(100)), &quot;last_name&quot; -&gt; str(noLongerThat(200)), &quot;profession&quot; -&gt; str(noLongerThat(200), nullable=true), &quot;country&quot; -&gt; enum(&quot;ES&quot;,&quot;PO&quot;), &quot;languages&quot; -&gt; arrayOfStr(elemNullable=false), &quot;age&quot; -&gt; intSuchThat(ageSpec,required=false), * -&gt; any ) // * -&gt; any means: any binding different than the specified is allowed // specs are easy to compose val address = JsObjSpec(&quot;number&quot; -&gt; str, &quot;street&quot; -&gt; str, &quot;city&quot; -&gt; str, &quot;location&quot; -&gt; JsArraySpec(double, double) ) val personWithAddressSpec = personSpec + (&quot;address&quot;, address)" data-lang="text/x-java"> 
   <div class="CodeMirror cm-s-default CodeMirror-wrap"> 
    <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 134px; left: 594px;"> 
     <textarea value="" tabindex="0" spellcheck="false" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea> 
    </div> 
    <div class="CodeMirror-vscrollbar" style="width: 18px; pointer-events: none; display: block; bottom: 0px;"> 
     <div style="min-width: 1px; height: 652px;"> 
      <br> 
     </div> 
    </div> 
    <div class="CodeMirror-hscrollbar" style="height: 18px; pointer-events: none;"> 
     <div style="height: 100%; min-height: 1px; width: 0px;"> 
      <br> 
     </div> 
    </div> 
    <div class="CodeMirror-scrollbar-filler"> 
     <br> 
    </div> 
    <div class="CodeMirror-gutter-filler"> 
     <br> 
    </div> 
    <div class="CodeMirror-scroll" tabindex="-1"> 
     <div class="CodeMirror-sizer" style="margin-left: 31px; margin-bottom: 0px; border-right-width: 30px; min-height: 652px; padding-right: 0px; padding-bottom: 0px;"> 
      <div style="position: relative; top: 0px;"> 
       <div class="CodeMirror-lines"> 
        <div style="position: relative; outline: none;"> 
         <div class="CodeMirror-measure"> 
          <pre>x</pre> 
         </div> 
         <div class="CodeMirror-measure"> 
          <br> 
         </div> 
         <div style="position: relative; z-index: 1;"> 
          <br> 
         </div> 
         <div class="CodeMirror-cursors"> 
          <div class="CodeMirror-cursor" style="left: 562px; top: 391px; height: 23px;">
            &nbsp; 
          </div> 
         </div> 
         <div class="CodeMirror-code"> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              1 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">val</span> <span class="cm-variable">ageSpec</span>: <span class="cm-variable">Int</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">Result</span> <span class="cm-operator">=</span> <span class="cm-variable">age</span> <span class="cm-operator">=&gt;</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              2 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp;<span class="cm-keyword">if</span>(<span class="cm-variable">age</span> <span class="cm-operator">&lt;</span> <span class="cm-number">0</span>) <span class="cm-variable">Invalid</span>(<span class="cm-string">"you must be kidding!"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              3 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp;<span class="cm-keyword">else</span> <span class="cm-keyword">if</span>(<span class="cm-variable">age</span> <span class="cm-operator">&gt;</span> <span class="cm-number">120</span>) <span class="cm-variable">Invalid</span>(<span class="cm-string">"you can stil fill out forms!!"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              4 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp;<span class="cm-keyword">else</span> <span class="cm-variable">Valid</span> &nbsp;</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              5 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              6 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">val</span> <span class="cm-variable">noLongerThat</span>: <span class="cm-variable">Int</span> <span class="cm-operator">=&gt;</span> <span class="cm-type">String</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">Result</span> <span class="cm-operator">=</span> <span class="cm-variable">max</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">value</span> <span class="cm-operator">=&gt;</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              7 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp;<span class="cm-keyword">if</span>(<span class="cm-variable">value</span>.<span class="cm-variable">length</span> <span class="cm-operator">&gt;</span> <span class="cm-variable">max</span>) <span class="cm-variable">Invalid</span>(<span class="cm-string">"too long"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              8 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp;<span class="cm-keyword">else</span> <span class="cm-variable">Valid</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              9 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              10 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">val</span> <span class="cm-variable">personSpec</span> <span class="cm-operator">=</span> <span class="cm-variable">JsObjSpec</span>(<span class="cm-string">"name"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>(<span class="cm-variable">noLongerThat</span>(<span class="cm-number">100</span>)),</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              11 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"last_name"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>(<span class="cm-variable">noLongerThat</span>(<span class="cm-number">200</span>)),</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              12 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"profession"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>(<span class="cm-variable">noLongerThat</span>(<span class="cm-number">200</span>), <span class="cm-variable">nullable</span><span class="cm-operator">=</span><span class="cm-atom">true</span>),</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              13 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"country"</span> <span class="cm-operator">-&gt;</span> <span class="cm-keyword">enum</span>(<span class="cm-string">"ES"</span>,<span class="cm-string">"PO"</span>), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              14 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"languages"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">arrayOfStr</span>(<span class="cm-variable">elemNullable</span><span class="cm-operator">=</span><span class="cm-atom">false</span>),</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              15 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"age"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">intSuchThat</span>(<span class="cm-variable">ageSpec</span>,<span class="cm-variable">required</span><span class="cm-operator">=</span><span class="cm-atom">false</span>),</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              16 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-operator">*</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">any</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              17 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              18 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// * -&gt; any means: any binding different than the specified is allowed</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              19 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              20 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// specs are easy to compose</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              21 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              22 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> <span class="cm-variable">val</span> <span class="cm-variable">address</span> <span class="cm-operator">=</span> <span class="cm-variable">JsObjSpec</span>(<span class="cm-string">"number"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              23 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"street"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              24 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"city"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">str</span>,</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              25 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"location"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsArraySpec</span>(<span class="cm-type">double</span>, <span class="cm-type">double</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              26 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              27 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              28 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">val</span> <span class="cm-variable">personWithAddressSpec</span> <span class="cm-operator">=</span> <span class="cm-variable">personSpec</span> <span class="cm-operator">+</span> (<span class="cm-string">"address"</span>, <span class="cm-variable">address</span>)</span></pre> 
          </div> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div style="position: absolute; height: 30px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 652px;"> 
      <br> 
     </div> 
     <div class="CodeMirror-gutters" style="height: 682px; left: 0px;"> 
      <div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 31px;"> 
       <br> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
 </div> 
</div> 
<p> <br> </p> 
<p>A spec can be used to validate existing JSON:</p> 
<div class="codeMirror-wrapper"> 
 <div> 
  <div class="codeHeader"> 
   <div class="nameLanguage">
     Scala 
   </div> 
   <i class="icon-cancel-circled-1 cm-remove"> </i> 
  </div> 
  <div class="codeMirror-code--wrapper" data-code="import value.JsObjParser import value.Invalid import value.JsPath val spec:JsObjSpec = ??? // a json spec val str:String = ??? // a string representing a json val json:Either[Invalid,JsObj] = JsObjParser.parse(str) // a lazy list of path/error pairs is returned val errors:LazyList[(JsPath,InvalidValue)] = json.fold(throw _) (obj =&gt; obj.validate(spec))" data-lang="text/x-scala"> 
   <div class="CodeMirror cm-s-default CodeMirror-wrap"> 
    <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 189px; left: 342px;"> 
     <textarea value="" tabindex="0" spellcheck="false" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea> 
    </div> 
    <div class="CodeMirror-vscrollbar" style="width: 18px; pointer-events: none;"> 
     <div style="min-width: 1px; height: 0px;"> 
      <br> 
     </div> 
    </div> 
    <div class="CodeMirror-hscrollbar" style="height: 18px; pointer-events: none;"> 
     <div style="height: 100%; min-height: 1px; width: 0px;"> 
      <br> 
     </div> 
    </div> 
    <div class="CodeMirror-scrollbar-filler"> 
     <br> 
    </div> 
    <div class="CodeMirror-gutter-filler"> 
     <br> 
    </div> 
    <div class="CodeMirror-scroll" tabindex="-1"> 
     <div class="CodeMirror-sizer" style="margin-left: 31px; margin-bottom: 0px; border-right-width: 30px; min-height: 261px; padding-right: 0px; padding-bottom: 0px;"> 
      <div style="position: relative; top: 0px;"> 
       <div class="CodeMirror-lines"> 
        <div style="position: relative; outline: none;"> 
         <div class="CodeMirror-measure"> 
          <pre><span>xxxxxxxxxx</span></pre> 
          <div class="CodeMirror-linenumber CodeMirror-gutter-elt"> 
           <div>
             1 
           </div> 
          </div> 
          <div class="CodeMirror-linenumber CodeMirror-gutter-elt"> 
           <div>
             10 
           </div> 
          </div> 
         </div> 
         <div class="CodeMirror-measure"> 
          <br> 
         </div> 
         <div style="position: relative; z-index: 1;"> 
          <br> 
         </div> 
         <div class="CodeMirror-cursors" style="visibility: hidden;"> 
          <div class="CodeMirror-cursor" style="left: 310px; top: 184px; height: 23px;">
            &nbsp; 
          </div> 
         </div> 
         <div class="CodeMirror-code"> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              1 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">value</span>.<span class="cm-variable">JsObjParser</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              2 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">value</span>.<span class="cm-variable">Invalid</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              3 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">value</span>.<span class="cm-variable">JsPath</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              4 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              5 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">spec</span>:<span class="cm-variable">JsObjSpec</span> <span class="cm-operator">=</span> <span class="cm-operator">???</span> <span class="cm-comment">// a json spec</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              6 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">str</span>:<span class="cm-type">String</span> <span class="cm-operator">=</span> <span class="cm-operator">???</span> &nbsp; &nbsp; <span class="cm-comment">// a string representing a json </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              7 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">json</span>:<span class="cm-type">Either</span>[<span class="cm-variable">Invalid</span>,<span class="cm-variable">JsObj</span>] <span class="cm-operator">=</span> <span class="cm-variable">JsObjParser</span>.<span class="cm-variable">parse</span>(<span class="cm-variable">str</span>) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              8 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              9 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// a lazy list of path/error pairs is returned</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              10 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">errors</span>:<span class="cm-variable">LazyList</span>[(<span class="cm-variable">JsPath</span>,<span class="cm-variable">InvalidValue</span>)] <span class="cm-operator">=</span> <span class="cm-variable">json</span>.<span class="cm-variable">fold</span>(<span class="cm-keyword">throw</span> <span class="cm-keyword">_</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              11 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (<span class="cm-variable">obj</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">obj</span>.<span class="cm-variable">validate</span>(<span class="cm-variable">spec</span>))</span></pre> 
          </div> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div style="position: absolute; height: 30px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 261px;"> 
      <br> 
     </div> 
     <div class="CodeMirror-gutters" style="height: 291px; left: 0px;"> 
      <div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 31px;"> 
       <br> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
 </div> 
</div> 
<p> <br> </p> 
<p>Returning a lazy list <strong>decouples</strong> the validate function from its consumers. Consumers can take only an error if they are just interested in whether the JSON is valid or not, or they can take them all to print out a report. </p> 
<p>In both cases, they are invoking the same function. A json-spec can be also used to parse a string or an array of bytes into JSON. Instead of parsing the whole string and then validating it, we can validate the JSON while parsing it and stop the parsing as soon as an error happens. After all, failing fast is important as well!</p> 
<p> </p> 
<div class="codeMirror-wrapper"> 
 <div contenteditable="false"> 
  <div class="codeHeader"> 
   <div class="nameLanguage">
     Scala 
   </div> 
   <i class="icon-cancel-circled-1 cm-remove"> </i> 
  </div> 
  <div class="codeMirror-code--wrapper" data-code="val bytes:Array[Byte] = ??? // bytes representing a Json 
val spec = ??? // a json spec 
val parser = JsObjParser(spec) // a json parser from a spec 
val result:Either[InvalidJson,JsObj] = parser.parse(bytes)" data-lang="text/x-scala"> 
   <div class="CodeMirror cm-s-default CodeMirror-wrap"> 
    <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 74px; left: 36px;"> 
     <textarea style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;" autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" value=""></textarea> 
    </div> 
    <div class="CodeMirror-vscrollbar" cm-not-content="true" style="width: 18px; pointer-events: none;"> 
     <div style="min-width: 1px; height: 0px;"></div> 
    </div> 
    <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;"> 
     <div style="height: 100%; min-height: 1px; width: 0px;"></div> 
    </div> 
    <div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div> 
    <div class="CodeMirror-gutter-filler" cm-not-content="true"></div> 
    <div class="CodeMirror-scroll" tabindex="-1"> 
     <div class="CodeMirror-sizer" style="margin-left: 31px; margin-bottom: 0px; border-right-width: 30px; min-height: 100px; padding-right: 0px; padding-bottom: 0px;"> 
      <div style="position: relative; top: 0px;"> 
       <div class="CodeMirror-lines" role="presentation"> 
        <div role="presentation" style="position: relative; outline: none;"> 
         <div class="CodeMirror-measure"> 
          <pre><span>xxxxxxxxxx</span></pre> 
          <div class="CodeMirror-linenumber CodeMirror-gutter-elt"> 
           <div>
             1 
           </div> 
          </div> 
         </div> 
         <div class="CodeMirror-measure"></div> 
         <div style="position: relative; z-index: 1;"></div> 
         <div class="CodeMirror-cursors"> 
          <div class="CodeMirror-cursor" style="left: 4px; top: 69px; height: 23px;">
            &nbsp; 
          </div> 
         </div> 
         <div class="CodeMirror-code" role="presentation"> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              1 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">bytes</span>:<span class="cm-type">Array</span>[<span class="cm-type">Byte</span>] <span class="cm-operator">=</span> <span class="cm-operator">???</span> <span class="cm-comment">// bytes representing a Json </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              2 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">spec</span> <span class="cm-operator">=</span> <span class="cm-operator">???</span> <span class="cm-comment">// a json spec </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              3 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">parser</span> <span class="cm-operator">=</span> <span class="cm-variable">JsObjParser</span>(<span class="cm-variable">spec</span>) <span class="cm-comment">// a json parser from a spec </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              4 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">result</span>:<span class="cm-type">Either</span>[<span class="cm-variable">InvalidJson</span>,<span class="cm-variable">JsObj</span>] <span class="cm-operator">=</span> <span class="cm-variable">parser</span>.<span class="cm-variable">parse</span>(<span class="cm-variable">bytes</span>)</span></pre> 
          </div> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div style="position: absolute; height: 30px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 100px;"></div> 
     <div class="CodeMirror-gutters" style="height: 130px; left: 0px;"> 
      <div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 31px;"></div> 
     </div> 
    </div> 
   </div> 
  </div> 
 </div> 
</div> 
<p> <br> </p> 
<p>Let's move on and introduce some of the most important functions in the library:&nbsp;</p> 
<div class="codeMirror-wrapper"> 
 <div contenteditable="false"> 
  <div class="codeHeader"> 
   <div class="nameLanguage">
     Scala 
   </div> 
   <i class="icon-cancel-circled-1 cm-remove"> </i> 
  </div> 
  <div class="codeMirror-code--wrapper" data-code="// every element is a JsValue. It&#39;s a sum type:

val value: JsValue = ??? 

value match
  {
    case primitive: JsPrimitive =&gt; primitive match
    {
      case JsStr(value) =&gt; println(&quot;I&#39;m a string&quot;)
      case number: JsNumber =&gt; number match
      {
        case JsInt(value) =&gt; println(&quot;I&#39;m an integer&quot;)
        case JsDouble(value) =&gt; println(&quot;I&#39;m a double&quot;)
        case JsLong(value) =&gt; println(&quot;I&#39;m a long&quot;)
        case JsBigDec(value) =&gt; println(&quot;I&#39;m a big decimal&quot;)
        case JsBigInt(value) =&gt; println
          (&quot;I&#39;m a big integer&quot;)
      }
      case JsBool(value) =&gt; println(&quot;I&#39;m a boolean&quot;)
      case JsNull =&gt; println(&quot;I&#39;m null&quot;)
    }
    case json: Json[_] =&gt; json match
    {
      case o: JsObj =&gt; println(&quot;I&#39;m an object&quot;)
      case a: JsArray =&gt; println(&quot;I&#39;m an array&quot;)
    }
    case JsNothing =&gt; println(&quot;I&#39;m a special type!&quot;)
  }

// A Json can be modeled as a set of path/value pairs: 

val obj = JsObj(&quot;a&quot; -&gt; &quot;hi&quot;, 
                &quot;b&quot; -&gt; JsArray(1,2,3), 
                &quot;c&quot; -&gt; JsObj(&quot;d&quot; -&gt; true, 
                             &quot;e&quot; -&gt; JsNull
                            ) 
               ) 

val pairs:LazyList[(JsPath,JsValue)] = obj.flatten pairs.foreach(println) 

// (&quot;a&quot;, &quot;hi&quot;) 
// (&quot;b&quot; / 0, 1) 
// (&quot;b&quot; / 1, 2) 
// (&quot;b&quot; / 2, 3) 
// (&quot;c&quot; / &quot;d&quot;, true) 
// (&quot;c&quot; / &quot;e&quot;, null) 

// in fact, a Json can be created from a set of path/value pairs: 

val obj = JsObj((&quot;a&quot;, &quot;hi&quot; ), 
                (&quot;b&quot; / 0, 1 ), 
                (&quot;b&quot; / 1, 2 ), 
                (&quot;b&quot; / 2, 3 ), 
                (&quot;c&quot; / &quot;d&quot;, true ), 
                (&quot;c&quot; / &quot;e&quot;, null ) 
               ) 
                                     
// lets get some value out using the apply function 

obj(&quot;a&quot;) == JsStr(&quot;hi&quot;) 
obj(&quot;b&quot; / 0) == JsInt(1) 
obj(&quot;c&quot; / &quot;d&quot;) == TRUE 
obj(&quot;c&quot; / &quot;e&quot;) == JsNull 
                                     
// apply is a total function, it always returns a JsValue: 

obj(&quot;d&quot; / &quot;e&quot;) == JsNothing 
                                     
// let&#39;s put some data in 

val json = JsObj.empty.inserted(&quot;a&quot; / &quot;b&quot;, 1)
                      .inserted(&quot;a&quot; / &quot;c&quot; / 2, 10, padWith=0) 

json == JsObj(&quot;a&quot; -&gt; JsObj(&quot;b&quot; -&gt; 1, 
                           &quot;c&quot; -&gt; JsArray(0,0,10) 
                          ) 
             ) 

// trim string values. Imperative impl of fn. Later a Prism will be used 

val trimStr: JsPrimitive =&gt; JsValue = 
             x =&gt; if (x.isStr) x.toJsStr.map(_.trim) else x 

json map trimStr 

// map keys to lowercase 

val toLowerCase: String =&gt; String =_.toLowerCase
 
json mapKeys toLowerCase 

// remove null values 

val isNotNull: JsPrimitive =&gt; Boolean = _.isNotNull

json filter isNotNull 
 
// remove empty keys 

val isNotBlank: String =&gt; Boolean = !_.isBlank

json filterKeys isNotBlank" data-lang="text/x-scala"> 
   <div class="CodeMirror cm-s-default CodeMirror-wrap"> 
    <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 249px; left: 36px;"> 
     <textarea style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;" autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" value=""></textarea> 
    </div> 
    <div class="CodeMirror-vscrollbar" cm-not-content="true" style="width: 18px; pointer-events: none; display: block; bottom: 0px;"> 
     <div style="min-width: 1px; height: 2354px;"></div> 
    </div> 
    <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;"> 
     <div style="height: 100%; min-height: 1px; width: 0px;"></div> 
    </div> 
    <div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div> 
    <div class="CodeMirror-gutter-filler" cm-not-content="true"></div> 
    <div class="CodeMirror-scroll" draggable="false" tabindex="-1"> 
     <div class="CodeMirror-sizer" style="margin-left: 31px; margin-bottom: 0px; border-right-width: 30px; min-height: 2354px; padding-right: 0px; padding-bottom: 0px;"> 
      <div style="position: relative; top: 0px;"> 
       <div class="CodeMirror-lines" role="presentation"> 
        <div role="presentation" style="position: relative; outline: none;"> 
         <div class="CodeMirror-measure"> 
          <pre>x</pre> 
         </div> 
         <div class="CodeMirror-measure"></div> 
         <div style="position: relative; z-index: 1;"></div> 
         <div class="CodeMirror-cursors"> 
          <div class="CodeMirror-cursor" style="left: 4px; top: 2300px; height: 23px;">
            &nbsp; 
          </div> 
         </div> 
         <div class="CodeMirror-code" role="presentation"> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              1 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// every element is a JsValue. It's a sum type:</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              2 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              3 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">value</span>: <span class="cm-variable">JsValue</span> <span class="cm-operator">=</span> <span class="cm-operator">???</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              4 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              5 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">value</span> <span class="cm-keyword">match</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              6 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">  {</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              7 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">primitive</span>: <span class="cm-variable">JsPrimitive</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">primitive</span> <span class="cm-keyword">match</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              8 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  {</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              9 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">JsStr</span>(<span class="cm-variable">value</span>) <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm a string"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              10 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">number</span>: <span class="cm-variable">JsNumber</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">number</span> <span class="cm-keyword">match</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              11 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;  {</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              12 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">JsInt</span>(<span class="cm-variable">value</span>) <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm an integer"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              13 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">JsDouble</span>(<span class="cm-variable">value</span>) <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm a double"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              14 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">JsLong</span>(<span class="cm-variable">value</span>) <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm a long"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              15 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">JsBigDec</span>(<span class="cm-variable">value</span>) <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm a big decimal"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              16 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">JsBigInt</span>(<span class="cm-variable">value</span>) <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              17 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;  (<span class="cm-string">"I'm a big integer"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              18 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;  }</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              19 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">JsBool</span>(<span class="cm-variable">value</span>) <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm a boolean"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              20 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">JsNull</span> <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm null"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              21 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              22 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">json</span>: <span class="cm-variable">Json</span>[<span class="cm-keyword">_</span>] <span class="cm-operator">=&gt;</span> <span class="cm-variable">json</span> <span class="cm-keyword">match</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              23 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  {</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              24 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">o</span>: <span class="cm-variable">JsObj</span> <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm an object"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              25 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">a</span>: <span class="cm-variable">JsArray</span> <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm an array"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              26 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              27 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-keyword">case</span> <span class="cm-variable">JsNothing</span> <span class="cm-operator">=&gt;</span> <span class="cm-keyword">println</span>(<span class="cm-string">"I'm a special type!"</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              28 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">  }</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              29 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              30 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// A Json can be modeled as a set of path/value pairs: </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              31 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              32 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">obj</span> <span class="cm-operator">=</span> <span class="cm-variable">JsObj</span>(<span class="cm-string">"a"</span> <span class="cm-operator">-&gt;</span> <span class="cm-string">"hi"</span>, </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              33 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"b"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsArray</span>(<span class="cm-number">1</span>,<span class="cm-number">2</span>,<span class="cm-number">3</span>), </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              34 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"c"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsObj</span>(<span class="cm-string">"d"</span> <span class="cm-operator">-&gt;</span> <span class="cm-atom">true</span>, </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              35 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"e"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsNull</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              36 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  ) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              37 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              38 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              39 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">pairs</span>:<span class="cm-variable">LazyList</span>[(<span class="cm-variable">JsPath</span>,<span class="cm-variable">JsValue</span>)] <span class="cm-operator">=</span> <span class="cm-variable">obj</span>.<span class="cm-variable">flatten</span> <span class="cm-variable">pairs</span>.<span class="cm-variable">foreach</span>(<span class="cm-keyword">println</span>) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              40 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              41 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// ("a", "hi") </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              42 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// ("b" / 0, 1) </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              43 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// ("b" / 1, 2) </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              44 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// ("b" / 2, 3) </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              45 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// ("c" / "d", true) </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              46 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// ("c" / "e", null) </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              47 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              48 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// in fact, a Json can be created from a set of path/value pairs: </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              49 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              50 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">obj</span> <span class="cm-operator">=</span> <span class="cm-variable">JsObj</span>((<span class="cm-string">"a"</span>, <span class="cm-string">"hi"</span> ), </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              51 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  (<span class="cm-string">"b"</span> <span class="cm-operator">/</span> <span class="cm-number">0</span>, <span class="cm-number">1</span> ), </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              52 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  (<span class="cm-string">"b"</span> <span class="cm-operator">/</span> <span class="cm-number">1</span>, <span class="cm-number">2</span> ), </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              53 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  (<span class="cm-string">"b"</span> <span class="cm-operator">/</span> <span class="cm-number">2</span>, <span class="cm-number">3</span> ), </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              54 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  (<span class="cm-string">"c"</span> <span class="cm-operator">/</span> <span class="cm-string">"d"</span>, <span class="cm-atom">true</span> ), </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              55 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  (<span class="cm-string">"c"</span> <span class="cm-operator">/</span> <span class="cm-string">"e"</span>, <span class="cm-keyword">null</span> ) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              56 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              57 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              58 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// lets get some value out using the apply function </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              59 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              60 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">obj</span>(<span class="cm-string">"a"</span>) <span class="cm-operator">==</span> <span class="cm-variable">JsStr</span>(<span class="cm-string">"hi"</span>) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              61 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">obj</span>(<span class="cm-string">"b"</span> <span class="cm-operator">/</span> <span class="cm-number">0</span>) <span class="cm-operator">==</span> <span class="cm-variable">JsInt</span>(<span class="cm-number">1</span>) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              62 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">obj</span>(<span class="cm-string">"c"</span> <span class="cm-operator">/</span> <span class="cm-string">"d"</span>) <span class="cm-operator">==</span> <span class="cm-variable">TRUE</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              63 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">obj</span>(<span class="cm-string">"c"</span> <span class="cm-operator">/</span> <span class="cm-string">"e"</span>) <span class="cm-operator">==</span> <span class="cm-variable">JsNull</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              64 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              65 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// apply is a total function, it always returns a JsValue: </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              66 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              67 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">obj</span>(<span class="cm-string">"d"</span> <span class="cm-operator">/</span> <span class="cm-string">"e"</span>) <span class="cm-operator">==</span> <span class="cm-variable">JsNothing</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              68 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              69 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// let's put some data in </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              70 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              71 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">json</span> <span class="cm-operator">=</span> <span class="cm-variable">JsObj</span>.<span class="cm-variable">empty</span>.<span class="cm-variable">inserted</span>(<span class="cm-string">"a"</span> <span class="cm-operator">/</span> <span class="cm-string">"b"</span>, <span class="cm-number">1</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              72 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  .<span class="cm-variable">inserted</span>(<span class="cm-string">"a"</span> <span class="cm-operator">/</span> <span class="cm-string">"c"</span> <span class="cm-operator">/</span> <span class="cm-number">2</span>, <span class="cm-number">10</span>, <span class="cm-variable">padWith</span><span class="cm-operator">=</span><span class="cm-number">0</span>) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              73 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              74 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">json</span> <span class="cm-operator">==</span> <span class="cm-variable">JsObj</span>(<span class="cm-string">"a"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsObj</span>(<span class="cm-string">"b"</span> <span class="cm-operator">-&gt;</span> <span class="cm-number">1</span>, </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              75 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-string">"c"</span> <span class="cm-operator">-&gt;</span> <span class="cm-variable">JsArray</span>(<span class="cm-number">0</span>,<span class="cm-number">0</span>,<span class="cm-number">10</span>) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              76 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  ) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              77 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ) </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              78 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              79 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// trim string values. Imperative impl of fn. Later a Prism will be used </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              80 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              81 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">trimStr</span>: <span class="cm-variable">JsPrimitive</span> <span class="cm-operator">=&gt;</span> <span class="cm-variable">JsValue</span> <span class="cm-operator">=</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              82 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="cm-variable">x</span> <span class="cm-operator">=&gt;</span> <span class="cm-keyword">if</span> (<span class="cm-variable">x</span>.<span class="cm-variable">isStr</span>) <span class="cm-variable">x</span>.<span class="cm-variable">toJsStr</span>.<span class="cm-variable">map</span>(<span class="cm-keyword">_</span>.<span class="cm-variable">trim</span>) <span class="cm-keyword">else</span> <span class="cm-variable">x</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              83 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              84 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">json</span> <span class="cm-variable">map</span> <span class="cm-variable">trimStr</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              85 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              86 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// map keys to lowercase </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              87 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              88 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">toLowerCase</span>: <span class="cm-type">String</span> <span class="cm-operator">=&gt;</span> <span class="cm-type">String</span> <span class="cm-operator">=</span><span class="cm-keyword">_</span>.<span class="cm-variable">toLowerCase</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              89 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              90 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">json</span> <span class="cm-variable">mapKeys</span> <span class="cm-variable">toLowerCase</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              91 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              92 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// remove null values </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              93 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              94 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">isNotNull</span>: <span class="cm-variable">JsPrimitive</span> <span class="cm-operator">=&gt;</span> <span class="cm-type">Boolean</span> <span class="cm-operator">=</span> <span class="cm-keyword">_</span>.<span class="cm-variable">isNotNull</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              95 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              96 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">json</span> <span class="cm-variable">filter</span> <span class="cm-variable">isNotNull</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              97 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              98 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// remove empty keys </span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              99 
            </div> 
           </div> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              100 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">isNotBlank</span>: <span class="cm-type">String</span> <span class="cm-operator">=&gt;</span> <span class="cm-type">Boolean</span> <span class="cm-operator">=</span> <span class="cm-operator">!</span><span class="cm-keyword">_</span>.<span class="cm-variable">isBlank</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              101 
            </div> 
           </div> 
          </div> 
          <div style="position: relative; display: none;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              100 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">isNotBlank</span>: <span class="cm-type">String</span> <span class="cm-operator">=&gt;</span> <span class="cm-type">Boolean</span> <span class="cm-operator">=</span> <span class="cm-variable">key</span> <span class="cm-operator">=&gt;</span> <span class="cm-operator">!</span><span class="cm-variable">key</span>.<span class="cm-variable">isBlank</span> </span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              102 
            </div> 
           </div> 
           <pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">json</span> <span class="cm-variable">filterKeys</span> <span class="cm-variable">isNotBlank</span></span></pre> 
          </div> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div style="position: absolute; height: 30px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 2354px;"></div> 
     <div class="CodeMirror-gutters" style="height: 2384px; left: 0px;"> 
      <div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 31px;"></div> 
     </div> 
    </div> 
   </div> 
  </div> 
 </div> 
</div> 
<p> <br> </p> 
<p> </p> 
<p>One important thing about the&nbsp;<code>map</code> functions listed above is that they are <strong>functors</strong>, so the structure of the JSON doesn't change.</p> 
<p>Some optics to work with json-values have been defined in a different&nbsp;<a href="https://github.com/imrafaelmerino/optics-json-values" rel="nofollow">library</a>. I didn't want to be opinionated about anything. There are some libraries to create optics out there and the users of json-values are free to use their favorite ones. I use <a href="https://julien-truffaut.github.io/Monocle/" rel="nofollow">monocle</a>. For example, Prisms are really useful to pass in functions to&nbsp;<em>filter</em> and&nbsp;<em>map</em>:</p> 
<div class="codeMirror-wrapper"> 
 <div> 
  <div class="codeHeader"> 
   <div class="nameLanguage">
     Scala 
   </div> 
   <i class="icon-cancel-circled-1 cm-remove"> </i> 
  </div> 
  <div class="codeMirror-code--wrapper" data-code="import JsStrOptics.toJsStr // toJsStr :: Prism[JsValue,String] val toLowerCase = toJsStr.modify(_.toLowerCase) // JsValue =&gt; JsValue val trim = toJsStr.modify(_.trim) // JsValue =&gt; JsValue val isNotEmpty = toJsStr.exist(_ != &quot;&quot;) // JsValue =&gt; JsValue // prism and map/filter are good friends: obj map toLowerCase obj map trim obj filter isNotEmpty" data-lang="text/x-scala"> 
   <div class="CodeMirror cm-s-default CodeMirror-wrap"> 
    <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 120px; left: 36px;"> 
     <textarea value="" tabindex="0" spellcheck="false" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea> 
    </div> 
    <div class="CodeMirror-vscrollbar" style="width: 18px; pointer-events: none; display: block; bottom: 0px;"> 
     <div style="min-width: 1px; height: 445px;"> 
      <br> 
     </div> 
    </div> 
    <div class="CodeMirror-hscrollbar" style="height: 18px; pointer-events: none;"> 
     <div style="height: 100%; min-height: 1px; width: 0px;"> 
      <br> 
     </div> 
    </div> 
    <div class="CodeMirror-scrollbar-filler"> 
     <br> 
    </div> 
    <div class="CodeMirror-gutter-filler"> 
     <br> 
    </div> 
    <div class="CodeMirror-scroll" tabindex="-1"> 
     <div class="CodeMirror-sizer" style="margin-left: 31px; margin-bottom: 0px; border-right-width: 30px; min-height: 445px; padding-right: 0px; padding-bottom: 0px;"> 
      <div style="position: relative; top: 0px;"> 
       <div class="CodeMirror-lines"> 
        <div style="position: relative; outline: none;"> 
         <div class="CodeMirror-measure"> 
          <pre><span>xxxxxxxxxx</span></pre> 
          <div class="CodeMirror-linenumber CodeMirror-gutter-elt"> 
           <div>
             1 
           </div> 
          </div> 
          <div class="CodeMirror-linenumber CodeMirror-gutter-elt"> 
           <div>
             19 
           </div> 
          </div> 
         </div> 
         <div class="CodeMirror-measure"> 
          <br> 
         </div> 
         <div style="position: relative; z-index: 1;"> 
          <br> 
         </div> 
         <div class="CodeMirror-cursors"> 
          <div class="CodeMirror-cursor" style="left: 4px; top: 115px; height: 23px;">
            &nbsp; 
          </div> 
         </div> 
         <div class="CodeMirror-code"> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              1 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">JsStrOptics</span>.<span class="cm-variable">toJsStr</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              2 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// toJsStr :: Prism[JsValue,String]</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              3 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              4 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">toLowerCase</span> <span class="cm-operator">=</span> <span class="cm-variable">toJsStr</span>.<span class="cm-variable">modify</span>(<span class="cm-keyword">_</span>.<span class="cm-variable">toLowerCase</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              5 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// JsValue =&gt; JsValue</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              6 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              7 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">trim</span> <span class="cm-operator">=</span> <span class="cm-variable">toJsStr</span>.<span class="cm-variable">modify</span>(<span class="cm-keyword">_</span>.<span class="cm-variable">trim</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              8 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// JsValue =&gt; JsValue</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              9 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              10 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">val</span> <span class="cm-def">isNotEmpty</span> <span class="cm-operator">=</span> <span class="cm-variable">toJsStr</span>.<span class="cm-variable">exist</span>(<span class="cm-keyword">_</span> <span class="cm-operator">!=</span> <span class="cm-string">""</span>)</span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              11 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// JsValue =&gt; JsValue</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              12 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              13 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// prism and map/filter are good friends:</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              14 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              15 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">obj</span> <span class="cm-variable">map</span> <span class="cm-variable">toLowerCase</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              16 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              17 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">obj</span> <span class="cm-variable">map</span> <span class="cm-variable">trim</span></span></pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              18 
            </div> 
           </div> 
           <pre class="CodeMirror-line"> </pre> 
          </div> 
          <div style="position: relative;"> 
           <div class="CodeMirror-gutter-wrapper" style="left: -31px;"> 
            <div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">
              19 
            </div> 
           </div> 
           <pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">obj</span> <span class="cm-variable">filter</span> <span class="cm-variable">isNotEmpty</span> </span></pre> 
          </div> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div style="position: absolute; height: 30px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 445px;"> 
      <br> 
     </div> 
     <div class="CodeMirror-gutters" style="height: 475px; left: 0px;"> 
      <div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 31px;"> 
       <br> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
 </div> 
</div> 
<p> <br> </p> 
<p>This is just a quick introduction to json-values. Go to the project page for further details. At this moment, I'm migrating the library to Scala 3 and adding some more documentation.</p> 
<p>Wrapping up:</p> 
<ul style="list-style-type: circle;"> 
 <li>json-values implements an immutable Json with persistent data structures.</li> 
 <li>Specs and generators are composable data structures that are defined just as Jsons.</li> 
 <li>json-values is simple,&nbsp;<span data-preserver-spaces="true">and as Rich Hickey said&nbsp;</span><a href="https://www.youtube.com/watch?v=rI8tNMsozo0" rel="nofollow">simplicity matters</a>.</li> 
 <li>Scala is a great language that makes it possible for developers to write expressive and beautiful code.&nbsp;</li> 
</ul> 
<br> 
<h2>Further Reading</h2> 
<ul> 
 <li><a href="https://dzone.com/articles/immutable-data-structures-in-java-2" rel="nofollow">Immutable Data Structures in Java</a>.</li> 
 <li><a href="https://dzone.com/articles/slott-software-architect-the-data-structures-and-a" rel="nofollow">The Data Structures and Algorithms Learning Problem</a>.</li> 
 <li><a href="https://dzone.com/articles/a-journey-with-scala-1" rel="nofollow">A Journey With Scala</a>.</li> 
</ul></div>
                </div><!-- end ngIf: !edition || (article.rawType != 'refcard' && article.rawType != 'guide') -->

                <!-- ngIf: (article.rawType == 'refcard' || article.rawType == 'guide') && edition -->

                <!-- ngIf: article.readyForAd --><div ng-if="article.readyForAd" class="ng-scope">
                    <!-- ngIf: article.readyForAd --><div class="article-bumper article-bumper-bottom ng-scope ng-isolate-scope" ng-if="article.readyForAd" dc-slot="ads.bt2.slot(article, $index)" tags="ads.bt2.tags(article, $index)" size="ads.bt2.size(article, $index)" id="div-gpt-ad-1435246566686-14" style=""><div id="google_ads_iframe_/2916070/dz2_bumper_text_ad_3__container__" style="border: 0pt none; width: 100%; height: 0%;"></div></div><!-- end ngIf: article.readyForAd -->
                </div><!-- end ngIf: article.readyForAd -->

            <!-- ngIf: article.rawType != 'article' -->

                <!-- ngIf: article.relatedArticles && article.relatedRefcard && !edition --><div ng-if="article.relatedArticles &amp;&amp; article.relatedRefcard &amp;&amp; !edition" class="related ng-scope">
                    <h3>Like This Article? Read More From DZone</h3>
                    <div class="row">
                        <div class="relateddiv col-xs-6 col-md-6">
                            <a href="https://dzone.com/articles/csv-file-writer-using-scala?fromrel=true">
                                <img class="relatedimg col-xs-3 col-md-3 lazyload" dz-image-fid-width="120" dz-image-fid="4102922" data-lazy="true" width="60" data-src="https://dz2cdn3.dzone.com/thumbnail?fid=4102922&amp;w=120&amp;h=1"></a>
                            <a href="https://dzone.com/articles/csv-file-writer-using-scala?fromrel=true" class="col-xs-9 col-md-9 ng-binding">
                                CSV File Writer Using Scala</a>
                        </div>

                        <div class="relateddiv col-xs-6 col-md-6">
                            <a href="https://dzone.com/articles/introduction-to-immutablejs-and-functional-program?fromrel=true">
                                <img class="relatedimg col-xs-3 col-md-3 lazyload" dz-image-fid-width="120" dz-image-fid="1950911" data-lazy="true" width="60" data-src="https://dz2cdn4.dzone.com/thumbnail?fid=1950911&amp;w=120&amp;h=1"></a>
                            <a href="https://dzone.com/articles/introduction-to-immutablejs-and-functional-program?fromrel=true" class="col-xs-9 col-md-9 ng-binding">
                                Introduction to Immutable.js and Functional Programming Concepts</a>

                        </div>
                    </div>

                    <div class="row">
                        <div class="relateddiv col-xs-6 col-md-6">
                            <a href="https://dzone.com/articles/functional-world-an-immutable-novel-comic?fromrel=true">
                                <img class="relatedimg col-xs-3 col-md-3 lazyload" dz-image-fid-width="120" dz-image-fid="6147304" data-lazy="true" width="60" data-src="https://dz2cdn1.dzone.com/thumbnail?fid=6147304&amp;w=120&amp;h=1"></a>
                            <a href="https://dzone.com/articles/functional-world-an-immutable-novel-comic?fromrel=true" class="col-xs-9 col-md-9 ng-binding">
                                Functional World (An Immutable Novel) [Comic]</a>
                        </div>

                        <div class="relateddiv col-xs-6 col-md-6">
                            <a href="https://dzone.com/refcardz/getting-started-with-headless-cms?fromrel=true">
                                <img class="relatedimg col-xs-3 col-md-3 lazyload" dz-image-fid-width="120" dz-image-fid="12672764" data-lazy="true" width="60" data-src="https://dz2cdn1.dzone.com/thumbnail?fid=12672764&amp;w=120&amp;h=1"></a>
                            <a href="https://dzone.com/refcardz/getting-started-with-headless-cms?fromrel=true" class="col-xs-9 col-md-9 ng-binding">
                                <p class="relatedres">Free DZone Refcard</p>
                                Getting Started With Headless CMS</a>
                        </div>
                    </div>
                </div><!-- end ngIf: article.relatedArticles && article.relatedRefcard && !edition -->


            <!-- ngIf: article.rawType != 'article' && article.pdf -->


            <div class="article-topics">
                <div class="topic-label">Topics:</div>
                <div class="topics">
                        <!-- ngRepeat: tag in article.articleTags --><span ng-repeat="tag in article.articleTags" class="topics-tag ng-binding ng-scope">scala<!-- ngIf: !$last --><span ng-if="!$last" class="ng-scope">,</span><!-- end ngIf: !$last --></span><!-- end ngRepeat: tag in article.articleTags --><span ng-repeat="tag in article.articleTags" class="topics-tag ng-binding ng-scope">functional programming<!-- ngIf: !$last --><span ng-if="!$last" class="ng-scope">,</span><!-- end ngIf: !$last --></span><!-- end ngRepeat: tag in article.articleTags --><span ng-repeat="tag in article.articleTags" class="topics-tag ng-binding ng-scope">json<!-- ngIf: !$last --><span ng-if="!$last" class="ng-scope">,</span><!-- end ngIf: !$last --></span><!-- end ngRepeat: tag in article.articleTags --><span ng-repeat="tag in article.articleTags" class="topics-tag ng-binding ng-scope">library<!-- ngIf: !$last --><span ng-if="!$last" class="ng-scope">,</span><!-- end ngIf: !$last --></span><!-- end ngRepeat: tag in article.articleTags --><span ng-repeat="tag in article.articleTags" class="topics-tag ng-binding ng-scope">immutability<!-- ngIf: !$last --><span ng-if="!$last" class="ng-scope">,</span><!-- end ngIf: !$last --></span><!-- end ngRepeat: tag in article.articleTags --><span ng-repeat="tag in article.articleTags" class="topics-tag ng-binding ng-scope">persistent data<!-- ngIf: !$last --></span><!-- end ngRepeat: tag in article.articleTags -->
                </div>
            </div>
            <div class="author-n-useraction">
                <div class="like action">
                    <dz-like template="like-article.html" node="article" class="ng-isolate-scope">
    <div class="dz-like icon-thumbs-up" ng-class="{&#39;icon-thumbs-up-alt liked&#39;: status.liked, &#39;icon-thumbs-up&#39;: !status.liked}" ng-click="like()"><span class="action-label"><span>Like</span><!-- ngIf: status.liked --></span>
        <a href="https://dzone.com/articles/common-fork-join-pool-and-streams#">
            <span class="ng-binding">(3)</span>
        </a>
    </div>
</dz-like>
                </div>

                <div class="comment action">
                    <p ng-show="!article.isLocked" slider-toggle="commentsSlider" slider-data="{parent: article}" activate-with-url-params="{showComments: article.id}" class="ng-isolate-scope">
                        <span><i class="icon-comment" tooltip-html-unsafe=""></i></span>
                        Comment (<span class="comment-after number-of-comments ng-binding" ng-bind="article.nComments">0</span>)
                    </p>
                    <p ng-show="article.isLocked" class="ng-hide">
            <span><i class="icon-icon-comment comment-disabled" tooltip-html-unsafe="Comments have been disabled for this article"></i></span>
                    </p>
                </div>

                <div class="save action">
                    <dz-save template="link-article-save.html" node="article" class="save ng-isolate-scope">
    <div ng-class="{&#39;icon-star gold&#39;: status.saved, &#39;icon-star-empty&#39;: !status.saved}" ng-click="save()" class="save icon-star-empty"><span class="save-title">Save</span><!-- ngIf: status.saved --></div>
</dz-save>
                </div>

                <div class="tweet action"><a ng-href="#" ng-click="shareTwitter($event, article.header.title, article.url)" class="title" target="_blank" href="https://dzone.com/articles/common-fork-join-pool-and-streams#"><span><i class="icon-twitter"></i></span>
                        <span class="action-label">Tweet</span></a>
                </div>

                <div class="pull-right">
                    <div class="article-views action ng-binding"><i class="icon-eye"></i> 7,087

                        <span class="action-label">Views</span></div>

                        <!-- ngIf: !edition && (canEdit(article) || canDelete(article)) -->
                </div>
            </div>
                <div class="attribution">
                    <!-- ngIf: article.source -->
                    <p>Opinions expressed by DZone contributors are their own.</p>
                </div>
            <load-article node="article || article" class="ng-isolate-scope"></load-article>
        </div><!-- end ngIf: article.type != 'loader' --></article>

        <div class="col-md-12 col-sm-12 col-xs-12">
            <th-if-scroll relative-to="bottom" from="-20" to="0" callback="activateB(article)" class="ng-isolate-scope"></th-if-scroll>
        </div>
    </div><!-- end ngIf: article.type != 'loader' -->


        <!-- ngIf: articles[2] && !articles[2].partner.isSponsoringArticle && width < 768 && article.id==articles[1].id -->

        <!-- ngIf: articles[2] && !articles[2].partner.isSponsoringArticle && article.id==articles[1].id -->


</div><!-- end ngIf: $index > 0 || article.id != 1458130 --><!-- end ngRepeat: article in articles -->

<div style="clear: both;"></div>
<!-- ngIf: !isPreview --><th-if-scroll ng-if="!isPreview" relative-to="bottom" from="-50" to="50" callback="loadMore()" class="ng-scope ng-isolate-scope"></th-if-scroll><!-- end ngIf: !isPreview --></div></div></div><div class="container-fluid footerOuter" th-element="footerOuter" th-element-groups="[]" ng-hide="$root.isHidden(&#39;footerOuter&#39;)" data-th-element-name="footerOuter"><div class="row row2" th-element="row2" th-element-groups="[&#39;footerOuter&#39;]" ng-hide="$root.isHidden(&#39;row2&#39;)" data-th-element-name="row2"><div class="col-md-12 container3" th-element="container3" th-element-groups="[&#39;footerOuter&#39;,&#39;row2&#39;]" ng-hide="$root.isHidden(&#39;container3&#39;)" data-th-element-name="container3"><div class="container container3" th-element="container3" th-element-groups="[&#39;footerOuter&#39;,&#39;row2&#39;,&#39;container3&#39;]" ng-hide="$root.isHidden(&#39;container3&#39;)" data-th-element-name="container3"><div class="row footer" th-element="footer" th-element-groups="[&#39;footerOuter&#39;,&#39;row2&#39;,&#39;container3&#39;,&#39;container3&#39;]" ng-hide="$root.isHidden(&#39;footer&#39;)" data-th-element-name="footer"></div></div></div></div></div><div class="sidebar sidebarTapBar oUhbkSMadabbWQbVkcC oUhbkSMadabfWVcC ng-scope" th-element="sidebar" th-element-groups="[]" ng-hide="$root.isHidden(&#39;sidebar&#39;)" data-th-element-name="sidebar" data-th-widget="sidebar.tapBar" data-widget-sidebar-tap-bar="" ng-controller="sidebar" style="top: 2px; padding-top: 0px;"><!-- ngIf: !$root.botInfo.isRenderBot --><div class="content ng-scope" ng-if="!$root.botInfo.isRenderBot" sidebar-list="">
<div class="sidebar.content" th-element="sidebar.content" th-element-groups="[&#39;sidebar&#39;]" ng-hide="$root.isHidden(&#39;sidebar.content&#39;)" data-th-element-name="sidebar.content"><div class="col-md-12 sidebarContentList7 sidebarContentList oUhbkSMaaqbcdvVkcC ng-scope" th-element="sidebarContentList7" th-element-groups="[&#39;sidebar&#39;,&#39;sidebar.content&#39;]" ng-hide="$root.isHidden(&#39;sidebarContentList7&#39;)" data-th-element-name="sidebarContentList7" data-th-widget="sidebar.content.list" data-widget-sidebar-content-list="" ng-controller="sidebarContentList7"><ul class="nodes-list" dnd-list="display">

    <!-- ngIf: edition -->

    <!-- ngRepeat: node in display --><li ng-repeat="node in display" id="1458130--0" class="list-entry ng-scope ng-isolate-scope active" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="1" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/common-fork-join-pool-and-streams" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/common-fork-join-pool-and-streams">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Common Fork Join Pool and Streams</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2939798--1" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node" style="">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="2" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/json-values-and-the-joy-of-scala-i" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/json-values-and-the-joy-of-scala-i">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">JSON Values and the Joy of Scala</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2931762--2" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="3" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/spring-singleton-scope-spring-tutorial" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/spring-singleton-scope-spring-tutorial">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Spring Singleton Scope — A Spring Tutorial</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2947110--3" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="4" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/java-developers-we-want-to-hear-from-you" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/java-developers-we-want-to-hear-from-you">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Java Developers: We Want to Hear From You!</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2768835--4" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="5" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/design-patterns-for-beginners-with-java-examples" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/design-patterns-for-beginners-with-java-examples">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Design Patterns for Beginners With Java Examples</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2931761--5" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="6" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/what-are-spring-bean-scopes-spring-tutorial" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/what-are-spring-bean-scopes-spring-tutorial">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">What Are Spring Bean Scopes?</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2927682--6" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="7" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/java-8-optional-1" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/java-8-optional-1">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Your Guide to Java 8 Optional</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2928925--7" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="8" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/what-is-constructor-auto-wiring-mode-in-spring-spr" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/what-is-constructor-auto-wiring-mode-in-spring-spr">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">What Is Constructor Auto-Wiring Mode in Spring?</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2940419--8" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="9" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/first-class-procedure-type-system-for-composition" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/first-class-procedure-type-system-for-composition">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">First-Class Procedure Type System for Object-Oriented Composition</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2945968--9" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="10" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/recent-valhalla-news-late-january-2020" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/recent-valhalla-news-late-january-2020">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Recent Valhalla News — Late January 2020</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2928924--10" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="11" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/what-will-happen-in-bytype-auto-wiring-mode-multip-1" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/what-will-happen-in-bytype-auto-wiring-mode-multip-1">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Spring byType Autowiring: Dealing With Multiple Beans [Video]</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2926917--11" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="12" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/how-do-i-compare-strings-in-java" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/how-do-i-compare-strings-in-java">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">How Do I Compare Strings in Java?</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2931307--12" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="13" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/java-concurrency-the-basics" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/java-concurrency-the-basics">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Java Concurrency: The Basics</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2941725--13" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="14" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/monad-with-iocc-provides-process-thread-model" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/monad-with-iocc-provides-process-thread-model">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Monad With IoCC Provides Process/Thread Model</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2932055--14" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="15" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/contextual-validation" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/contextual-validation">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Contextual Validation in Java</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2931834--15" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="16" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/testing-spring-boot-asynchronous-application-using" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/testing-spring-boot-asynchronous-application-using">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Testing Spring Boot Apps With Kafka and Awaitility</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2944800--16" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="17" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/working-with-temporary-filesfolders-in-java" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/working-with-temporary-filesfolders-in-java">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Working With Temporary Files/Folders in Java</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2945805--17" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="18" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/this-week-in-spring-releases-podcasts-and-more" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/this-week-in-spring-releases-podcasts-and-more">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">This Week in Spring: Releases, Podcasts, and More</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2930115--18" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="19" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/implementing-dynamic-resource-based-services-with" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/implementing-dynamic-resource-based-services-with">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Implementing Dynamic Resource-Based Services in Java With Ressor</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2939301--19" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="20" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/rise-the-jakarta-ee-ambassadors" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/rise-the-jakarta-ee-ambassadors">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Rise, the Jakarta EE Ambassadors!</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2928823--20" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="21" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/what-is-bytype-auto-wiring-mode-in-spring" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/what-is-bytype-auto-wiring-mode-in-spring">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">What Is byType Autowiring Mode in Spring?</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2932895--21" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="22" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/java-predefined-map-keys" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/java-predefined-map-keys">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Java: Create a Map With Predefined Keys</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2929901--22" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="23" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/modifying-variable-inside-lambda" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/modifying-variable-inside-lambda">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Modifying Variables Inside Lambdas</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2939167--23" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="24" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/spring-webclient-and-java-date-time-fields" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/spring-webclient-and-java-date-time-fields">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Spring WebClient and Java Date-Time Fields</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2939178--24" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="25" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/how-to-make-your-own-hamcrest-matchers-in-kotlin" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/how-to-make-your-own-hamcrest-matchers-in-kotlin">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">How to Make Your Own Hamcrest Matchers in Kotlin</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2924017--25" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="26" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/spring-auto-wiring-introduction-spring-tutorial" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/spring-auto-wiring-introduction-spring-tutorial">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Introduction to Spring Auto-Wiring [Video]</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2939084--26" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="27" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/magic-around-spring-boot-auto-configuration" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/magic-around-spring-boot-auto-configuration">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Magic Around Spring Boot Auto-Configuration</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2941017--27" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="28" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/hero-without-a-cape-java8-feature" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/hero-without-a-cape-java8-feature">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Hero Without a Cape: Stream API</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2927122--28" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="29" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/rejection-in-the-akka-http-lets-handle-errors-scen" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/rejection-in-the-akka-http-lets-handle-errors-scen">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Rejection in Akka HTTP: Handle Errors Properly</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2940788--29" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="30" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/spring-dependency-checking-with-required-annotatio-1" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/spring-dependency-checking-with-required-annotatio-1">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Spring Dependency Checking With @Required Annotation [Video]</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2939785--30" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="31" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/how-to-write-thread-safe-yet-scalable-classes" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/how-to-write-thread-safe-yet-scalable-classes">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">How to Write Thread-Safe-Yet-Scalable Classes</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="1203601--31" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="32" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/how-springboot-autoconfiguration-magic-works" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/how-springboot-autoconfiguration-magic-works">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">How Spring Boot Auto-Configuration Works</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2938767--32" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="33" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/a-bootiful-podcast-spring-cloud-services-bella-yux" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/a-bootiful-podcast-spring-cloud-services-bella-yux">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">A Bootiful Podcast: Spring Cloud Services' Bella (Yuxin) Bai</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2919123--33" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="34" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/easy-mapping-json-to-java-objects-usingnbspjackson" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/easy-mapping-json-to-java-objects-usingnbspjackson">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Easy Mapping JSON to Java Objects Using Jackson</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2927130--34" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="35" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/beginners-guide-for-mocking-in-scala" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/beginners-guide-for-mocking-in-scala">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Beginners Guide to Mocking in Scala</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="1948144--35" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="36" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/introducing-picocog-a-lightweight-code-generation" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/introducing-picocog-a-lightweight-code-generation">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Introducing Picocog: A Lightweight Code Generation Library</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2790735--36" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="37" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/environments-maven-plugin" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/environments-maven-plugin">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Managing Environments and Plugins in Maven</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2783592--37" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="38" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/doubly-linked-list-in-java" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/doubly-linked-list-in-java">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Doubly Linked List in Java</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2790033--38" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="39" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/the-priority-queue" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/the-priority-queue">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">An Overview of the Priority Queue</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2933974--39" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="40" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/rxjava-to-coroutines-end-to-end-feature-migration" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/rxjava-to-coroutines-end-to-end-feature-migration">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">RxJava to Kotlin Coroutines: End-to-End Feature Migration</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2930541--40" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="41" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/analyzing-tcp-socket-with-java-flight-recorder" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/analyzing-tcp-socket-with-java-flight-recorder">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Digging Into Sockets With Java Flight Recorder</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2935801--41" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="42" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/a-look-at-the-scala-main-class" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/a-look-at-the-scala-main-class">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">A Look at the Scala Main Class</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2849451--42" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="43" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/java-concurrency-atomicreference" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/java-concurrency-atomicreference">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Java Concurrency: AtomicReference</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2935716--43" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="44" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/this-week-in-spring-releases-books-webinars-and-mo" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/this-week-in-spring-releases-books-webinars-and-mo">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">This Week in Spring: Releases, Books, Webinars, and More</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2928063--44" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="45" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/tutorial-deploy-a-spring-boot-application-to-the-c" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/tutorial-deploy-a-spring-boot-application-to-the-c">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Tutorial: Deploy a Spring Boot Application to the Cloud</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2918916--45" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="46" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/listening-to-fileevents-with-java-nio" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/listening-to-fileevents-with-java-nio">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Watching Files With Java NIO</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2909097--46" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="47" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/the-mystery-of-traits-in-scala" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/the-mystery-of-traits-in-scala">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">The Mystery of Traits in Scala</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2907341--47" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="48" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/how-does-singleton-bean-serve-multiple-requests-at" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/how-does-singleton-bean-serve-multiple-requests-at">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Spring: Serving Multiple Requests With the Singleton Bean</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2917725--48" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="49" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/java-based-simple-cache-lru-eviction" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/java-based-simple-cache-lru-eviction">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Cache in Java With LRU Eviction Policy</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2933867--49" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="50" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/top-10-essential-eclipse-plugins-for-java-develope" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/top-10-essential-eclipse-plugins-for-java-develope">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Top 10 Essential Eclipse Plugins for Java Developers</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2931496--50" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="51" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/groovy-goodness-transform-elements-while-flattenin" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/groovy-goodness-transform-elements-while-flattenin">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Groovy Goodness: Transform Elements While Flattening [Snippet]</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2784208--51" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="52" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/how-to-transform-any-type-of-java-bean-with-one-li" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/how-to-transform-any-type-of-java-bean-with-one-li">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">How to Transform Any Type of Java Bean With BULL</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2928822--52" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="53" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/what-is-byname-auto-wiring-mode-in-spring" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/what-is-byname-auto-wiring-mode-in-spring">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">What Is the byName Auto-Wiring Mode in Spring? [Video]</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2926801--53" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="54" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/scala-at-light-speed-part-5-advanced" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/scala-at-light-speed-part-5-advanced">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Scala at Light Speed, Part 5: Advanced</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2923342--54" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="55" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/scala-at-light-speed-part-1-the-essentials" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/scala-at-light-speed-part-1-the-essentials">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Scala at Light Speed, Part 1: The Essentials</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2923385--55" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="56" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/scala-at-light-speed-part-2-object-orientation" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/scala-at-light-speed-part-2-object-orientation">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Scala at Light Speed, Part 2: Object Orientation</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2928059--56" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="57" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/build-a-simple-netty-application-with-and-without" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/build-a-simple-netty-application-with-and-without">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Build a Simple Netty Application With and Without Spring</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2891842--57" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="58" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/simple-http-server-in-java" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/simple-http-server-in-java">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">A Simple HTTP Server in Java</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2930660--58" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="59" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/spring-batch-multi-threaded-steps" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/spring-batch-multi-threaded-steps">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Spring Batch: Multi-Threaded Steps</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2930424--59" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="60" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/staring-into-my-java-crystal-ball-2020" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/staring-into-my-java-crystal-ball-2020">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">Staring Into My Java Crystal Ball 2020</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display --><li ng-repeat="node in display" id="2926033--60" class="list-entry ng-scope ng-isolate-scope" ng-class="{active: isActive(node)}" sidebar-item="node">
            <!-- ngIf: node.type != 'article' && node.type != 'ad' -->
        <div class="sidebar-content ">
            <!-- ngIf: node.type != 'ad' --><a ng-class="{badge1: edition}" data-badge="61" ng-if="node.type != &#39;ad&#39;" ng-href="/articles/drafta-non-blocking-state-machine" ng-click="tap()" sidebar-click="node" class="ng-scope ng-isolate-scope" href="https://dzone.com/articles/drafta-non-blocking-state-machine">
                <!-- ngIf: edition -->
                <div ng-class="{&#39;sidebar-node-title&#39; : edition}">
                    <!-- ngIf: node.type == 'whitepaper' || node.type == 'refcard' || node.type == 'guide' -->
                    <p class="ng-binding">A Non-Blocking State Machine</p>
                </div>
            </a><!-- end ngIf: node.type != 'ad' -->
        </div>
    </li><!-- end ngRepeat: node in display -->
    <th-if-scroll relative-to="bottom" from="-100" to="50" callback="loadMore()" class="ng-isolate-scope"></th-if-scroll>
    <th-loader flag="loading()" class="ng-isolate-scope"><div ng-show="flag" class="loading-indicator ng-hide" style=""><i class="icon-spin6 animate-spin"></i></div></th-loader></ul>
</div></div></div><!-- end ngIf: !$root.botInfo.isRenderBot -->
<!-- ngIf: !$root.botInfo.isRenderBot --><span class="tap ng-scope" ng-class="{tapEdition: edition}" ng-click="tap()" ng-if="!$root.botInfo.isRenderBot">
    <i class="icon-angle-double-left left"></i>
    <i class="icon-angle-double-right right"></i>
</span><!-- end ngIf: !$root.botInfo.isRenderBot -->
</div><div class="componentsSlider5 componentsSlider oUhballbvbdSaoUhM ng-scope" th-element="componentsSlider5" th-element-groups="[]" ng-hide="$root.isHidden(&#39;componentsSlider5&#39;)" data-th-element-name="componentsSlider5" data-th-widget="components.slider" data-widget-components-slider="" ng-controller="componentsSlider5"><!-- ngIf: _ready -->

<div class="slider-outer-wrapper" ng-class="{open: _sliderOpen}">

    <!-- ngIf: _ready -->
</div>

</div>

    <div class="row">
        <a href="https://dzone.com/articles/common-fork-join-pool-and-streams#" class="back-to-top" style="display: none;"><i class="icon-up-big"></i></a>
    </div>


    <script type="text/ng-template" id="/themes/dz20/widgets/header/sections/widget.html">
<span dropdown is-open="dropdown.open" ng-class="{small: width < 768}">
    <span dropdown-toggle class="sections"><i class="icon-menu"></i>
        <span class="menuLabel" ng-if="width < 768"></span></span>
    <ul class="dropdown-menu ul-first" ng-style="width < 768 ? {'top': headerSize + 0 + 'px', 'padding-top': '15px'} : {}">
        <li><a href="/links">Links</a></li>
        <li><a href="/refcardz">Refcardz</a></li>
        <li><a href="/guides">Guides</a></li>
        <li><a href="/about">About Us</a></li>
        <li class="divider"></li>

        <li class="post-title"><span>Zones</span></li>
        <li ng-repeat="topic in portals" class="dropdown">
            <a ng-href="{{ topic.url }}">{{ topic.name }}</a>
        </li>
        <li class="divider"></li>
        <li class="post-title"><span>Post</span></li>
        <li><a href="/links">Link</a></li>
        <li><a href="/article/post.html">Article</a></li>
    </ul>
</span>


    </script>

<script type="text/ng-template" id="followus.html">
<div class="top-social">
    <p>Let's be friends:</p>
    <ul class="icons-only" ng-class="{open: isOpen}" click-outside="outside()">
        <li class="rss-icon" id="rss-spotlight-1">
            <a href="/pages/feeds"><i class="icon-rss-1"></i></a>
        </li>
        <li class="twitter-icon">
            <a href="https://twitter.com/DZoneInc" target="_blank"><i class="icon-twitter"></i></a>
        </li>
        <li class="facebook-icon">
            <a href="https://www.facebook.com/DZoneInc" target="_blank"><i class="icon-facebook-1"></i></a>
        </li>
        <li class="google-icon">
            <a href="https://plus.google.com/+dzone/posts" target="_blank"><i class="icon-gplus"></i></a>
        </li>
        <li class="linkedin-icon">
            <a href="https://www.linkedin.com/company/devada-team" target="_blank"><i class="icon-linkedin-1"></i></a>
        </li>

            <ul class="social-dropdown dropdown-menu">
                <li class="rss" id="rss-spotlight"><a href="/pages/feeds"><i class="icon-rss-squared"></i> <span>RSS Feed</span></a></li>
                <li class="twitter" id="twitter-spotlight">
                    <a href="https://twitter.com/DZoneInc" class="twitter-follow-button" data-show-count="true"
                       data-show-screen-name="false">Follow @DZoneInc</a>
                </li>
                <li class="fb-like" id="fb-spotlight" data-href="https://www.facebook.com/DZoneInc"
                    data-layout="button_count" data-action="like" data-show-faces="true" data-share="false"></li>
                <li class="google-plus" id="gplus-spotlight">
                    <div class="g-follow" data-annotation="bubble" data-height="20"
                         data-href="https://plus.google.com/108688665090780146602" data-rel="publisher"></div>
                </li>
                <li class="linkedin" id="linkedin-spotlight">
                    <script type="IN/FollowCompany" data-id="114427" data-counter="right"></script>
                
            
    

<script type="text/ng-template" id="dzlike.html">
<div class="dz-like " ng-class="{liked: status.liked}" ng-click="like()">
    <a href="#">
        <i class="icon-up-dir"></i>
        <span>{{ status.score }}</span>
    </a>
</div>
</script><script type="text/ng-template" id="dztopicselect.html"><ui-select  ng-if="canAddTopics" ng-model="editing.topics" theme="bootstrap" multiple tagging tagging-label="(add topic)"
           tagging-tokens=",">
    <ui-select-match class="input-tags"><div class="topics-tag">{{ $item }}</div></ui-select-match>
    <ui-select-choices
            refresh="topicsRefresh($select.search)"
            refresh-delay="250"
            repeat="topic in foundTopics | filter: $select.search">
        <div ng-bind-html="topic | highlight: $select.search"></div>
    </ui-select-choices>
</ui-select>
<ui-select ng-if="!canAddTopics" ng-model="editing.topics" theme="bootstrap" multiple>
    <ui-select-match><div class="topics-tag">{{ $item }}</div></ui-select-match>
    <ui-select-choices
            refresh="topicsRefresh($select.search)"
            refresh-delay="250"
            repeat="topic in foundTopics | filter: $select.search">
        <div ng-bind-html="topic | highlight: $select.search"></div>
    </ui-select-choices>
</ui-select></script><script type="text/ng-template" id="dzsave.html"><i class="icon-star-empty" ng-class="{'icon-star gold': status.saved, 'icon-star-empty': !status.saved}" tooltip-html-unsafe="{{status.saved ? 'Saved' : 'Save'}}" ng-click="save()"></i>
<!--<span ng-class="{'gold count': status.saved}">{{ status.count }}</span>--></script><script type="text/ng-template" id="overlay.html"><div class="ngdialog th-overlay">
    <div class="ngdialog-overlay">
        <div class="overlay-box">
            <i class="icon-spin5 animate-spin"></i>

            <p>{{ message }}</p>
        </div>
    </div>
</div></script><script type="text/ng-template" id="inline-editable.html"><div class="inline-editable" ng-if="!status.editing" ng-click="edit()" ng-transclude></div>
<div class="inline-editor-wrapper" ng-if="status.editing">
    <textarea class="inline-editor" ng-model="status.editValue" ng-if="type == 'textarea'"></textarea>
    <input class="inline-editor" ng-model="status.editValue" ng-if="type == 'input'"></textarea>
    <div class="inline-editor-tools">
        <button class="btn select-ok" ng-disabled="!status.editValue" ng-click="save()"><i class="icon-check-1"></i></button>
        <button class="btn select-cancel" ng-disabled="!editable" ng-click="cancel()"><i class="icon-cancel-1"></i></button>
    </div>
</div></script><script type="text/ng-template" id="dzupload.html"><span class="btn btn-upload" >
    <div ng-bind-html="label"></div>
    <div class="progress-container" ng-style="{visibility: uploading ? 'visible' : 'hidden'}">
        <progressbar max="100" value="progress"><span>{{ progress }}</span></progressbar>
    </div>
    <input type="file" ng-file-drop ng-file-select ng-file-change="upload($files)" />
</span></script><script type="text/ng-template" id="dzfollow.html"><button class="btn btn-follow" ng-class="{'btn-success': !status.followed, 'btn-warning': status.followed, 'hidden': followed.id == $root.user.id}" ng-click="follow()"><span ng-if="!status.followed"><i class="icon-plus"></i> Follow</span><span ng-if="status.followed" class="following">Following</span><span ng-if="status.followed" class="hover">Unfollow</span></button></script><script type="text/ng-template" id="dzphoto.html"><i class="icon-camera-alt photo" type="file" ng-file-drop ng-file-select ng-file-change="upload($files)"></i></script><script type="text/ng-template" id="dialog.confirm.html"><p>{{ message }}</p></script><script type="text/ng-template" id="dialog.skeleton.html"><div class="dialog-title">
    <h1 ng-if="$dialog.title">{{ $dialog.title }}</h1>
</div>
<div class="dialog-body {{ $dialog.extraClass }}" ng-include="$dialog.template"></div>
<div class="dialog-footer">
    <div class="dialog-buttons" ng-if="$dialog.buttons">
        <button ng-repeat="button in $dialog.buttons" ng-hide="button.hidden" ng-disabled="button.disabled || $dialog.executing"
                class="btn btn-{{ button.type || 'info' }}" ng-click="$dialog.runAction(button)">
            <span class="icon-spin6 animate-spin" ng-if="button.executing"></span>{{ button.label || button.name }}</button>
    </div>
</div></script><script type="text/ng-template" id="dialog.message.html"><div class="message-icon">
    <i class="icon-{{ icon }}"></i>
</div>
<div class="message-text">
    <p class="message-title" ng-bind-html="trustAsHtml(title)"></p>
    <p ng-bind-html="trustAsHtml(message)"></p>
</div>
</script>
<script type="text/javascript">

    var TH_CORE_VARS = {};

    try {
        TH_CORE_VARS.additional = {};

        TH_CORE_VARS.additional.matchedUrl = {"name":"dzone:articles:view","mapping":"/articles/**","mappingPatterns":{}};
        TH_CORE_VARS.additional.request = [{"site":{"keywords":"programming, software development, devops, java, agile, web, iot, database, mobile, big data, cloud","name":"DZone.com","description":"Programming, Web Development, and DevOps news, tutorials and tools for beginners to experts. Hundreds of free publications, over 1M members, totally free.","id":7,"title":"DZone: Programming & DevOps news, tutorials & tools"},"dev":false,"context":"","theme":"dz20","cdn":["dz2cdn1.dzone.com","dz2cdn2.dzone.com","dz2cdn3.dzone.com","dz2cdn4.dzone.com"],"user":{"realName":null,"authenticated":false,"profile":"/users/2500002/anon-user.html","name":"Anonymous","GDPRStatus":null,"id":2500002,"avatar":"https://secure.gravatar.com/avatar/?d=identicon&r=PG"}}];
        TH_CORE_VARS.additional.loadedScripts = [["/lib/jquery/jquery.js","/lib/lodash/lodash.js","/lib/moment/moment.js","/scripts/utils.js","/lib/angular/angular.js","/lib/angular/angular-sanitize.js","/lib/local-storage/angular-local-storage.js","/lib/bootstrap/dropdown.js","/lib/angular-ui/bootstrap.js","/lib/angular-ui/select.js","/lib/bootstrap-switch/bootstrap-switch.js","/lib/ngDialog/js/ngDialog.js","/lib/angular-moment/angular-moment.js","/scripts/app.js","/scripts/socket.js","/scripts/services.js","/scripts/ui-services.js","/scripts/directives.js","/scripts/filters.js","/lib/angular/angular-cookies.js","/lib/angulartics/angulartics.js","/lib/angulartics/angulartics-ga.js","/lib/angular-touch/angular-touch.min.js","/lib/dataTables/datatables.min.js","/lib/elastic/elastic.js","/lib/ng-file-upload/angular-file-upload-all.js","/scripts/dzone.js","/scripts/ads.js","/scripts/social-media.js","/scripts/head.js","/scripts/links.js","/scripts/utilities/directives.js","/scripts/utilities/services.js","/scripts/utilities/editor.js","/lib/bootstrap-slider/bootstrap-slider.js","/lib/bootstrap-slider/directive.js","/lib/sb/sb.js","/lib/angular-animate.min.js","/lib/angular-sanitize.min.js","/lib/ngToast.min.js","/lib/lazysizes.min.js","/lib/angular-draganddrop/draganddrop.js","/widgets/article/content/utils.js","/widgets/components/slider/service.js","/widgets/header/headerV2/resize.js","/widgets/sidebar/content/list/service.js","/widgets/sidebar/tapBar/directive.js","/widgets/sidebar/tapBar/service.js"]];
        TH_CORE_VARS.additional.botInfo = [{"isRenderBot":false}];
        TH_CORE_VARS.additional.portals = [[{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"agile","color":"red","name":"Agile","topic":8,"id":2,"shortTitle":"agile-methodology-training-tools-news","url":"/agile-methodology-training-tools-news"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"ai","color":"purple","name":"AI","topic":2551,"id":4001,"shortTitle":"artificial-intelligence-tutorials-tools-news","url":"/artificial-intelligence-tutorials-tools-news"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"big-data","color":"green","name":"Big Data","topic":6129,"id":3,"shortTitle":"big-data-analytics-tutorials-tools-news","url":"/big-data-analytics-tutorials-tools-news"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"cloud","color":"orange","name":"Cloud","topic":30,"id":4,"shortTitle":"cloud-computing-tutorials-tools-news","url":"/cloud-computing-tutorials-tools-news"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"database","color":"purple","name":"Database","topic":59,"id":5,"shortTitle":"database-sql-nosql-tutorials-tools-news","url":"/database-sql-nosql-tutorials-tools-news"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"devops","color":"yellow","name":"DevOps","topic":31,"id":6,"shortTitle":"devops-tutorials-tools-news","url":"/devops-tutorials-tools-news"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"integration","color":"green","name":"Integration","topic":1138,"id":7,"shortTitle":"enterprise-integration-training-tools-news","url":"/enterprise-integration-training-tools-news"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"iot","color":"orange","name":"IoT","topic":48,"id":8,"shortTitle":"iot-developer-tutorials-tools-news-reviews","url":"/iot-developer-tutorials-tools-news-reviews"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"java","color":"purple","name":"Java","topic":1,"id":1,"shortTitle":"java-jdk-development-tutorials-tools-news","url":"/java-jdk-development-tutorials-tools-news"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"microservices","color":"green","name":"Microservices","topic":13268,"id":6001,"shortTitle":"microservices-news-tutorials-tools","url":"/microservices-news-tutorials-tools"},{"hideFromHomepageWidgets":true,"hideFromNav":true,"code":"mobile","color":"yellow","name":"Mobile","topic":29,"id":9,"shortTitle":"mobile-app-developer-tutorials-tools-news","url":"/mobile-app-developer-tutorials-tools-news"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"open-source","color":"purple","name":"Open Source","topic":75,"id":7001,"shortTitle":"open-source-news-tutorials-tools","url":"/open-source-news-tutorials-tools"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"performance","color":"red","name":"Performance","topic":653,"id":10,"shortTitle":"apm-tools-performance-monitoring-optimization","url":"/apm-tools-performance-monitoring-optimization"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"security","color":"green","name":"Security","topic":85,"id":2001,"shortTitle":"application-web-network-security","url":"/application-web-network-security"},{"hideFromHomepageWidgets":false,"hideFromNav":false,"code":"webdev","color":"orange","name":"Web Dev","topic":35,"id":11,"shortTitle":"web-development-programming-tutorials-tools-news","url":"/web-development-programming-tutorials-tools-news"},{"hideFromHomepageWidgets":true,"hideFromNav":true,"code":"inspiration-station ","color":"purple","name":"Writers'","topic":16873,"id":3001,"shortTitle":"writers-zone","url":"/writers-zone"}]];
        TH_CORE_VARS.additional.loadedStyles = [["/lib/bootstrap/bootstrap.less","/lib/fontello/css/fontello.css","/lib/fontello/css/animation.css","/lib/angular-ui/select.css","/lib/ngDialog/css/ngDialog.css","/less/ngDialog-theme.less","/less/container.less","/lib/bootstrap-switch/bootstrap-switch.css","/lib/dataTables/datatables.min.css","/less/dzone20.less","/less/fonts.less","/less/directives.less","/lib/sb/sb.css","/lib/bootstrap-slider/bootstrap-slider.css","/lib/codemirror/lib/codemirror.css","/less/ngToast.min.css","/less/ngToast-animations.min.css","/less/layout.less","/widgets/announcementBar/widget.less","/widgets/article/content/article-content.less","/widgets/components/slider/widget.less","/widgets/content/commentsSlider/widget.less","/widgets/header/headerV2/widget.less","/widgets/sidebar/content/list/list.less","/widgets/sidebar/tapBar/sidebar-list.less","/widgets/sidebar/tapBar/widget.less"]];
        TH_CORE_VARS.additional.model = [{"metaData":{"title":"Common Fork Join Pool and Streams - DZone Java","description":"Parallel streams are a boon to concurrency, and Common Fork Join Pools are an important part of that interaction. This overview should shed some light on how they work.","keywords":"programming, software development, devops, java, agile, web, iot, database, mobile, big data, cloud,java,java 8 streams,fork join,tutorial,parallel streams,article","siteName":"dzone.com","url":"https://dzone.com","img":"https://dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg","imgprop":"og:image","twitterImage":"https://dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg","type":"article","wordCount":953,"canonical":"https://dzone.com/articles/common-fork-join-pool-and-streams","noIndex":false,"noFollow":false,"prevPage":null,"nextPage":null,"pubDate":"2017-02-06","id":1458130,"author":"Dan Newton","section":"Java","useEscapedFragment":false,"robots":false,"robotsTag":""},"lastAuthor":{"id":2947070,"username":"Lanky Dan","realname":"Dan Newton","type":"user","plug":"lanky-dan","gold":0,"silver":0,"bronze":0,"reputation":1880,"moderator":false,"superuser":false,"emailHash":"b5024a6405bf07e14dacc299779fc0abded33b42a05190784776429e2c76435f","avatar":"https://dzone.com/users/2947070/photo/view.html","website":"https://lankydan.dev"},"articleType":"article/tutorial","claimed":{"id":2687707,"username":"Michael_Tharrington","realname":"Michael Tharrington","type":"user","plug":"michael-tharrington","gold":0,"silver":2,"bronze":5,"reputation":6484,"moderator":false,"superuser":false,"emailHash":"69c150c46cbfcead15192bed9d961ff6604824ed8c2ed30b774da6dfa8dcd390","avatar":"https://dzone.com/users/2687707/photo/view.html","website":"https://dzone.com/users/2687707/michael-tharrington.html"},"publisher":"dzone-mikeg","enableThreadedComments":true,"portal":{"id":1,"code":"java","title":"Java","shortTitle":"java-jdk-development-tutorials-tools-news","blurb":"Java programming news and training resources from DZone, the trusted source for learning advanced software design, web development and devops best practices."},"contentType":"article","content":{"id":"1458130","type":"article","plug":"common-fork-join-pool-and-streams","creationDate":"2017-02-06 08:01:00.0"}}];
        TH_CORE_VARS.additional.requiresModule = ["dndLists","generalDirectives","monospaced.elastic","angularFileUpload","ui.bootstrap-slider","angulartics","angulartics.google.analytics","ngCookies","ngSanitize","ui.select","ui.bootstrap","angularMoment","ngTouch","ngDialog","LocalStorageModule"];
        TH_CORE_VARS.additional.TH_CSRF = "8004612851847298967";
            } catch (e) {
        console.error(e);
    }
</script>
<script type="text/javascript">
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        var gads = document.createElement('script');
        gads.async = true;
        gads.type = 'text/javascript';
        var useSSL = 'https:' == document.location.protocol;
        gads.src = (useSSL ? 'https:' : 'http:') +
                '//www.googletagservices.com/tag/js/gpt.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(gads, node);
    })();
</script>

<script type="text/javascript" src="./Common Fork Join Pool and Streams - DZone Java_files/combined.js" charset="utf-8"></script><script type="text/javascript" src="./Common Fork Join Pool and Streams - DZone Java_files/combined(2).js" charset="utf-8"></script><script>
    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r;
        i[r] = i[r] || function () {
                    (i[r].q = i[r].q || []).push(arguments)
                }, i[r].l = 1 * new Date();
        a = s.createElement(o),
                m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-410289-1', 'auto');
    ga('require', 'linkid', 'linkid.js');
    ga('require', 'GTM-TSD9TZP');
    ga('set', 'siteSpeedSampleRate', 25);
</script>

<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
        'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-K25QL22');</script>
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-K25QL22"
                  height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager -->

    <script>
adtoniq=function(){var H="";var ac=document.createElement("a");ac.href=window.location.href;var w="";var h=w;var u="ontouchstart" in window||navigator.msMaxTouchPoints;var L="https://p.tinynewsfeed.com";var c="https://p.tinynewsfeed.com/";var N="https:///";var ae="";var F="0";var x="live";var af="${highlight}";var Y="${maxAdUnits}";var y=[];var v=[];var W="${stripeSplit}";var ad="${waisaDisable}";var R="${ad_template}";var ab=[];var e=null;var p=null;var G;var U=false;var a=false;var aj=false;var E=false;var Q=false;var f=false;var o=false;var C=false;var I="";var D=0;var n=false;var Z=0;var M=Math.floor(Math.random()*10000000);var T=0;var aa=[];var ah=[];var r=[];var P=[];var an=[];var m=[];var am=null;var ak=j("adtoniq_choice");var S=null;var ag=false;var K=0;var t=true;function A(at){if(document.getElementsByClassName){return document.getElementsByClassName(at)}var l=[];var ar=new RegExp("(^| )"+at+"( |$)");var aq=document.getElementsByTagName("*");for(var ap=0,ao=aq.length;ap<ao;ap++){if(ar.test(aq[ap].className)){l.push(aq[ap])}}return l}function k(l){B(l,"")}function B(ap,ao){var aq=A(ap);if(aq){for(var l=0;l<aq.length;l++){aq[l].style.display=ao}}}function z(){B("adtoniq_adblocked","none");B("adtoniq_acceptable","none");B("adtoniq_blocked_analytics","none");k("adtoniq_nonblocked");k("adtoniq_protect")}function b(){var ao=ah.length;for(var l=0;l<ao;l++){ah[l]()}k("adtoniq_nonblocked");k("adtoniq_protect")}function q(){k("adtoniq_adblocked");if(E){k("adtoniq_acceptable")}else{k("adtoniq_adblocked_no_acceptable")}}var O=false,al=false;var g=false;function ai(){if(!g&&(aj||a)){if(ak!="track"){q()}else{b()}function ao(){g=true;var at=r.length;for(var ar=0;ar<at;ar++){r[ar](ak,N)}}if(document.readyState==="loading"){window.addEventListener("DOMContentLoaded",function(){ao()})}else{ao()}}function l(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}if(O&&al){if(aj||a){}else{b()}var aq=aa.length;for(var ap=0;ap<aq;ap++){aa[ap](aj,a,E,o)}}}function j(l){var ao="; "+document.cookie;var ap=ao.split("; "+l+"=");if(ap.length==2){return ap.pop().split(";").shift()}}function s(ap,aq,ar){var l="";if(ar){var ao=new Date();ao.setTime(ao.getTime()+(ar*24*60*60*1000));l="; expires="+ao.toUTCString()}document.cookie=ap+"="+aq+l+"; path=/"}function J(){O=true;ai()}function V(){al=true;ai()}function X(ao,l){if(!l){l=window.location.href}ao=ao.replace(/[\[\]]/g,"\\$&");var aq=new RegExp("[?&]"+ao+"(=([^&#]*)|&|#|$)"),ap=aq.exec(l);if(!ap){return null}if(!ap[2]){return""}return decodeURIComponent(ap[2].replace(/\+/g," "))}return{setup:function(){isSetPreviewCookie=X("atdoniq-preview");if(isSetPreviewCookie=="1"){s("adt_mc",1,0)}if(x=="master-preview"){var l=j("adt_mc");ag=(l!="1")}if(!ag){adtoniq.setup2()}},addBobber:function(l){aa.push(l)},addAdBlockerCallback:function(l){aa.push(l)},setAdUnitLocator:function(l){am=l},onBlocked:function(l){if(g){if(aj||a){if(ak!="track"){q();l(ak,true)}}}else{r.push(l)}},onAnalyticsBlocked:function(l){P.push(l)},setGA:function(ao,ap,l){I=ao;D=ap;n=l},setIntegration:function(ao,l){L=ao},setProxy:function(l){N=l},getProxy:function(){return N},setCollector:function(l){c=l},setId:function(l){F=l},optOut:function(ao){ak="do-not-track";s("adtoniq_choice",ak,365);for(var l=0;l<m.length;l++){m[l]()}},optIn:function(ao){ak="track";s("adtoniq_choice","track",365);z();for(var l=0;l<an.length;l++){an[l]()}},onOptIn:function(l){an.push(l)},onOptOut:function(l){an.push(l)},setEnableAdtoniq:function(l){e=l},setShouldShowAds:function(l){p=l},addNoAdBlockerCallback:function(l){ah.push(l)},laybait:function(){function l(){var ao=new Image();ao.onload=function(){aj=false;V()};ao.onerror=function(){aj=true;V()};ao.src="https://static-42andpark-com.s3-us-west-2.amazonaws.com/ads/ad-300x250.png"}l();document.addEventListener("DOMContentLoaded",function(ar){var aq=document.createElement("iframe");aq.src="";aq.setAttribute("style","position:absolute;left:-10px;width:1px;height:1px;");document.body.appendChild(aq);var ap=null;function at(){var ay="pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links";var ax="width: 1px !important; height: 1px !important; position: absolute !important; left: -10000px !important; top: -1000px !important;";ap=document.createElement("div");ap.id="zippity";ap.setAttribute("class",ay);ap.setAttribute("style",ax);document.body.appendChild(ap)}function aw(){var ay=window.document.body.getAttribute("abp")!==null||ap.offsetParent===null||ap.offsetHeight==0||ap.offsetWidth==0||ap.offsetLeft==0||ap.offsetTop==0||ap.clientHeight==0||ap.clientWidth==0;if(window.getComputedStyle!==undefined&&!ay){var ax=window.getComputedStyle(ap,null);ay=ax.getPropertyValue("display")=="none"||ax.getPropertyValue("visibility")=="hidden"}if(ay){a=true}return ay}at();var av=new Date();var au=null;var ao=setInterval(function(){if(aw()){if(au){clearTimeout(au)}try{document.body.removeChild(ap)}catch(ax){}clearInterval(ao);J()}},100);au=setTimeout(function(){clearInterval(ao);try{document.body.removeChild(ap)}catch(ax){}J()},1*1000)})},setup2:function(){if(typeof h==="undefined"){return}if(ak=="track"){k("adtoniq_nonblocked")}adtoniq.onBlocked(function(ao,ap){if(e&&!e()){return}function l(){adtoniq.inflateAdUnit()}if(ao!="track"){adtoniq.onOptIn(l)}else{l()}});adtoniq.laybait()},waisaChoice:function(ar){var l=!!window.adtoniqAlertData?window.adtoniqAlertData:null;if(!document.getElementById("adtoniq-msgr-bar")){var ao=document.createElement("div");ao.id="adtoniq-msgr-bar";ao.classList.add("adtoniq-waisa");ao.innerHTML=l.waisaContent;var at=document.createElement("div");at.id="adtoniq-msg-buttons";at.classList.add("adtoniq-waisa");var aq=document.createElement("button");aq.innerHTML="Clear my choice";at.appendChild(aq);aq.onclick=function(au){document.cookie="adtoniq_choice=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";location.reload()};var ap=document.createElement("button");ap.innerHTML="Close";at.appendChild(ap);ap.onclick=function(au){ao.parentNode.removeChild(ao)};ao.appendChild(at);document.body.appendChild(ao);ao.classList.add("reveal-alert")}ar.preventDefault();return false},inflateAdUnit:function(){if(x=="master-preview"){var aN=j("adt_mc");if(aN!="1"){return}}if(!(isSetPreviewCookie=="1")&&W!=="${stripeSplit}"&&W.length>0){if(Math.floor(Math.random()*parseInt(W))!=0){return}}function aP(aW){if(ad!=="on"){var aV=document.createElement("img");aV.src="//d2t7a3zbo166a9.cloudfront.net/images/logos/A-15x15.png";aV.style.setProperty("float","right");var aX=document.createElement("span");aX.innerText="Why am I seeing this ad?";aX.style.display="none";aX.style.fontSize="10px";aX.style.paddingRight="10px";aX.style.verticalAlign="top";aX.style.right="-20px";aX.style.top="-20px";aX.style.position="absolute";aX.style.width="160px";aX.style.color="rgb(0, 0, 0)";var aU=document.createElement("a");aU.href="#";aU.appendChild(aV);aU.appendChild(aX);aU.style.position="relative";aU.style.display="block";aU.style.zIndex="9";aU.style.setProperty("float","right");aU.style.height="20px";aU.style.boxShadow="none";aU.onmouseenter=function(){aX.style.display=""};aU.onmouseleave=function(){aX.style.display="none"};aU.onclick=adtoniq.waisaChoice;aW=aW.parentNode;aW.parentNode.insertBefore(aU,aW);if(af=="on"){aW.style.border="2px solid  red"}aW.parentNode.style.height=(aW.parentNode.clientHeight+20)+"px"}}function ap(aX,aV,aW,aU){var aY=aV.getAttribute(aW);if(aY==null){aY=aU}aX.setAttribute(aW,aY)}function aA(aV,aU){var aW=aU.getAttribute("style");if(aW){if(aW[aW.length-1]!=";"){aW+=";"}aW=aW.replace(/;/g," !important;");aV.setAttribute("style",aW)}}function aI(aW,aV,aU){if(aU.getAttribute(aW)){aV.setAttribute(aW,aU.getAttribute(aW))}}function aT(aV,aU){aA(aV,aU)}function aL(aV,aU){aU.parentNode.insertBefore(aV,aU.nextSibling)}function at(aU,aV){aV.parentNode.insertBefore(aU,aV)}for(var aJ=0;aJ<y.length&&K<Y;aJ++){var aG=y[aJ].width;var aE=y[aJ].height;var au=y[aJ].cssSelector;var ao=y[aJ].stripeId;var av=y[aJ].url;var l=y[aJ].preMarkup;var aD=y[aJ].postMarkup;var aK=y[aJ].format;var aM=y[aJ].directAd;if(av!=null&&!location.pathname.match(av)){continue}var aQ=am?am():document.querySelectorAll(au);var ar=Math.min(aQ.length,Y-K,6-K);var aR;if(aK){aR=ab[aK]}else{aR=R}K+=ar;for(i=0;i<ar;i++){var ay=aQ[i];if(ay){if(l){var aq="_x"+(Math.floor(Math.random()*10000)+1)+"x_";var aC=l+"<div id='"+aq+"'></div>"+aD;d=document.createElement("div");d.insertAdjacentHTML("beforeend",aC);aL(d.firstChild,ay);ay.parentNode.removeChild(ay);ay=document.querySelector("#"+aq)}var aO=document.createElement("div");if(aM!=null&&X("adtoniq-direct-buy")=="1"){aO.insertAdjacentHTML("beforeend","<a href='"+aM.clickThroughUrl+"' target='_blank'><img src = '"+aM.imageUrl+"'></a>")}else{aO.classList.add("pi_"+ao);var aH=document.createAttribute("powerinbox");aO.setAttributeNode(aH);aO.innerHTML=atob(aR).split("%stripeid%").join(ao).split("%stripe_width%").join(aG)}aL(aO,ay);aP(ay);ay.parentNode.removeChild(ay)}}}for(var aJ=0;aJ<v.length&&K<Y;aJ++){var au=v[aJ].cssSelector;var aB=v[aJ].src_id;var av=v[aJ].url;var l=v[aJ].preMarkup;var aD=v[aJ].postMarkup;var aG=v[aJ].width;var aE=v[aJ].height;var aK=v[aJ].format;var az=v[aJ].cn;if(av!=null&&!location.pathname.match(av)){continue}var aQ=am?am():document.querySelectorAll(au);var ax=Math.min(aQ.length,Y-K,6-K);K+=ax;for(i=0;i<ax;i++){var ay=aQ[i];if(ay){if(l){var aq="_x"+(Math.floor(Math.random()*10000)+1)+"x_";var aC=l+"<div id='"+aq+"'></div>"+aD;d=document.createElement("div");d.insertAdjacentHTML("beforeend",aC);aL(d.firstChild,ay);ay.parentNode.removeChild(ay);ay=document.querySelector("#"+aq)}var aO;var aF=Math.round(new Date().getTime()/1000);if(aK){var aS=document.createElement("iframe");aS.setAttribute("scrolling","no");aS.frameBorder=0;aS.style.position="absolute";aS.style.height="100%";aS.style.width="100%";aS.style.left=0;aS.style.top=0;aS.src=N+"m/f?a=${encryptedArgs}&s="+aB+"&f="+encodeURIComponent(aK+":"+az)+"&b="+aF;aO=document.createElement("div");aO.style.overflow="hidden";var aw=aK.split("x");aO.style.paddingTop=(100*aw[1]/aw[0]).toFixed(2)+"%";aO.style.position="relative";aO.appendChild(aS)}else{aO=document.createElement("iframe");aO.setAttribute("scrolling","no");aO.frameBorder=0;aO.style.position="relative";aO.style.height=aE+"px";aO.style.width=aG+"px";aO.src=N+"m/f?a=${encryptedArgs}&s="+aB+"&f="+encodeURIComponent(aG+":"+aE+":"+az)+"&b="+aF}aL(aO,ay);aP(ay);ay.parentNode.removeChild(ay)}}}},setFilter:function(l){s("adtoniq-filter",l,365)},setJson:function(l){y=l}}}();adtoniq.setup();
</script>

<script type="text/javascript">
    (function() {
            function controller($scope, TH$Dialog, $location, $rootScope, $timeout, TH$SharedVars, $service, TH$LocalStorage) {

    $scope.searchT ='';
    $scope.zonesOpen = false;

    TH$SharedVars.bind($scope, 'searchT', 'searchTerm', true);

    $scope.login = function() {
        TH$Dialog.open({
            loadWidget: 'users.loginForm',
            size: 'modalForm',
            showClose: true
        });
    };

    $scope.signIn = function() {
        TH$Dialog.open({
            loadWidget: 'users.registration',
            size: 'modalFormExtended',
            showClose: true
        });
    };

    $scope.allResults = function() {
        window.location='/search';
    };

    $("#search").keyup(function(e) {
        var length = ($scope.searchT ? $scope.searchT.length : 0);
        $scope.searchT = ($scope.searchT ? $scope.searchT : '');

        if (e.keyCode === 13 && length > 2) {
            $scope.allResults();
        } else {
            $scope.search();
        }
    });

    $scope.focusSearch = function() {
        $timeout(function() {
            $("#search").focus();
        }, 100)
    };

    $scope.search = function() {
        var length = ($scope.searchT ? $scope.searchT.length : 0);
        $scope.loading = (length > 2);
        if (length < 3) {
            if ($scope.nodes || $scope.nodes == []) {
                $timeout(function() {
                    $scope.nodes = [];
                    $scope.cType = [];
                    $scope.related = [];
                    $scope.pager = [];
                    $scope.searchParam = [];
                    $scope.totalResults = null;

                }, 100)
            }
            return false;
        }

        var term = $scope.searchT;
        if ($scope.prevTerm == term) {
            return;
        }

        $scope.prevTerm = term;

        TH$LocalStorage.value('searchValue', term);
        term = (term ? term : '');
        $service.nextPage({term: term, pageSize: 7}, null, true).then(function(data) {
            $scope.loading = false;
            var curPage = 1;
            $scope.nodes = data.pages.newest[curPage];
            $scope.haveResults = ($scope.nodes) ? true : false;
            $scope.totalResults = data.totalItems;
        });
    }

    $scope.toggleZones = function(url, $event) {
        $event.preventDefault();
        $scope.zonesOpen = !$scope.zonesOpen;
    }
}

            var WMODEL_DATA = {};
            WMODEL_DATA.isAdmin = false;
        WMODEL_DATA.getPortals = null;
        WMODEL_DATA.OPTIONS = {};
        WMODEL_DATA.user = {"karma":40,"country":null,"website":null,"city":null,"about":null,"avatar":"https://secure.gravatar.com/avatar/?d=identicon&r=PG","realName":"$$ANON_USER$$","websiteUrl":"","jobRole":null,"tagline":null,"company":null,"id":2500002,"job":null};
        TH.installWidgetController('header.headerV2', 'mainHeader', WMODEL_DATA, typeof controller == 'function' ? controller : null, [{name: 'nextPage', data: true}], ' oUhbWOfRPSwBoUhM', null);
        })();
        (function() {
            function controller($scope, TH$Dialog, TH$Service, $window, $rootScope) {

    var body = $(".body"),
        announcement = $(".announcementBar"),
        marginRight = body.css("marginRight"),
        marginLeft = body.css("marginLeft");

    $scope.goToRegistration = function() {
        TH$Dialog.open({
            loadWidget: 'users.registration',
            size: 'modalFormExtended',
            showClose: true,
            data: {
                fromDownload: true,
                redirectUrl: $scope.announcement.link
            }
        });
    };

    $scope.track = function(id) {
        var data = {
            siteNotification: id
        };
        if ($rootScope.user.authenticated) {
            TH$Service.exec('dzoneUsers.trackAnnouncementBar', data).then(function() {
            });
            $window.location.href = $scope.announcement.link;
        } else {
            $scope.goToRegistration();
        }
    };

    $(window).resize(function() {
        marginRight = body.css("marginRight");
        marginLeft = body.css("marginLeft");
        $scope.setBarWidth()
    });

    if (!(announcement.next().is(".layout-card"))) {
        announcement.css("margin-bottom", "10px");
    }

    $scope.toShow = ($scope.announcement && $scope.announcement.anononly) ? !($rootScope.user.authenticated) : true;

    $scope.setBarWidth = function() {
        var container = $("#acontainer");
        container.css("margin-right", "-" + marginRight);
        container.css("margin-left", "-" + marginLeft);
    }
}

TH.directive('backImg', function() {
    return function(scope, element, attrs) {
        if (attrs.hasimage == "true") {
            var img = new Image();
            img.onload = a(attrs.img, element, scope);
            img.onerror = a(attrs.imgbackup, element, scope);
            img.src = attrs.img;
        }
        scope.setBarWidth();
    };
});

var a = function(url, element) {
    element.css({
        'background-image': 'url(' + url + ')',
        'background-size': 'cover'
    });
};
            var WMODEL_DATA = {};
            WMODEL_DATA.OPTIONS = {};
        WMODEL_DATA.announcement = {"id":4162299,"body":"Let us know how you like to work in this quick survey!","link":"https://www.surveygizmo.com/s3/5426143/AnswerHub-2020-State-of-the-Developer-Survey","title":"Take the Survey","img2":"/notificationImage.html?id=4162299","img":"https://dz2cdn1.dzone.com/notificationImage.html?id=4162299","hasImage":false,"anononly":false};
        TH.installWidgetController('announcementBar', 'announcementBar1', WMODEL_DATA, typeof controller == 'function' ? controller : null, null, ' oUhbYlrRaqMaoUhM', null);
        })();
        (function() {
            function controller($scope, $sce, $analytics, $service, SideBarService, TH$Dialog,$rootScope, TH$Location, $q, $window,
                    DZtopicsString, shareThis, $location, TH$Service, DZHeadService, $timeout, ArticleAdsService) {

    var current = ($scope.articles && $scope.articles.length) ? $scope.articles[0] : null;
    var loading = null;
    var lastLoaded = current;
    var cache = {};


    $scope.width = $(window).width();
    $scope.voted = null;
    $scope.articleJson = {};
    $scope.serp = {
        'title': '',
        'url': '',
        'description': ''
    };

    $scope.canDelete = function(article) {
        return article.canDelete;
    };

    $scope.canEdit = function(article) {
        return article.canEdit;
    };

    $scope.canPublish = function (article) {
        return article.canPublish;
    };

    $scope.loginForm = function () {

        TH$Dialog.open({
            loadWidget: 'users.loginForm',
            size: 'modalForm',
            showClose: true,
            data: {
                fromDownload: true
            }
        });
    };

    $scope.delete= function(article) {
        TH$Dialog.confirm("Are you sure you want to permanently delete this article?").then(function() {
            TH$Service.action('delete', {type: 'node', id: article.id}).then(function() {
                TH$Dialog.success('Article deleted');
                newArticle(article.type);
            });
        });
    };

    $scope.publish = function(article) {
        TH$Dialog.confirm("Are you sure you want to publish this article?").then(function () {
            TH$Service.action('nodes.publish', {type: 'node', id: article.id}, {}, true)
                .then(function () {
                    TH$Dialog.success('Article Published', 'Your article was successfully published');
                    article.published = true;
                }, function () {
                    TH$Dialog.error('Article not Published', 'There was an error publishing teh article');
                });
        });
    };

    $scope.shareTwitter = function($event, title, url){
        $event.preventDefault();
        $event.stopPropagation();
        var twitter = 'https://twitter.com/intent/tweet';
        var link = $location.protocol() + '://' + location.host + url;
        var ref = location.host;
        var params = '?text=' + encodeURIComponent(title) + '&url=' + link + '&ref=dzone.com&via=DZoneInc';
        var win = window.open(twitter + params, '_blank');
        win.focus();
    };

    function newArticle(type) {
        current.article = {
            body: '',
            title: '',
            image: null,
            topics: [],
            sources: [],
            notes: '',
            published: false,
            canDelete: false
        };

        current.bodyImages = [];
        setEditUrl(null, type);
    };

    function setEditUrl(id, type) {
        TH$Location.apply(function ($location) {

            var url;

            if (id) {
                if (type == 'article') {
                    url = '/content/' + id + '/edit.html';
                } else {
                    url = '/dzone/staff/' + type + (type == 'refcard' ? 'z' : 's') + '/' + id + '/edit.html';
                }
            } else {
                if (type == 'article') {
                    url = '/content/article/post.html';
                } else if (type == 'refcard'){
                    url = '/dzone/staff/' + type + 'z' + '/add.html';
                }else{
                    url = '/content/article/post.html'
                }
            }
            $timeout(function(){
                $location.path(url);
            },1000);
        });
    };

    function setCurrentInSidebar(article) {
        var title = (article.header) ? article.header.title : article.title;
        var titleEll = (article.header) ? article.header.titleEll : article.title;
        SideBarService.active = article.title ? article : {
            id: article.id,
            type: 'article',
            title:  $scope.edition ? titleEll : title,
            url: article.url,
            imageUrl: article.articleImage
        }
    }

    if (current) {
        loadPartner(current);
        loadRichSnippetData(current);
        setCurrentInSidebar(current);
        setMeta(current);
        current.fullHtml = $sce.trustAsHtml(current.articleContent);
    }

    function setMeta(current){
        var portal = (current.portal) ? current.portal.name : '';
        var keywords = (current.articleTags) ? current.articleTags.toString() : portal;
        var title = current.header ? current.header.title : current.title;

        if(!title){
            return;
        }
        DZHeadService.title = title+' - DZone '+portal;
        DZHeadService.description = current.metaDescription;
        DZHeadService.keywords = keywords;
        DZHeadService.url = $location.absUrl();
        DZHeadService.canonical = $location.protocol() + '://' + $location.host() + current.url;
        var imageLink = current.header ? current.header.imageLink : current.imageLink;
        DZHeadService.img = imageLink;
        DZHeadService.type = current.articleType;
        DZHeadService.wordCount = current.wordCount;

        var maxTitleLength = 70;
        var localTitle = title;
        if (localTitle.length > maxTitleLength) {
            localTitle = localTitle.substring(0, maxTitleLength);
        }

        var maxDescriptionLength = 150;
        var description = current.metaDescription;
        if (description.length > maxDescriptionLength) {
            description = description.substring(0, maxDescriptionLength) + ' ...';
        }

        $scope.serp.title = localTitle + ' - DZone ' + portal;
        $scope.serp.url = DZHeadService.canonical;
        $scope.serp.description = description;
    }

    function getArticle(id) {

        if (cache[id]) {
            return $q.when(cache[id]);
        } else {
            var promise =  $service({article: id});

            promise.then(function(article) {
                article.fullHtml = $sce.trustAsHtml(article.articleContent);
            });

            return promise;
        }
    }

    function loadArticleInList(id) {
        loading = id;

        if (cache[id]) {
            $scope.articles.push(cache[id]);
            lastLoaded = cache[id];
            loading = null;
        } else {
            $scope.articles.push({type: 'loader'});

            getArticle(id)
                .then(function(article) {
                    $scope.articles.pop();
                    $scope.articles.push(article);
                    lastLoaded = article;
                    loading = null;
                    cache[article.id] = article;

                    loadPartner(article);
                    loadRichSnippetData(current);
                });
        }
    }

    function loadRichSnippetData(article) {

        var rs = {
            bodyProp: 'articleBody',
            date: moment(article.articleDate).format(),
            articleType: 'https://schema.org/Article'
        };

        article.rs = rs;
    }

    var articleNumber = 1;

    function attachPartner(article, partners) {

        article.showLogo = true;

        if (!_.isNumber(partners.lastUsed)) {
            toUse = partners.lastUsed
        }else{
            toUse = partners.lastUsed + 1;
        }

        if (toUse >= partners.length || !toUse) {
            toUse = 0;
        }

        if(partners){
            article.showLogo = (partners.length < 2 && articleNumber % 2) ? false : article.showLogo;
        }else{
            article.showLogo = false;
        }

        if(!articleNumber || article.partner){
            return;
        }

        article.readyForAd = true;
        article.partner = partners[toUse];
        $scope.partners.lastUsed = toUse;
        articleNumber++;
    }


    function loadPartner(article) {

        var partners = $scope.partners;

        if (!article.portalId) {
            if ($scope.portal) {
                article.portal = _.findWhere($scope.portals, {id: $scope.portal.id});
            } else {
            }
        } else {
            article.portal = _.findWhere($scope.portals, {id: article.portalId});
        }
        if (article.portal) {
            if (partners[article.portal.id]) {
                var _partners = partners[article.portal.id];
                _partners.lastUsed = $scope.partners.lastUsed;
                attachPartner(article, _partners);
            } else {
                $service.partners({portal: article.portal.id}).then(function(_partners) {
                    partners[article.portal.id] = _partners;
                    attachPartner(article, _partners);
                });
            }
        }

        if (article.readyForAd || article.partner) {
            article.readyForAd = true;
            return;
        }

    }

    $scope.loadMore = function() {

        if (loading) {
            return;
        }

        var next = SideBarService.findNext(lastLoaded ? lastLoaded.id : null);

        if (next) {
            loadArticleInList(next);

            // Fetch json data for creating the JSON-LD script in DOM
            TH$Service.data('articles.getArticleJsonData', {articleId: next}).then(function(result) {
                $scope.articleJson[next] = result;
            }).catch(function(error) {
                console.error(error);
            });
        }
    };

    // Watch the articleJson dictionary for any new JSON data being inserted
    // When new values are added, put a watch on the next article's div
    // used for adding the JSON-LD script to. Once the DOM has been rendered
    // containing this div, create the JSON-LD script and attach it to this container.
    $scope.$watch('articleJson', function(newValue) {
        var keys = Object.keys(newValue);
        if (keys.length) {
            var selector = '#article-' + keys[0];
            var articleId = parseInt(keys[0]);
            $scope.waitForElement(selector, function() {
                $scope.injectArticleJson(articleId)
            });
        }
    }, true);

    /**
     * Wait for the given element to be rendered in the DOM and then
     * run the given callback once the element is ready.
     *
     * @param selector - selector used to query the element
     * @param callback - callback run once the element has been rendered
     */
    $scope.waitForElement = function(selector, callback) {
        if ($(selector).length) {
            callback();
        } else {
            setTimeout(function() {
                $scope.waitForElement(selector, callback);
            }, 100);
        }
    };

    /**
     * Builds the JSON-LD script for the given article and injects
     * it into the appropriate place in the DOM.
     *
     * @param article - id of the article
     */
    $scope.injectArticleJson = function(article) {
        var json = $scope.articleJson[article];
        var script = document.createElement('script');
        script.type = 'application/ld+json';
        script.text = json;
        var jsonDivId = '#article-' + article;
        var jsonDiv = angular.element(jsonDivId);
        if (jsonDiv.length) {
            jsonDiv.append(script);
            // Remove the key/value pair from the dictionary now
            // that is has been dealt with
            delete $scope.articleJson[article];
        }
    };

    $scope.activate = function(article) {

        if(article.type == 'loader'){
            return;
        }

        $rootScope.model.portal = article.portal;
        $scope.addShareCount(article);

        if (current && article.id == current.id) {
            return;
        }

        current = article;
        setCurrentInSidebar(article);

        TH$Location.apply(function($location) {
            $location.path(article.url);
        });

        var title = article.header ? article.header.title : article.title;

        setMeta(article);
        $timeout(function(){
            if (!article.viewTracked) {
                TH$Service.action('nodes.trackView', {type: 'node', id: article.id}, {}, true);
                article.views++;
                article.viewTracked = true;
                if (window.ga) {
                    window.ga('set', 'dimension2', article.articleType ? ('article/' + article.articleType) : 'article');
                    window.ga('set', 'dimension3', moment(article.articleDate).format('YYYY-MM-DD'));
                    window.ga('set', 'dimension4', _.indexOf($scope.articles, article));
                    window.ga('set', 'dimension5', article.zonetop || 'undefined');
                    window.ga('set', 'dimension6', article.pubPlug || 'undefined');
                    window.ga('set', 'dimension7', article.articleTags || 'undefined');
                    var lastAuthor = article.authors[article.authors.length - 1].name;
                    var lastAuthorCompany = article.authors[article.authors.length - 1].company;
                    window.ga('set', 'dimension8', lastAuthor || 'undefined');
                    window.ga('set', 'dimension9', article.partner ? article.partner.details.name : 'undefined');
                    window.ga('set', 'dimension10', lastAuthorCompany || 'undefined');
                    window.ga('set', 'dimension11', article.authors[0].claimed || 'undefined');
                }
                $analytics.pageTrack(article.url);
            }
        },0);
    };

    $scope.toggleComments = function(article) {
        if(!article.isLocked) {
            TH$Service.action('articles.lockNode', {type: 'node', id: article.id}).then(function(result) {
                if(result){
                    article.isLocked = true;
                    TH$Dialog.success('You have disabled all comments for this Article');
                }else{
                    TH$Dialog.error('error','Your requested was denied')
                }
            });
        }else {
            TH$Service.action('articles.unlockNode', {type: 'node', id: article.id}).then(function(result) {
                if(result){
                    article.isLocked = false;
                    TH$Dialog.success('You have enabled all comments for this Article');
                }else{
                    TH$Dialog.error('error','Your requested was denied')
                }
            });
        }
    };

    $scope.toggleLimitComments = function (article) {
        if (!article.isLimited) {
            TH$Service.action('articles.limitNode', {type: 'node', id: article.id}).then(function (result) {
                if (result) {
                    article.isLimited = true;
                    TH$Dialog.success('You have limited comments for this Article. Now all comments will go through moderation.');
                } else {
                    TH$Dialog.error('error', 'Your requested was denied')
                }
            });
        } else {
            TH$Service.action('articles.unlimitNode', {type: 'node', id: article.id}).then(function (result) {
                if (result) {
                    article.isLimited = false;
                    TH$Dialog.success('You removed the limits for comments on this Article');
                } else {
                    TH$Dialog.error('error', 'Your requested was denied')
                }
            });
        }
    };

    $scope.activateT = function(article) {
        $scope.activate(article);
    };

    $scope.activateB = function(article) {
        $scope.activate(article);
    };

    SideBarService.fn.onSelected = function(node) {
        $scope.articles = [];

        loadArticleInList(node.id);

        $scope.activate(node);
        $($window).scrollTop(0);
    };

    $scope.upvoteArticle = function () {
    };

    $scope.addShareCount = function(article){
    };

    $scope.share = function(socialNet, url, title){
        shareThis.shareThis(socialNet, $location.protocol()+'://'+$location.host()+':'+$location.port()+url, title);
    };

    Object.size = function(obj) {
        var size = 0, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) size++;
        }
        return size;
    };


    $scope.share = function(socialNet, url, title){
        shareThis.shareThis(socialNet, $location.protocol()+'://'+$location.host()+':'+$location.port()+url, title);
    };

    $scope.mailShareLink = function(article) {
        var title = article.header ? article.header.title : article.title;
        var link = article.header ? article.header.link : article.link;
        return 'mailto:?subject=' + encodeURIComponent(title) +  '&body=Article: ' + encodeURIComponent('https://dzone.com/' + link);
    };

    $scope.ads = ArticleAdsService($scope.edition, $scope.width);

    var partnerResourceIndex = 0;

    $scope.calculatePartnerResourceIndex = function() {
      partnerResourceIndex++;

      return partnerResourceIndex;
    }
}
            var WMODEL_DATA = {};
            WMODEL_DATA.authenticated = false;
        WMODEL_DATA.firstArticleContent = null;
        WMODEL_DATA.daysOldBody = "Technology moves quickly and this #type was published #time.  Some or all of its contents may be outdated.";
        WMODEL_DATA.isPreview = false;
        WMODEL_DATA.partners = {"lastUsed":1,"1":[{"top":{"id":302528,"text":"<p><strong>Java-based (JDBC) data connectivity to SaaS, NoSQL, and Big Data. <a href=\"https://www.cdata.com/jdbc/?utm_source=dzone&amp;utm_medium=jdbc-roll\" rel=\"nofollow\" target=\"_blank\">Download Now.</a></strong></p>"},"bottom":{"id":302529,"text":"<p><strong><a href=\"https://www.cdata.com/jdbc/?utm_source=dzone&amp;utm_medium=jdbc-roll\" rel=\"nofollow\" target=\"_blank\">Connect any Java based application to your SaaS data</a>.&nbsp; Over 100+ Java-based data source connectors.</strong></p>"},"campaign":198953,"details":{"code":"cdata","level":2,"partnerUrl":"http://www.cdata.com","name":"Cdata","logo":"//dz2cdn1.dzone.com/storage/partner-logo/10135556-screen-shot-2018-09-01-at-75421-am.png","leveldesc":"Platinum","id":111712}},{"top":{"id":335533,"text":"<p><strong>Secure your Java app or API service quickly and easily with Okta's user authentication and authorization libraries. Developer accounts are free forever.&nbsp;<a href=\"https://developer.okta.com/signup/?utm_campaign=text_website_all_multiple_dev_ciam_pre-roll-no-developer-ever_&amp;utm_source=dzone&amp;utm_medium=cpc\" rel=\"nofollow\" target=\"_blank\">Try Okta Instead.</a></strong></p>"},"bottom":{"id":335534,"text":"<p><strong style=\"box-sizing: border-box; font-weight: 500; font-style: normal; color: rgb(68, 68, 68); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">Secure your Java app or API service quickly and easily with Okta's user authentication and authorization libraries. Developer accounts are free forever.&nbsp;<a href=\"https://developer.okta.com/signup/?utm_campaign=text_website_all_multiple_dev_ciam_pre-roll-no-developer-ever_&amp;utm_source=dzone&amp;utm_medium=cpc\" rel=\"nofollow\" target=\"_blank\">Try Okta Instead.</a></strong></p>"},"campaign":233913,"details":{"code":"okta","level":2,"partnerUrl":"https://www.okta.com","name":"Okta","logo":"//dz2cdn4.dzone.com/storage/partner-logo/6142487-5746593-502258-okta-identity-management-logo.jpg","leveldesc":"Platinum","id":99712}},{"top":{"id":363527,"text":"<p>Modern Java EE Design Patterns: Building Scalable Architecture for Sustainable Enterprise Development. <a href=\"https://developers.redhat.com/books/modern-java-ee-design-patterns-building-scalable-architecture-sustainable-enterprise/?sc_cid=701f20000012gb1AAA\" target=\"_blank\" rel=\"nofollow\">Download Now.</a></p>"},"bottom":{"id":363528,"text":"<p>Microservices for Java Developers:&nbsp;<a href=\"https://developers.redhat.com/books/microservices-java-developers-hands-introduction-frameworks-and-containers/?sc_cid=701f20000012gb1AAA\" target=\"_blank\" rel=\"nofollow\">A hands-on introduction to frameworks and containers.</a></p>"},"campaign":256916,"details":{"code":"rhdp","level":2,"partnerUrl":"https://developers.redhat.com/","name":"Red Hat Developer Program","logo":"//dz2cdn2.dzone.com/storage/partner-logo/10110885-download.png","leveldesc":"Platinum","id":111}}]};
        WMODEL_DATA.edition = null;
        WMODEL_DATA.perms = {"canDecidePick":false,"canPublish":false};
        WMODEL_DATA.OPTIONS = {};
        WMODEL_DATA.daysOldTitle = "Heads up...this #type is old!";
        WMODEL_DATA.articles = [{"pubPlug":"dzone-mikeg","modDate":1540449011000,"articleImage":"//dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg","rawType":"article","canEdit":false,"viewTracked":true,"source":"https://lankydanblog.wordpress.com/2017/02/01/common-fork-join-pool-and-streams/","accessMode":["textual"],"metaDescription":"Parallel streams are a boon to concurrency, and Common Fork Join Pools are an important part of that interaction. This overview should shed some light on how they work.","articleType":"tutorial","draft":false,"portalId":1,"isLocked":false,"relatedRefcard":[{"img":12672764,"id":2898906,"title":"Getting Started With Headless CMS","url":"/refcardz/getting-started-with-headless-cms"}],"readyForAd":true,"canPublish":false,"articleContent":"","articleTypePre":"https://schema.org/Article","canDelete":false,"likeStatus":{"score":15,"canLike":false,"liked":false},"id":1458130,"nComments":13,"views":43127,"bodyProp":"articleBody","originalSource":"https://lankydanblog.wordpress.com/2017/02/01/common-fork-join-pool-and-streams/","isOld":false,"isLimited":false,"image":"//dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg","wordCount":1014,"articleTags":["java","java 8 streams","fork join","tutorial","parallel streams"],"canonical":"https://dzone.com/articles/common-fork-join-pool-and-streams","published":true,"url":"/articles/common-fork-join-pool-and-streams","tldr":"Parallel streams are a boon to concurrency, and Common Fork Join Pools are an important part of that interaction. This overview should shed some light on how they work.","saveStatus":{"saved":false,"count":28,"canSave":false},"deleted":false,"pdf":null,"partner":{"top":{"id":335533,"text":"<p><strong>Secure your Java app or API service quickly and easily with Okta's user authentication and authorization libraries. Developer accounts are free forever.&nbsp;<a href=\"https://developer.okta.com/signup/?utm_campaign=text_website_all_multiple_dev_ciam_pre-roll-no-developer-ever_&amp;utm_source=dzone&amp;utm_medium=cpc\" rel=\"nofollow\" target=\"_blank\">Try Okta Instead.</a></strong></p>"},"bottom":{"id":335534,"text":"<p><strong style=\"box-sizing: border-box; font-weight: 500; font-style: normal; color: rgb(68, 68, 68); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">Secure your Java app or API service quickly and easily with Okta's user authentication and authorization libraries. Developer accounts are free forever.&nbsp;<a href=\"https://developer.okta.com/signup/?utm_campaign=text_website_all_multiple_dev_ciam_pre-roll-no-developer-ever_&amp;utm_source=dzone&amp;utm_medium=cpc\" rel=\"nofollow\" target=\"_blank\">Try Okta Instead.</a></strong></p>"},"campaign":233913,"details":{"code":"okta","level":2,"partnerUrl":"https://www.okta.com","name":"Okta","logo":"//dz2cdn4.dzone.com/storage/partner-logo/6142487-5746593-502258-okta-identity-management-logo.jpg","leveldesc":"Platinum","id":99712}},"relatedArticles":[{"img":4794378,"id":1498056,"title":"Diving Into Java 8's newWorkStealingPools","url":"/articles/diving-into-java-8s-newworkstealingpools"},{"img":3228644,"id":1366436,"title":"Streamplify Your Code","url":"/articles/streamplify-your-code"},{"img":9460724,"id":2266887,"title":"Mastering Java 8 Parallel Streams (Part 5) [Video]","url":"/articles/mastering-java-8-streams-part-5-video"}],"zonetop":"","publisher":{"name":"DZone","logo":"https://dzone.com/themes/dz20/images/logo.png"},"header":{"imageLink":"//dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg","titleEll":"Common Fork Join Pool and Streams","imageUrl":"//dz2cdn2.dzone.com/storage/article-thumb/4216589-thumb.jpg","link":"/articles/common-fork-join-pool-and-streams","id":1458130,"title":"Common Fork Join Pool and Streams","type":"article"},"articleDate":"2017-02-06","shortDesc":"<p pid=\"2\">In my post&nbsp;<a href=\"https://dzone.com/articles/dipping-into-java-8-streams\" rel=\"nofollow\">Dipping into Java 8&nbsp;Streams</a>, a comment was added that I should explain what the Common Fork Join Pool is and how it is linked to parallel streams. Honestly, I had never heard of it, so I set out on my quest to find the answer somewhere on the Internet and make this post to attempt to follow up on the posted comment. Unfortunately, I wasn’t able to reach the understanding about this subject that I hoped I would, so I am going to write what I found out from doing some research and from debugging some code myself. If you think anything is missing, then leave a comment. This is, after all, a place to learn!</p>\n<p pid=\"3\">So let's start with something I am pretty sure about. When you use a parallel stream, it will run its process in multiple threads when appropriate. Now that’s what you would expect, as it has the word parallel in its name. But what it doesn’t say is that all the parallel streams that you create will share their threads from one Common Fork Join Pool. This shouldn’t be a problem if you're just using a single parallel stream every now and then, but if...","plug":"common-fork-join-pool-and-streams","authors":[{"isStaff":false,"aboutAuthor":"Computer Science graduate from the University of Leicester. Currently working as a Java Developer. @LankyDanDev https://www.linkedin.com/in/danknewton/","claimed":"Michael_Tharrington","partnerOf":[],"avatar":12981850,"url":"/users/2947070/lanky-dan.html","realName":"Dan Newton","isMVB":true,"name":"Lanky Dan","tagline":null,"company":"r3","id":2947070,"isClaimed":true}]}];
        TH.installWidgetController('article.content', 'articleContent4', WMODEL_DATA, typeof controller == 'function' ? controller : null, [{name: 'partners', data: true},{name: 'DEFAULT', data: true}], ' oUhbblYOaqbcblYOaqbcC', null);
        })();
        (function() {
            function controller($scope, $service, $location, SideBarService, $timeout) {

    if ($scope.edition) {
        $scope.date = moment($scope.editionDate).utc().format('MMM DD, YYYY');
    }

    SideBarService.ctx.pageSize = $scope.pageSize;
    SideBarService.ctx.isPreview = $scope.isPreview;
    SideBarService.ctx.mode = $scope.mode;

    SideBarService.fn.loader = $service;

    var $window = $(window);

    function checkWidth() {
        var windowsize = $window.width();
        $scope.width = windowsize;
    }
    // Execute on load
    checkWidth()
    // Bind event listener
    $(window).resize(checkWidth);


    if ($scope.edition) {
        SideBarService.ctx.edition = $scope.edition;
    }

    SideBarService.fn.scrollCheck = function() {
        $scope.$emit('thIfScrollCheck');
    };

    var currentFilter;

    $scope.$on('$locationChangeSuccess', function() {

        if (!$location.search().filter) {
            $scope.filter = 'latest';
        } else {
            $scope.filter = $location.search().filter;

            if ($scope.filter == 'latest') {
                $location.search('filter', null);
            }
        }

        if (currentFilter == $scope.filter) {
            return;
        }

        currentFilter = $scope.filter;

        SideBarService.ctx.filter = $scope.filter;
    });

    $scope.display = SideBarService.getList();

    $scope.$watchCollection(function() {
        return SideBarService.getList();
    }, function (n) {
        $scope.display = n;
    });

    $scope.isActive = SideBarService.isActive;

    $scope.isExcluded = SideBarService.isExcluded;

    $scope.loadMore = SideBarService.load;

    $scope.loading = function() {
        return SideBarService.ctx.loading;
    };

    TH.on('TapBarStatusChange', function(expanded) {
        if (expanded) {
            SideBarService.unblock();
        }
    })

}
            var WMODEL_DATA = {};
            WMODEL_DATA.mode = null;
        WMODEL_DATA.isPreview = false;
        WMODEL_DATA.editionName = "";
        WMODEL_DATA.editionDate = null;
        WMODEL_DATA.pageSize = 20;
        WMODEL_DATA.edition = null;
        WMODEL_DATA.OPTIONS = {};
        TH.installWidgetController('sidebar.content.list', 'sidebarContentList7', WMODEL_DATA, typeof controller == 'function' ? controller : null, [{name: 'DEFAULT', data: true}], ' oUhbkSMaaqbcdvVkcC', null);
        })();
        (function() {
            function controller($scope) {
    var $window = $(window);

    function checkWidth() {
        var windowsize = $window.width();
        var $element = $('div.sidebar.sidebarTapBar');
        $scope.width = windowsize;
        if(windowsize <= 1024 && $scope.edition){
            $('.fixContentRight').removeClass('fixContentRight');
            $('.tap').show();
        }else if($scope.edition){
            $('.tap').hide();
            $('.mainContentRow').addClass('fixContentRight');
            $element.removeClass('tapNotExpanded');
            $element.addClass('expanded');
        }
    }
    // Execute on load
    checkWidth();
    // Bind event listener
    $(window).resize(checkWidth);
}
            var WMODEL_DATA = {};
            WMODEL_DATA.edition = null;
        WMODEL_DATA.slot = null;
        WMODEL_DATA.OPTIONS = {};
        TH.installWidgetController('sidebar.tapBar', 'sidebar', WMODEL_DATA, typeof controller == 'function' ? controller : null, null, ' oUhbkSMadabfWVcC oUhbkSMadabbWQbVkcC', null);
        })();
        (function() {
            function controller($scope,  shareThis, TH$Dialog, TH$Service, $location) {
    $scope.getEditUrl = function(id, type) {
        if (!type || type == 'article') {
            return '/content/' + id + '/edit.html';
        } else {
            return '/dzone/staff/' + type + (type == 'refcard' ? 'z' : 's') + '/' + id + '/edit.html';
        }
    };

    $scope.share = function(socialNet, url, title){
        shareThis.shareThis(socialNet, url, title);
    };

    $scope.canDelete = function(article) {
        return article.canDelete;
    };

    $scope.canPublish = function(article) {
        return article.canPublish;
    };

    $scope.canEdit = function(article) {
        return article.canEdit;
    };

    $scope.toggleComments = function(article) {
        if(!article.isLocked) {
            TH$Service.action('articles.lockNode', {type: 'node', id: article.id}).then(function(result) {
                if(result){
                    article.isLocked = true;
                    TH$Dialog.success('You have disabled all comments for this Article');
                }else{
                    TH$Dialog.error('error','Your requested was denied')
                }
            });
        }else {
            TH$Service.action('articles.unlockNode', {type: 'node', id: article.id}).then(function(result) {
                if(result){
                    article.isLocked = false;
                    TH$Dialog.success('You have enabled all comments for this Article');
                }else{
                    TH$Dialog.error('error','Your requested was denied')
                }
            });
        }
    };

    $scope.toggleLimitComments = function (article) {
        if (!article.isLimited) {
            TH$Service.action('articles.limitNode', {type: 'node', id: article.id}).then(function (result) {
                if (result) {
                    article.isLimited = true;
                    TH$Dialog.success('You have limited comments for this Article. Now all comments will go through moderation.');
                } else {
                    TH$Dialog.error('error', 'Your requested was denied')
                }
            });
        } else {
            TH$Service.action('articles.unlimitNode', {type: 'node', id: article.id}).then(function (result) {
                if (result) {
                    article.isLimited = false;
                    TH$Dialog.success('You removed the limits for comments on this Article');
                } else {
                    TH$Dialog.error('error', 'Your requested was denied')
                }
            });
        }
    };

    $scope.shareTwitter = function($event, title, url){

        $event.preventDefault();
        $event.stopPropagation();
        var twitter = 'https://twitter.com/intent/tweet';
        var link = $location.protocol() + '://' + location.host + url;
        var ref = location.host;
        var params = '?text=' + encodeURIComponent(title) + '&url=' + link + '&ref=dzone.com&via=DZoneInc';
        var win = window.open(twitter + params, '_blank');
        win.focus();
    };

    $scope.edit = function(link) {
        TH$Dialog.open({
            loadWidget: 'links.postPreview',
            widgetArgs: {
                edit: link.id
            },
            size: 'xbig'
        }).then(function (result) {
            $scope.link.title = result.title;
            $scope.link.linkDescription = result.content;
            $scope.link.thumb = result.thumb;
            $scope.link.tags = result.topics;
        });
    };

    $scope.deleteLink = function(article) {
        var title = article.title;
        var type = 'link';
        if(article.header){
            title = (article.header.type == 'article') ? article.header.title : article.title;
            type = (article.header.type == 'article') ? 'article' : 'link';
        }
        TH$Dialog.confirm('Do you want to delete "' + title + '"?').then(function() {
            return TH$Service.action('delete', {type: type, id: article.id});
        }).then(function() {
            article.deleted = true;
        });
    };
}


            var WMODEL_DATA = {};
            WMODEL_DATA.OPTIONS = {};
        TH.installWidgetController('content.commentsSlider', 'contentCommentsSlider6', WMODEL_DATA, typeof controller == 'function' ? controller : null, null, ' oUhbaqbcaibvnWffWVcC', null);
        })();
        (function() {
            
            var WMODEL_DATA = {};
            WMODEL_DATA.name = "commentsSlider";
        WMODEL_DATA.slot = null;
        WMODEL_DATA.OPTIONS = {"name":"commentsSlider"};
        TH.installWidgetController('components.slider', 'componentsSlider5', WMODEL_DATA, typeof controller == 'function' ? controller : null, null, ' oUhballbvbdSaoUhM', null);
        })();
        </script>
    <script type="text/javascript">

        TH.installWidgetDirective('users.profile.mini', 'usersProfileMini', {"service":{"user":"="},"extra":null}, 'widget.html', '/widgets/users/profile/mini/widget.js', [{name: 'DEFAULT', data: true}], ' oUhbwfbqddOeffWVcC', null, ['widget.less']);
        
        TH.installWidgetDirective('header.sections', 'headerSections', {"service":null,"extra":null}, 'widget.html', '/widgets/header/sections/widget.js', null, ' oUhbWOfbRllbgfgpM', null, ['sections.less']);
        
        TH.installWidgetDirective('users.registration', 'usersRegistration', {"service":null,"extra":null}, 'widget.html', '/widgets/users/registration/widget.js', [{name: 'validateMail', data: false},{name: 'validateUsername', data: false}], ' oUhbwfbfZvbllfWVcC', ['/scripts/utilities/tools.js'], ['widget.less']);
        
        TH.installWidgetDirective('errors.recaptcha', 'errorsRecaptcha', {"service":null,"extra":null}, 'widget.html', '/widgets/errors/recaptcha/widget.js', null, ' oUhbfptaR_fSfWVcC', null, ['widget.less']);
        
        TH.installWidgetDirective('links.sources.mini', 'linksSourcesMini', {"service":{"link":"="},"extra":null}, 'widget.html', '', [{name: 'DEFAULT', data: true}], ' oUhbdhbqvRbefWfSC', null, ['mini.less']);
        
        TH.installWidgetDirective('assets.mini', 'assetsMini', {"service":{"asset":"="},"extra":null}, 'widget.html', '', [{name: 'DEFAULT', data: true}], ' oUhbcgvWfSoUhM', null, ['widget.less']);
        
        TH.installWidgetDirective('links.postPreview', 'linksPostPreview', {"service":{"url":"=","edit":"="},"extra":null}, 'widget.html', '/widgets/links/postPreview/widget.js', [{name: 'topics', data: true},{name: 'DEFAULT', data: true}], ' oUhbdhbnvqjXfoUhM', null, ['widget.less']);
        
        TH.installWidgetDirective('manage.revisions', 'manageRevisions', {"service":{"node":"=","body":"=","masterTemplate":"=","format":"=","mode":"="},"extra":null}, 'widget.html', '/widgets/manage/revisions/widget.js', [{name: 'DEFAULT', data: true},{name: 'revision', data: true}], ' oUhbXYVajkgpfWVcC', null, ['widget.less']);
        
        TH.installWidgetDirective('leads.addCRM', 'leadsAddCRM', {"service":null,"extra":null}, 'widget.html', '/widgets/leads/addCRM/widget.js', [{name: 'DEFAULT', data: true}], ' oUhb_ObOQnKRMnM oUhbcgvKRcgcONfPC', ['/scripts/utilities/tools.js'], ['add-crm.less','add-ref.less']);
        
        TH.installWidgetDirective('links.postV2', 'linksPostV2', {"service":null,"extra":null}, 'widget.html', '/widgets/links/postV2/widget.js', null, ' oUhbdhbnvXZqyBC', null, ['postV2.less']);
        
        TH.installWidgetDirective('users.questionForm', 'usersQuestionForm', {"service":null,"extra":null}, 'widget.html', '/widgets/users/questionForm/widget.js', null, ' oUhbwfbuglldnfWVcC', null, ['widget.less']);
        
        TH.installWidgetDirective('loading', 'loading', {"service":null,"extra":null}, 'widget.html', '/widgets/loading/widget.js', null, ' oUhbjOfQoUhM', null, ['widget.less']);
        
        TH.installWidgetDirective('refcardz.mini', 'refcardzMini', {"service":{"asset":"="},"extra":null}, 'widget.html', '', [{name: 'DEFAULT', data: true}], ' oUhbfSbmWfSoUhM', null, ['widget.less']);
        
        TH.installWidgetDirective('links.listV2', 'linksListV2', {"service":null,"extra":null}, 'widget.ftl', '/widgets/links/listV2/widget.js', [{name: 'linkData', data: true},{name: 'parseLink', data: true},{name: 'list', data: true}], ' oUhbdhbdvXVkyBC', ['directives.js','filters.js'], ['listV2.less']);
        
        TH.installWidgetDirective('users.uiPrefs', 'usersUiPrefs', {"service":null,"extra":null}, 'widget.html', '/widgets/users/uiPrefs/widget.js', null, '', null, null);
        
        TH.installWidgetDirective('users.loginForm', 'usersLoginForm', {"service":null,"extra":null}, 'widget.html', '/widgets/users/loginForm/widget.js', null, ' oUhbwfbjZcpWoUhM', null, ['widget.less']);
        
        TH.installWidgetDirective('users.noMembership', 'usersNoMembership', {"service":null,"extra":null}, 'widget.html', '/widgets/users/noMembership/widget.js', null, ' oUhbwfblaYfjhfWVcC', null, ['widget.less']);
        
        TH.installWidgetDirective('errors.general', 'errorsGeneral', {"service":null,"extra":null}, 'widget.html', '/widgets/errors/general/widget.js', null, ' oUhbfptQbfWfWVcC', null, ['widget.less']);
        
        TH.installWidgetDirective('manage.customNotifications.preview', 'manageCustomNotificationsPreview', {"service":null,"extra":null}, 'widget.html', '/widgets/manage/customNotifications/preview/widget.js', null, ' oUhbXYVMwrjrYVdgpZfnkZfnkM dLgZWBLPpWkKeXB', null, ['preview.less','/lib/froala-2/css/froala_style.min.css']);
        
        TH.installWidgetDirective('header.zonesDropdown', 'headerZonesDropdown', {"service":{"portal":"="},"extra":{"hover":"="}}, 'widget.html', '/widgets/header/zonesDropdown/widget.js', [{name: 'DEFAULT', data: true}], '', null, null);
        
        TH.installWidgetDirective('manage.customNotifications.test', 'manageCustomNotificationsTest', {"service":{"customNotification":"="},"extra":null}, 'widget.html', '/widgets/manage/customNotifications/test/widget.js', [{name: 'searchGroups', data: true},{name: 'DEFAULT', data: true},{name: 'searchUsers', data: true}], ' oUhbXYVMwrjrYVdgpcgcoUhM', null, ['widget.less']);
        
        TH.installWidgetDirective('content.commentBox', 'contentCommentBox', {"service":{"parent":"="},"extra":{"count":"=","limited":"="}}, 'widget.html', '/widgets/content/commentBox/widget.js', [{name: 'post', data: false},{name: 'edit', data: false},{name: 'DEFAULT', data: true}], ' oUhbaqbcaibevMkaqbC', null, ['comments.less']);
        
        TH.installWidgetDirective('article.listV2', 'articleListV2', {"service":null,"extra":null}, 'widget.html', '/widgets/article/listV2/widget.js', [{name: 'list', data: true},{name: 'sortCount', data: true}], ' oUhbblYOdvXKuV_VkcC', ['directives.js'], ['article-list.less']);
            </script>
<iframe src="./Common Fork Join Pool and Streams - DZone Java_files/saved_resource.html" style="position:absolute;left:-10px;width:1px;height:1px;"></iframe><script type="text/javascript" id="">jQuery.ajax({url:"https:\/\/dzone.com\/articles\/common-fork-join-pool-and-streams",data:{},error:function(a,b){dataLayer.push({event:"httperror",statuscode:a.status})}});</script>
<script type="text/javascript" id="">(function(b,a,c){var e=decodeURIComponent;var d="||";var g=";;",f="split",h="length",m="indexOf",k="localStorage",l="_ccmdt";b[c]=b[c]||{};b[c].us={};a=b[k]?b[k][l]||"":(a=a.cookie.match(l+"\x3d([^;]*)"))&&a[1]||"";e=e(a)[f](d);a=e[h];if(0<a)for(;a--;)d=e[a][f]("\x3d"),1<d[h]&&(-1<d[1][m](g)?(b[c].us[d[0]]=d[1][f](g),b[c].us[d[0]].pop()):b[c].us[d[0]]=d[1])})(window,document,"_ml");
(function(){_ml=window._ml||{};_ml.eid="65559";_ml.cid=google_tag_manager["GTM-K25QL22"].macro(3);_ml.fp=google_tag_manager["GTM-K25QL22"].macro(6);_ml.ef=["*email","*username"];_ml.informer={callback:function(a,b){"undefined"==typeof dataLayer||_ml.isEmptyObj(_ml.us)||dataLayer.push({event:"Bombora_Informer",Bombora_Topic:_ml.us.tp&&0<_ml.us.tp.length?_ml.us.tp[0]:"",Bombora_Industry:_ml.us.ind,Bombora_Company_Revenue:_ml.us.cr,Bombora_Company_Size:_ml.us.cs,Bombora_Domain:_ml.us.dm,Bombora_Seniority:_ml.us.sn,Bombora_Predictive_Category:_ml.us.pc&&
0<_ml.us.pc.length?_ml.us.pc[0]:"",Bombora_Decision_Maker:_ml.us.dcm,Bombora_Functional_Area:_ml.us.fa&&0<_ml.us.fa.length?_ml.us.fa[0]:"",Bombora_Install_Data:_ml.us.ins&&0<_ml.us.ins.length?_ml.us.ins[0]:"",Bombora_Professional_Group:_ml.us.pg&&0<_ml.us.pg.length?_ml.us.pg[0]:"",Bombora_Education:_ml.us.edu})},enable:!0};var b=document.getElementsByTagName("script")[0],a=new Date,c=document.createElement("script");c.type="text/javascript";c.async=!0;c.src="https://ml314.com/tag.aspx?"+a.getDate()+
a.getMonth()+a.getFullYear();b.parentNode.insertBefore(c,b)})();</script>
</body></html>
<!DOCTYPE html>
<!-- saved from url=(0028)https://www.jsonwebtoken.io/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>JSON Web Token (JWT)</title>
    
    <meta name="description" content="With JSONwebtoken.io, you can easily encode, decode, and validate JWTs.">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no, maximum-scale=1, width=device-width">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta property="og:title" content="Gain control over your JWTs">
    <meta property="og:description" content="With JSONwebtoken.io, you can easily encode, decode, and validate JWTs.">
    <meta property="og:image" content="https://www.jsonwebtoken.io/img/screenshots/promo-large.png">
    <meta property="og:image:secure_url" content="https://www.jsonwebtoken.io/img/screenshots/promo-large.png">

    <link href="./JSON Web Token (JWT)_files/bootstrap.min.css" rel="stylesheet" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <link rel="shortcut icon" type="image/png" href="https://www.jsonwebtoken.io/img/icons/icon-32.png">

    <link rel="stylesheet" href="./JSON Web Token (JWT)_files/css">
    <link rel="stylesheet" href="./JSON Web Token (JWT)_files/css(1)">
    <link rel="stylesheet" href="./JSON Web Token (JWT)_files/css(2)">
    <link rel="stylesheet" href="./JSON Web Token (JWT)_files/css(3)">

    <link rel="stylesheet" href="./JSON Web Token (JWT)_files/font-awesome.min.css">
    <link rel="stylesheet" href="./JSON Web Token (JWT)_files/codemirror.css">
    <link rel="stylesheet" href="./JSON Web Token (JWT)_files/markdown.css">
    <link rel="stylesheet" href="./JSON Web Token (JWT)_files/styles.css">


</head>
<body>
<div class="headerColor"></div>

<div id="app">
    
    <header>

        <div class="container">
    <div class="logo">
        <div class="icon">
            <a href="https://www.jsonwebtoken.io/" class="text">JSON Web Token</a>
        </div>
        <div class="credits">
            by
            <a href="https://stormpath.com/" target="_blank">
                <img src="./JSON Web Token (JWT)_files/stormpath-logo-white.png">
            </a>
        </div>
    </div>
    <div class="toplink">
        <div class="btn-group" role="group" aria-label="...">
            <a href="https://www.jsonwebtoken.io/" class="btn btn-link">JSON Web Token</a>
            <a href="https://stormpath.com/blog/beginners-guide-jwts-in-java" class="btn btn-link" target="_blank">JWT101</a>
        </div>
    </div>
    <div class="share">
        <a href="https://twitter.com/intent/tweet?text=Easily%20decode,%20encode,%20and%20validate%20your%20JWTs%20https%3A%2F%2Fjsonwebtoken.io%20%23jwt" target="_blank" rel="nofollow" class="btn btn-share">
            <i class="fa fa-twitter" aria-hidden="true"></i>
            Share on Twitter
        </a>
    </div>

    <div class="title">
        <h1>Encode or Decode JWTs</h1>

        <p class="description">
            Paste a JWT and decode its header, payload, and signature,
            <br>
            or provide header, payload, and signature information to generate a JWT
        </p>
    </div>
</div>

        <div class="container  well well-lg">

            <div class="row">

                <div class="col-sm-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title">JWT String  <span class="label label-danger" style="display: none;"></span></h3>
                        </div>
                        <div class="panel-body">
                            <textarea id="jwtInput" class="form-control" style="width:100%;height:150px;" placeholder="Paste JWT here"></textarea>
                        </div>
                    </div>
                </div>

            </div>

            <div class="row">

                <div class="col-sm-4">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title pull-left">Header</h3>
                            <div class="pull-right">

                            </div>
                            <div class="clearfix"></div>
                        </div>
                        <div class="panel-body">
                            <textarea id="jwtHeader" rows="5" style="width: 100%; font-size: 30px; display: none;"></textarea><div class="CodeMirror cm-s-neo CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 4px; left: 0px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" cm-not-content="true"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" cm-not-content="true"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: -15px; border-right-width: 15px; min-height: 80px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>â€‹</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 18px;">&nbsp;</div></div><div class="CodeMirror-code"><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">{</span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"typ"</span>: <span class="cm-string">"JWT"</span>,</span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"alg"</span>: <span class="cm-string">"HS256"</span></span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 15px; width: 1px; border-bottom: 0px solid transparent; top: 80px;"></div><div class="CodeMirror-gutters" style="display: none; height: 95px;"></div></div></div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-8">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title">Payload</h3>
                        </div>
                        <div class="panel-body">
                            <textarea id="jwtPayload" rows="5" style="width: 100%; font-size: 30px; display: none;"></textarea><div class="CodeMirror cm-s-neo CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 4px; left: 0px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" cm-not-content="true"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" cm-not-content="true"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: -15px; border-right-width: 15px; min-height: 152px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 0px; top: 0px; height: 18px;">&nbsp;</div></div><div class="CodeMirror-code" style=""><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">{</span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"sub"</span>: <span class="cm-string">"1234567890"</span>,</span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"name"</span>: <span class="cm-string">"John Doe"</span>,</span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"admin"</span>: <span class="cm-atom">true</span>,</span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"jti"</span>: <span class="cm-string">"78eedfce-7a12-4efa-a1f2-1eacd67a8ab9"</span>,</span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"iat"</span>: <span class="cm-number">1582100785</span>,</span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"exp"</span>: <span class="cm-number">1582104385</span></span></pre><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 15px; width: 1px; border-bottom: 0px solid transparent; top: 152px;"></div><div class="CodeMirror-gutters" style="display: none; height: 167px;"></div></div></div>
                        </div>
                    </div>
                </div>

            </div>

            <div class="row text-center">

                <div class="col-sm-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title">Signing Key &nbsp;&nbsp;
                                <span id="signatureVerified" class="label label-success">Verified</span>
                            </h3>
                        </div>
                        <div class="panel-body">
                            <input name="jwtKey" class="form-control">
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </header>




<section id="section-1">
    <div class="container feature">
        <h2 class=" animated delay-200 slideInLeft"> Code for jwtk/nJwt </h2>
        <p class="description animated delay-100 slideInLeft">
            We have generated code samples based on the input above for different languages.  <br>
            Select the library you use to switch the generated code samples, copy and paste, and that is all.
            </p><div class="row libraryButtons">
                <span class="btn btn-sm btn-default active">jwtk/nJwt</span>
                <span class="btn btn-sm btn-default">firebase/php-jwt</span>
                <span class="btn btn-sm btn-default">jwtk/jjwt</span>
                <span class="btn btn-sm btn-default">jwt-dotnet/jwt</span>
            </div>
            <div class="row code-block">
                <div class="col-sm-6">
                    <h3>Encode</h3>
                    <textarea style="width: 100%; font-size: 30px; display: none;" rows="10" id="jwtCodeEncode">var uuid = require('uuid');
var nJwt = require('njwt');

var claims = {
 "sub": "1234567890",
 "name": "John Doe",
 "admin": true,
 "jti": "78eedfce-7a12-4efa-a1f2-1eacd67a8ab9",
 "iat": 1582100785,
 "exp": 1582104385
}

var jwt = nJwt.create(claims,"secret","HS256");
var token = jwt.compact();</textarea><div class="CodeMirror cm-s-mdn-like CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 4px; left: 43px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" cm-not-content="true"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" cm-not-content="true"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 39px; margin-bottom: -15px; border-right-width: 15px; min-height: 260px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>1</div></div><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>14</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 18px;">&nbsp;</div></div><div class="CodeMirror-code" style=""><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">1</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">var</span> <span class="cm-variable">uuid</span> <span class="cm-operator">=</span> <span class="cm-variable">require</span>(<span class="cm-string">'uuid'</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">2</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">var</span> <span class="cm-variable">nJwt</span> <span class="cm-operator">=</span> <span class="cm-variable">require</span>(<span class="cm-string">'njwt'</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">3</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">â€‹</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">4</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">var</span> <span class="cm-variable">claims</span> <span class="cm-operator">=</span> {</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">5</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"sub"</span>: <span class="cm-string">"1234567890"</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">6</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"name"</span>: <span class="cm-string">"John Doe"</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">7</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"admin"</span>: <span class="cm-atom">true</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">8</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"jti"</span>: <span class="cm-string">"78eedfce-7a12-4efa-a1f2-1eacd67a8ab9"</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">9</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"iat"</span>: <span class="cm-number">1582100785</span>,</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">10</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> <span class="cm-string cm-property">"exp"</span>: <span class="cm-number">1582104385</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">11</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">12</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">â€‹</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">13</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">var</span> <span class="cm-variable">jwt</span> <span class="cm-operator">=</span> <span class="cm-variable">nJwt</span>.<span class="cm-property">create</span>(<span class="cm-variable">claims</span>,<span class="cm-string">"secret"</span>,<span class="cm-string">"HS256"</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">14</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">var</span> <span class="cm-variable">token</span> <span class="cm-operator">=</span> <span class="cm-variable">jwt</span>.<span class="cm-property">compact</span>();</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 15px; width: 1px; border-bottom: 0px solid transparent; top: 260px;"></div><div class="CodeMirror-gutters" style="height: 275px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 32px;"></div></div></div></div>
                </div>
                <div class="col-sm-6">
                    <h3>Decode</h3>
                    <textarea style="width: 100%; font-size: 30px; display: none;" rows="10" id="jwtCodeDecode">var nJwt = require('njwt');

nJwt.verify("eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImp0aSI6Ijc4ZWVkZmNlLTdhMTItNGVmYS1hMWYyLTFlYWNkNjdhOGFiOSIsImlhdCI6MTU4MjEwMDc4NSwiZXhwIjoxNTgyMTA0Mzg1fQ.0ngAaykfcy-6lwcYfa99oFXoztov4hWtACSDlEMiaLE","secret", 'HS512');</textarea><div class="CodeMirror cm-s-mdn-like CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 4px; left: 43px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" cm-not-content="true"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" cm-not-content="true"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 39px; margin-bottom: -15px; border-right-width: 15px; min-height: 116px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>1</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 18px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">1</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">var</span> <span class="cm-variable">nJwt</span> <span class="cm-operator">=</span> <span class="cm-variable">require</span>(<span class="cm-string">'njwt'</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">2</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">â€‹</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -39px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 6px; width: 21px;">3</div></div><pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-variable">nJwt</span>.<span class="cm-property">verify</span>(<span class="cm-string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImp0aSI6Ijc4ZWVkZmNlLTdhMTItNGVmYS1hMWYyLTFlYWNkNjdhOGFiOSIsImlhdCI6MTU4MjEwMDc4NSwiZXhwIjoxNTgyMTA0Mzg1fQ.0ngAaykfcy-6lwcYfa99oFXoztov4hWtACSDlEMiaLE"</span>,<span class="cm-string">"secret"</span>, <span class="cm-string">'HS512'</span>);</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 15px; width: 1px; border-bottom: 0px solid transparent; top: 116px;"></div><div class="CodeMirror-gutters" style="height: 131px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 32px;"></div></div></div></div>
                </div>
            </div>


        <p></p>
    </div>
</section>

<section id="section-2" class="section-bg">
    <div class="container feature markdown-body">
        <h2>Readme</h2>
        <p class="description">
            <a target="_blank" href="https://github.com/jwtk/njwt"><i class="fa-github fa"></i> View Library On Github</a>

            </p><div class="readme"><h1 id="njwt-jwts-for-node-js">nJwt - JWTs for Node.js</h1>
<p>"Nin-Jot" /ËˆnÉªn.dÊ’É‘t/</p>
<p><a href="https://npmjs.org/package/njwt"><img src="./JSON Web Token (JWT)_files/njwt.svg" alt="NPM Version"></a>
<a href="https://npmjs.org/package/njwt"><img src="./JSON Web Token (JWT)_files/njwt(1).svg" alt="NPM Downloads"></a>
<a href="https://travis-ci.org/jwtk/njwt"><img src="./JSON Web Token (JWT)_files/njwt(2).svg" alt="Build Status"></a>
<a href="https://coveralls.io/r/jwtk/njwt?branch=master"><img src="./JSON Web Token (JWT)_files/badge.svg" alt="Coverage Status"></a></p>
<p>nJwt is the cleanest JSON Web Token (JWT) library for Node.js developers. nJwt
removes all the complexities around JWTs, and gives you a simple, intuitive API,
that allows you to securely make and use JWTs in your applications without
needing to read <a href="http://www.rfc-editor.org/rfc/rfc7519.txt">rfc7519</a>.</p>
<h3 id="creating-secure-signed-jwts">Creating Secure, Signed JWTs</h3>
<p>JWTs expect <em>"claims"</em>, they are a set of assertions about who the user is and what
they can do.  The most common use case for JWTs is to declare the "scope" of the
access token, which is a list of things that the holder of the token (the user)
is allowed to do.</p>
<p>JWTs should be signed, otherwise you can't verify that they were created by you.
Our library expects that you give us a highly random signing key for
signing tokens.  We use the <code>HS256</code> algorithm by default, and the byte length of
the signing key should match that of the signing algorithm, to ensure cryptographic
security.</p>
<p>While the library will accept strings for signing keys, we suggest you use a
Buffer instead.  Using buffers makes it easy to do other operations, like
convert your signing key to Base64URL encoding, if you need to transmit your
key to other systems.</p>
<p>While the claims are completely up to you, we do recommend setting the "Subject"
and "Audience" fields.</p>
<p>JWTs commonly contain the <code>iat</code>, <code>nbf</code> and <code>exp</code> claims, which declare the time the
token was issued, activation date and when it expires.  Our library will create these for you (except nbf),
with a default expiration of 1 hour. <code>nbf</code> is optional.</p>
<p>Here is a simple example that shows you how to create a secure byte string for
your signing key, and then use that key to sign a JWT with some claims that you
provide:</p>
<pre><code class="lang-javascript"><span class="hljs-built_in">var</span> nJwt = <span class="hljs-keyword">require</span>(<span class="hljs-string">'njwt'</span>);
<span class="hljs-built_in">var</span> secureRandom = <span class="hljs-keyword">require</span>(<span class="hljs-string">'secure-random'</span>);

<span class="hljs-built_in">var</span> signingKey = secureRandom(<span class="hljs-number">256</span>, {<span class="hljs-keyword">type</span>: <span class="hljs-string">'Buffer'</span>}); <span class="hljs-comment">// Create a highly random byte array of 256 bytes</span>

<span class="hljs-built_in">var</span> claims = {
  iss: <span class="hljs-string">"http://myapp.com/"</span>,  <span class="hljs-comment">// The URL of your service</span>
  sub: <span class="hljs-string">"users/user1234"</span>,    <span class="hljs-comment">// The UID of the user in your system</span>
  scope: <span class="hljs-string">"self, admins"</span>
}

<span class="hljs-built_in">var</span> jwt = nJwt.create(claims,signingKey);
</code></pre>
<p>Once you have created the JWT, you can look at its internal structure by
logging it to the console.  This is our internal representation of the token,
this is not what you'll send to your end user:</p>
<pre><code class="lang-javascript">console<span class="hljs-selector-class">.log</span>(jwt);
</code></pre>
<pre><code class="lang-json">{
  <span class="hljs-attr">"header"</span>: {
    <span class="hljs-attr">"typ"</span>: <span class="hljs-string">"JWT"</span>,
    <span class="hljs-attr">"alg"</span>: <span class="hljs-string">"HS256"</span>
  },
  <span class="hljs-attr">"body"</span>: {
    <span class="hljs-attr">"jti"</span>: <span class="hljs-string">"c84280e6-0021-4e69-ad76-7a3fdd3d4ede"</span>,
    <span class="hljs-attr">"iat"</span>: <span class="hljs-number">1434660338</span>,
    <span class="hljs-attr">"exp"</span>: <span class="hljs-number">1434663938</span>,
    <span class="hljs-attr">"nbf"</span>: <span class="hljs-number">1434663938</span>,
    <span class="hljs-attr">"iss"</span>: <span class="hljs-string">"http://myapp.com/"</span>,
    <span class="hljs-attr">"sub"</span>: <span class="hljs-string">"users/user1234"</span>,
    <span class="hljs-attr">"scope"</span>: [<span class="hljs-string">"self"</span>,<span class="hljs-string">"admins"</span>]
  }
}
</code></pre>
<p>Our library has added the <code>jti</code> field for you, this is a random ID that will be
unique for every token.  You can use this if you want to create a database of
tokens that have been issued to the user.</p>
<p>When you are ready to give the token to your end user, you need to compact it.
This will turn it into a Base64 URL encoded string, making it safe to pass
around in browsers without any unexpected formatting applied to it.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> <span class="hljs-keyword">token</span> = jwt.compact();
console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">token</span>);
</code></pre>
<pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9<span class="hljs-selector-class">.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzQ0Nzk4ODN9</span><span class="hljs-selector-class">.HQyx15jWm1upqsrKSf89X_iP0sg7N46a9pqBVGPMYdiqZeuU_ZZOdU-zizHJoIHMIJxtEWzpSMaVubJW0AJsTqjqQf6GoJ4cmFAfmfUFXmMC4Xv5oc4UqvGizpoLjfZedd834PcwbS-WskZcL4pVNmBIGRtDXkoU1j2X1P5M_sNJ9lYZ5vITyqe4MYJovQzNdQziUNhcMI5wkXncV7XzGInBeQsPquASWVG4gb3Y--k1P3xWA4Df3rKeEQBbInDKXczvDpfIlTojx4Ch8OM8vXWWNxW-mIQrV31wRrS9XtNoig7irx8N0MzokiYKrQ8WP_ezPicHvVPIHhz-InOw</span>
</code></pre><p>This is the JWT that the client application will retain, and use for authentication.</p>
<p>Your server application will also need to persist the signing key that was used
to sign the token, and when the client tries to use this token for
authentication, you will need to use the same signing key for verification.</p>
<p>The Buffer needs to be converted to a string so that it can be persisted in a
database, and you can do so like this:</p>
<pre><code><span class="hljs-keyword">var</span> base64SigningKey = signingKey.toString(<span class="hljs-string">'base64'</span>);
</code></pre><p>If you are going to use multiple signing keys, it is common practice to create a
random ID which identifies the key, and store that ID with the key in your
database.  When you create JWTs, set the <code>kid</code> field of the header to be this ID.
Then when verifying JWTs, this <code>kid</code> field will tell you which signing key should
be used for verification.</p>
<h3 id="verifying-signed-jwts">Verifying Signed JWTs</h3>
<p>The end user will use their JWT to authenticate themselves with your service.
When they present the JWT, you want to check the token to ensure that it's valid.
This library does the following checks when you call the <code>verify</code> method:</p>
<ul>
<li>It was created by you (by verifying the signature, using the secret signing key)</li>
<li>It hasn't been modified (e.g. some claims were maliciously added)</li>
<li>It hasn't expired</li>
<li>It is active</li>
</ul>
<p>To verify a previously issued token, use the <code>verify</code> method.  You must give it
the same signing key that you are using to create tokens:</p>
<pre><code class="lang-javascript"><span class="hljs-selector-tag">nJwt</span><span class="hljs-selector-class">.verify</span>(token,signingKey,function(err,verifiedJwt){
  <span class="hljs-selector-tag">if</span>(err){
    console<span class="hljs-selector-class">.log</span>(err); <span class="hljs-comment">// Token has expired, has been tampered with, etc</span>
  }else{
    console<span class="hljs-selector-class">.log</span>(verifiedJwt); <span class="hljs-comment">// Will contain the header and body</span>
  }
});
</code></pre>
<p>If validation fails you can look at <code>err.message</code> to understand the problem.  If
the header and body of the JWT were parse-able (not not verifiable) they will
be provided as objects at <code>err.parsedHeader</code> and <code>err.parsedBody</code>.</p>
<p>You can also use verify synchronously, in which case the errors will be thrown:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">try</span>{
  verifiedJwt = nJwt.verify(token,signingKey);
}<span class="hljs-keyword">catch</span>(e){
  console.log(e);
}
</code></pre>
<h3 id="changing-the-algorithm">Changing the algorithm</h3>
<p>If you want to change the algorithm from the default <code>HS256</code>, you can do so
by passing it as a third argument to the <code>create</code> or <code>verify</code> methods:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> jwt = nJwt.create(claims,signingKey,<span class="hljs-string">'HS512'</span>);
</code></pre>
<pre><code class="lang-javascript">nJwt<span class="hljs-selector-class">.verify</span>(token,signingKey, <span class="hljs-string">'HS512'</span>);
</code></pre>
<p>See the table below for a list of supported algorithms.  If using RSA key pairs,
the public key will be the signing key parameter.</p>
<h3 id="customizing-the-token">Customizing the token</h3>
<p>While we've chosen secure, sensible defaults for you, you may need to change it
up.</p>
<h4 id="claims">Claims</h4>
<p>If you need to provide custom claims, simply supply them to the <code>create</code> method
or add them manually to the claims body after the JWT is created.  These two
examples create the same claims body:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> claims = {
  scope: <span class="hljs-string">'admins'</span>
}

<span class="hljs-keyword">var</span> jwt = nJwt.create(claims,secret);

jwt.body.scope = <span class="hljs-string">'admins'</span>;

jwt.setClaim(<span class="hljs-string">'otherClaim'</span>, <span class="hljs-string">'value'</span>);

`
</code></pre>
<h4 id="headers">Headers</h4>
<p>You can manually modify headers object, or use the <code>setHeader()</code> method:</p>
<pre><code class="lang-javascript">var <span class="hljs-keyword">jwt </span>= nJwt.create({}, keyMap.kid_a)<span class="hljs-comment">;</span>

<span class="hljs-keyword">jwt.headers.myClaim </span>= <span class="hljs-string">'foo'</span><span class="hljs-comment">;</span>

<span class="hljs-keyword">jwt.setHeader('kid', </span><span class="hljs-string">'kid_a'</span>)<span class="hljs-comment">;</span>
</code></pre>
<h3 id="using-a-key-resolver">Using a key resolver</h3>
<p>If your application is using multiple signing keys, nJwt provides a handy little feature that allows you to resolve which signing key should be used to verify a token.</p>
<p>To do this, you first need to manually create a verifier instance, using <code>nJwt.createVerifier()</code>, and then provide your key resolution function to the <code>withKeyResolver()</code> method:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> keyMap = {
  kid_a: <span class="hljs-string">'&lt;secure signing key&gt;'</span>,
  kid_b: <span class="hljs-string">'&lt;secure signing key&gt;'</span>
};

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myKeyResolver</span>(<span class="hljs-params">kid, cb</span>) </span>{
  <span class="hljs-keyword">var</span> key = keyMap[kid];

  <span class="hljs-keyword">if</span> (key) {
    <span class="hljs-keyword">return</span> cb(<span class="hljs-literal">null</span>, key);
  }

  cb(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Unknown kid'</span>));
}

<span class="hljs-keyword">var</span> tokenA = nJwt.create({}, keyMap.kid_a).setHeader(<span class="hljs-string">'kid'</span>, <span class="hljs-string">'kid_a'</span>).compact();

<span class="hljs-keyword">var</span> tokenB = nJwt.create({}, <span class="hljs-string">'foo'</span>).setHeader(<span class="hljs-string">'kid'</span>, <span class="hljs-string">'bar'</span>).compact();

<span class="hljs-keyword">var</span> verifier = nJwt.createVerifier().withKeyResolver(myKeyResolver);

<span class="hljs-comment">// synchronously</span>

<span class="hljs-keyword">try</span> {

  <span class="hljs-comment">// This will pass and print the result</span>

  <span class="hljs-keyword">var</span> parsedJwt = verifier.verify(tokenA);
  <span class="hljs-built_in">console</span>.log(parsedJwt);

} <span class="hljs-keyword">catch</span>(e) {
  <span class="hljs-built_in">console</span>.log(e);
}

<span class="hljs-comment">// asynchronously</span>

verifier.verify(tokenB, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, verifiedJwt</span>) </span>{
  <span class="hljs-keyword">if</span> (err) {
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);  <span class="hljs-comment">// This error with "'Error while resolving signing key for kid "bar"'"</span>
  }

  <span class="hljs-built_in">console</span>.log(verifiedJwt);
});
</code></pre>
<h4 id="expiration-claim">Expiration Claim</h4>
<p>A convenience method is supplied for modifying the <code>exp</code> claim.  You can modify
the <code>exp</code> claim by passing a <code>Date</code> object, or a millisecond value, to the
<code>setExpiration</code> method:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> jwt = nJwt.create(claims,secret);

jwt.setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2015-07-01'</span>)); <span class="hljs-comment">// A specific date</span>
jwt.setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() + (<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>)); <span class="hljs-comment">// One hour from now</span>
jwt.setExpiration(); <span class="hljs-comment">// Remove the exp claim</span>
</code></pre>
<h4 id="notbefore-claim">NotBefore Claim</h4>
<p>A convenience method is supplied for modifying the <code>nbf</code> claim.  You can modify
the <code>nbf</code> claim by passing a <code>Date</code> object, or a millisecond value, to the
<code>setNotBefore</code> method:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> jwt = nJwt.create(claims,secret);

jwt.setNotBefore(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">'2015-07-01'</span>)); <span class="hljs-comment">// token is active from this date</span>
jwt.setNotBefore(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() + (<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>)); <span class="hljs-comment">// One hour from now</span>
jwt.setNotBefore(); <span class="hljs-comment">// Remove the exp claim</span>
</code></pre>
<h2 id="supported-algorithms">Supported Algorithms</h2>
<table>
<thead>
<tr>
<th>"alg" Value</th>
<th>Algorithm used</th>
</tr>
</thead>
<tbody>
<tr>
<td>HS256</td>
<td>HMAC using SHA-256 hash algorithm</td>
</tr>
<tr>
<td>HS384</td>
<td>HMAC using SHA-384 hash algorithm</td>
</tr>
<tr>
<td>HS512</td>
<td>HMAC using SHA-512 hash algorithm</td>
</tr>
<tr>
<td>RS256</td>
<td>RSASSA using SHA-256 hash algorithm</td>
</tr>
<tr>
<td>RS384</td>
<td>RSASSA using SHA-384 hash algorithm</td>
</tr>
<tr>
<td>RS512</td>
<td>RSASSA using SHA-512 hash algorithm</td>
</tr>
<tr>
<td>ES256</td>
<td>ECDSA using P-256 curve and SHA-256 hash algorithm</td>
</tr>
<tr>
<td>ES384</td>
<td>ECDSA using P-384 curve and SHA-384 hash algorithm</td>
</tr>
<tr>
<td>ES512</td>
<td>ECDSA using P-521 curve and SHA-512 hash algorithm</td>
</tr>
<tr>
<td>none</td>
<td>No digital signature or MAC value included</td>
</tr>
</tbody>
</table>
<h2 id="unsupported-features">Unsupported features</h2>
<p>The following features are not yet supported by this library:</p>
<ul>
<li>Encrypting the JWT (aka JWE)</li>
</ul>
</div>
        <p></p>
    </div>
</section>


<footer>

    <div class="container">
        <div class="copyright">
            Â© 2016 Stormpath
        </div>
        <div class="social">
            <a href="https://github.com/stormpath/jsonwebtoken.io/issues" target="_blank" rel="nofollow" class="btn btn-alt">
                <i class="fa fa-github" aria-hidden="true"></i>
                Have a Suggestion?
            </a>
        </div>
        <div class="love">
            <a href="https://stormpath.com/" target="_blank">
                <span>Made with</span><i class="fa fa-heart heart" aria-hidden="true"></i><span>by Stormpath</span>
            </a>
        </div>
    </div>
</footer>
</div>

<script src="./JSON Web Token (JWT)_files/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
<script src="./JSON Web Token (JWT)_files/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
<script type="text/javascript" src="./JSON Web Token (JWT)_files/vue.js"></script>
<script type="text/javascript" src="./JSON Web Token (JWT)_files/vue-resource.js"></script>
<script type="text/javascript" src="./JSON Web Token (JWT)_files/home.js"></script>

<script>
    function animateSection(nr) {
        var sectionId = 'section-' + nr;
        var animation = nr % 2 ? 'slideInLeft' : 'slideInRight';

        var h2 = document.querySelector('#' + sectionId + ' > .feature > h2');
        var p = document.querySelector('#' + sectionId + ' > .feature > p');
//        var devtools = document.querySelector('#' + sectionId + ' > .feature > p > div');

        if (h2.className.indexOf('animated') === -1) {
            h2.className = h2.className + ' animated delay-200 ' + animation;
            p.className = p.className + ' animated delay-100 ' + animation;
//            devtools.className = devtools.className + ' animated ' + animation;
        }
    }

    function scrollHandler() {
        var buttons = document.querySelectorAll('.btn-install');

        if (document.body.scrollTop > 630 || document.documentElement.scrollTop > 630) {
            for (var i = 0; i < buttons.length; ++i) {
                buttons[i].classList.remove('hidden');
                buttons[i].classList.add('visible');
            }
        } else {
            for (var i = 0; i < buttons.length; ++i) {
                buttons[i].classList.remove('visible');
                buttons[i].classList.add('hidden');
            }
        }

        if (document.body.scrollTop + window.innerHeight > 1000 || document.documentElement.scrollTop + window.innerHeight > 1000) {
            setTimeout(animateSection.bind(null, 1), 100);
        }

        if (document.body.scrollTop + window.innerHeight > 1500 || document.documentElement.scrollTop + window.innerHeight > 1500) {
            setTimeout(animateSection.bind(null, 2), 100);
        }


    }

    window.onscroll = scrollHandler;
    window.onresize = scrollHandler;

    window.onload = function () {
        setTimeout(scrollHandler, 100);
    };
</script>



</body></html>
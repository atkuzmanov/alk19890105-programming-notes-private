// Generated by CoffeeScript 1.10.0
(function() {
  var fixLocalLinks;

  fixLocalLinks = function(root) {
    return $('a', root).off("click").click(function(ev) {
      if ($(this).attr('href').match('^#')) {
        window.deck.goToHash($(this).attr('href'));
        return ev.preventDefault();
      }
    });
  };

  $('#deck-container').on('deck-becameCurrent', function() {
    $('.deck-help').off();
    return $('.deck-help').click(function() {
      return $('.deck-help-panel').toggleClass('deck-help-visible');
    });
  });

  $('.deck-toc-button').click(function() {
    return $('.deck-toc-panel').toggleClass('show');
  });

  fixLocalLinks('.deck-toc-panel');

  $(window).on('touchstart', function(event) {
    return window.touchParser.touchstart(event);
  });

  $(window).on('touchend', function(event) {
    return window.touchParser.touchend(event);
  });

  $(window).on('touchTap', function(event) {
    return window.touchPanel.tap(event);
  });

  window.onpopstate = function(ev) {
    return window.deck.popStateHandler(ev);
  };

  $(document).ready(function() {
    return window.rescaleViewport();
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var HighlightPanel, HighlightSequence,
    slice = [].slice;

  HighlightPanel = (function() {
    function HighlightPanel(id, slideID, initialPositionClass) {
      this.id = id;
      this.slideID = slideID;
      this.position = initialPositionClass;
      HighlightPanel.panels[this.id] = this;
      $('#' + this.slideID).append("<div id = " + this.id + " class = 'highlight-panel " + this.position + "'/>");
      this.element = $('#' + id);
    }

    HighlightPanel.panels = {};

    HighlightPanel.clearAll = function() {
      return $('#deck-container .highlight-panel').remove();
    };

    HighlightPanel.get = function(id) {
      return this.panels[id];
    };

    HighlightPanel.prototype.move = function(cssClass) {
      this.element.removeClass(this.position);
      this.position = cssClass;
      return this.element.addClass(this.position);
    };

    HighlightPanel.prototype.fadeOut = function() {
      return this.element.fadeOut();
    };

    HighlightPanel.prototype.fadeIn = function() {
      return this.element.fadeIn();
    };

    HighlightPanel.prototype.hide = function() {
      return this.element.hide();
    };

    HighlightPanel.prototype.show = function() {
      return this.element.show();
    };

    HighlightPanel.prototype.remove = function() {
      this.element.remove();
      return HighlightPanel.panels[this.id] = void 0;
    };

    return HighlightPanel;

  })();

  window.HighlightPanel = HighlightPanel;

  HighlightSequence = (function() {
    HighlightSequence.prototype.currentState = void 0;

    HighlightSequence.prototype.panel = void 0;

    function HighlightSequence() {
      var slideID, states;
      slideID = arguments[0], states = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.slideID = slideID;
      this.states = states;
    }

    HighlightSequence.prototype.description_selector = function() {
      return '#' + this.slideID + ' .highlight-description.' + this.currentState;
    };

    HighlightSequence.prototype.move = function(newState) {
      $(this.description_selector()).fadeOut();
      this.currentState = newState;
      this.panel.move(this.currentState);
      return $(this.description_selector()).fadeIn();
    };

    HighlightSequence.prototype.setup = function(state) {
      var ref;
      if ((ref = this.panel) != null) {
        ref.remove();
      }
      this.panel = new HighlightPanel(this.slideID + '-hp', this.slideID, "");
      this.hide();
      this.currentState = state;
      return this.panel.move(state);
    };

    HighlightSequence.prototype.fadeIn = function() {
      $(this.description_selector()).fadeIn();
      return this.panel.fadeIn();
    };

    HighlightSequence.prototype.fadeOut = function() {
      $(this.description_selector()).fadeOut();
      return this.panel.fadeOut();
    };

    HighlightSequence.prototype.show = function() {
      $(this.description_selector()).show();
      return this.panel.show();
    };

    HighlightSequence.prototype.hide = function() {
      var ref;
      $('#' + this.slideID + ' .highlight-description').hide();
      return (ref = this.panel) != null ? ref.hide() : void 0;
    };

    HighlightSequence.prototype.setupAtStart = function() {
      this.setup(this.states[0]);
      return this;
    };

    HighlightSequence.prototype.setupAtEnd = function() {
      this.setup(this.states[this.states.length - 1]);
      return this;
    };

    HighlightSequence.prototype.state_index = function() {
      return this.states.indexOf(this.currentState);
    };

    HighlightSequence.prototype.forwards = function() {
      return this.move(this.states[this.state_index() + 1]);
    };

    HighlightSequence.prototype.backwards = function() {
      return this.move(this.states[this.state_index() - 1]);
    };

    HighlightSequence.prototype.setup_forwards = function() {};

    HighlightSequence.prototype.setup_backwards = function() {};

    return HighlightSequence;

  })();

  window.HighlightSequence = HighlightSequence;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var BuildCollection, Infodeck,
    slice = [].slice;

  Infodeck = (function() {
    function Infodeck(data) {
      this.contents = data != null ? data.contents : void 0;
      this._data = {};
      this._data.builds = {};
      this.loadingPrevious = LoadingSlide.newResolved();
      this.loadingNext = LoadingSlide.newResolved();
      this.loadingCurrent = LoadingSlide.newResolved();
    }

    Infodeck.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return false;
    };

    Infodeck.prototype.resolvedPromise = function() {
      return $.Deferred().resolve();
    };

    Infodeck.prototype.load = function() {
      var ix;
      this.initializeUI();
      ix = this.indexForHash(this.location().hash);
      if (ix) {
        return this.showSlideIndex(ix);
      } else {
        return this.goToFirst();
      }
    };

    Infodeck.prototype.loading = function() {
      return $.when(this.loadingCurrent, this.loadingNext, this.loadingPrevious);
    };

    Infodeck.prototype.loadCurrentSlide = function() {
      this.loadingCurrent = new LoadingSlide(this.currentURI());
      if ($('#deck-container slide').length > 0) {
        console.warn("container should have no slides");
      }
      this.loadingCurrent.domLoading.done((function(_this) {
        return function(data) {
          var slide;
          slide = $(data);
          _this.attachSlide(slide, 'current', _this.loadingCurrent);
          _this.removeLoadingMessage();
          if ('pending' === _this.loadingCurrent.state()) {
            return _this.busy(true);
          }
        };
      })(this));
      return this.loadingCurrent.domLoading.fail((function(_this) {
        return function() {
          return console.log("error reading current slide " + (_this.currentURI()));
        };
      })(this));
    };

    Infodeck.prototype.removeLoadingMessage = function() {
      return $('.deck-loading-message').remove();
    };

    Infodeck.prototype.attachSlide = function(data, positionClass, completing) {
      var slide;
      slide = $(data);
      if (this.expectedID(positionClass) !== slide.attr('id')) {
        console.log("mismatch attach");
        return;
      }
      if ($(".slide." + positionClass).length > 0) {
        if (slide.attr('id') !== $(".slide." + positionClass).first.id) {
          console.warn("trying to attach non duplicate to same position");
        } else {
          return;
        }
      }
      slide.addClass(positionClass);
      $('#deck-container').append(slide);
      this.runSetupBuild(slide, positionClass);
      completing.registerImages($('img', slide));
      completing.imagesLoading.done((function(_this) {
        return function() {
          _this.busy(false);
          return _this.log("resolved " + positionClass);
        };
      })(this));
      return this.log("done attach " + positionClass);
    };

    Infodeck.prototype.expectedID = function(positionClass) {
      switch (positionClass) {
        case 'current':
          return this.idForURI(this.currentURI());
        case 'next':
          return this.idForURI(this.nextURI());
        case 'previous':
          return this.idForURI(this.previousURI());
      }
    };

    Infodeck.prototype.runSetupBuild = function(slide, positionClass) {
      var ref, ref1, ref2, ref3;
      switch (positionClass) {
        case 'current':
        case 'next':
          return (ref = this.buildsFor(slide)) != null ? (ref1 = ref.setupBuild) != null ? ref1.forwards() : void 0 : void 0;
        case 'previous':
          return (ref2 = this.buildsFor(slide)) != null ? (ref3 = ref2.setupBuild) != null ? ref3.backwards() : void 0 : void 0;
        default:
          return console.warn("unknown positionClass: " + positionClass);
      }
    };

    Infodeck.prototype.loadNextSlide = function() {
      if (this.currentIsLast()) {
        return this.loadingNext = window.LoadingSlide.newResolved();
      } else {
        this.loadingNext = new LoadingSlide(this.nextURI());
        return this.loadingNext.domLoading.done((function(_this) {
          return function(data) {
            return _this.attachSlide(data, 'next', _this.loadingNext);
          };
        })(this));
      }
    };

    Infodeck.prototype.loadPreviousSlide = function() {
      if (this.currentIsFirst()) {
        return this.loadingPrevious = window.LoadingSlide.newResolved();
      } else {
        this.loadingPrevious = new LoadingSlide(this.previousURI());
        return this.loadingPrevious.domLoading.done((function(_this) {
          return function(data) {
            return _this.attachSlide(data, 'previous', _this.loadingPrevious);
          };
        })(this));
      }
    };

    Infodeck.prototype.idForURI = function(uri) {
      return uri.slice(0, -5);
    };

    Infodeck.prototype.nextURI = function() {
      return this.contents[this.slideIndex + 1]['uri'];
    };

    Infodeck.prototype.previousURI = function() {
      return this.contents[this.slideIndex - 1]['uri'];
    };

    Infodeck.prototype.currentURI = function() {
      return this.contents[this.slideIndex]['uri'];
    };

    Infodeck.prototype.permalink = function() {
      return '#' + this.currentSlide().attr('id');
    };

    Infodeck.prototype.isQuiet = function() {
      return this.loadingCurrent.state() !== 'pending' && this.loadingNext.state() !== 'pending' && this.loadingPrevious.state() !== 'pending';
    };

    Infodeck.prototype.location = function() {
      return window.location;
    };

    Infodeck.prototype.indexForHash = function(hash) {
      var entry, i;
      if (hash) {
        return ((function() {
          var j, len, ref, results;
          ref = this.contents;
          results = [];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            entry = ref[i];
            if (entry['uri'] === this.uriForHash(hash)) {
              results.push(i);
            }
          }
          return results;
        }).call(this))[0];
      } else {
        return 0;
      }
    };

    Infodeck.prototype.uriForHash = function(hash) {
      return hash.slice(1) + ".html";
    };

    Infodeck.prototype.currentIsLast = function() {
      return this.slideIndex + 1 === this.contents.length;
    };

    Infodeck.prototype.currentIsFirst = function() {
      return this.slideIndex === 0;
    };

    Infodeck.prototype.nextSlide = function() {
      return $('.slide.next').first();
    };

    Infodeck.prototype.currentSlide = function() {
      return $('.slide.current').first();
    };

    Infodeck.prototype.previousSlide = function() {
      return $('.slide.previous').first();
    };

    Infodeck.prototype.length = function() {
      return this.contents.length;
    };

    Infodeck.prototype.currentSlideNumber = function() {
      return this.slideIndex + 1;
    };

    Infodeck.prototype.dropCurtain = function() {
      $('#deck-container').append("<div class = 'deck-curtain'/>");
      return $('.deck-curtain').addClass('dropped');
    };

    Infodeck.prototype.raiseCurtain = function(func) {
      $('.deck-curtain').removeClass('dropped');
      return $('.deck-curtain').on("transitionend webkitTransitionEnd oTransitionEnd", function() {
        $('.deck-curtain').remove();
        return func();
      });
    };

    Infodeck.prototype.buildsFor = function(aSlide) {
      return this._data.builds[aSlide.attr('id')];
    };

    Infodeck.prototype.showSlideIndex = function(ix) {
      $('.init').hide();
      this.dropCurtain();
      $('#deck-container .slide').remove();
      this.slideIndex = ix;
      this._data.buildIndex = 0;
      this.hideTableOfContents();
      this.loadCurrentSlide();
      this.loadNextSlide();
      this.loadPreviousSlide();
      return this.loadingCurrent.done((function(_this) {
        return function() {
          _this.saveHistory();
          return _this.raiseCurtain(function() {
            var ref, ref1;
            _this.currentSlide().trigger('deck-becameCurrent');
            return (ref = _this.buildsFor(_this.currentSlide())) != null ? (ref1 = ref.immediateBuild) != null ? ref1.forwards() : void 0 : void 0;
          });
        };
      })(this));
    };

    Infodeck.prototype.showNextSlide = function() {
      var wasCurrent, wasNext;
      this.trimAddressBar();
      this.loadingPrevious.reject();
      if (!this.isQuiet()) {
        console.warn("show next slide while loads are pending");
      }
      wasNext = this.nextSlide();
      wasCurrent = this.currentSlide();
      this.loadingPrevious.domLoading.always(function() {
        return $('.slide.previous').remove();
      });
      this.slideIndex += 1;
      this._data.buildIndex = 0;
      wasNext.removeClass('next').addClass('current');
      wasCurrent.removeClass('current').addClass('previous');
      this.log("-> " + this.currentURI());
      $('.current').on("transitionend webkitTransitionEnd oTransitionEnd", (function(_this) {
        return function() {
          var ref, ref1;
          _this.currentSlide().trigger('deck-becameCurrent');
          return (ref = _this.buildsFor(_this.currentSlide())) != null ? (ref1 = ref.immediateBuild) != null ? ref1.forwards() : void 0 : void 0;
        };
      })(this));
      this.saveHistory();
      return this.loadNextSlide();
    };

    Infodeck.prototype.showPreviousSlide = function() {
      var ref, ref1, ref2, wasCurrent, wasPrevious;
      this.trimAddressBar();
      this.loadingNext.reject();
      if (!this.isQuiet()) {
        console.warn("show previous slide while loads are pending");
      }
      wasCurrent = this.currentSlide();
      wasPrevious = this.previousSlide();
      if ((ref = this.buildsFor(this.currentSlide())) != null) {
        if ((ref1 = ref.immediateBuild) != null) {
          ref1.backwards();
        }
      }
      this.loadingNext.domLoading.always(function() {
        return $('.slide.next').remove();
      });
      this.slideIndex -= 1;
      this._data.buildIndex = ((ref2 = this.buildsFor(this.previousSlide())) != null ? ref2.length() : void 0) || 0;
      wasPrevious.removeClass('previous').addClass('current');
      wasCurrent.removeClass('current').addClass('next');
      this.currentSlide().trigger('deck-becameCurrent');
      this.log("<- " + this.currentURI());
      this.saveHistory();
      return this.loadPreviousSlide();
    };

    Infodeck.prototype.saveHistory = function() {
      var id, location_hash;
      id = this.currentSlide().attr('id');
      location_hash = this.slideIndex === 0 ? "" : "#" + id;
      return window.history.replaceState({
        id: id
      }, id, location_hash);
    };

    Infodeck.prototype.baseLocation = function() {
      return window.location.protocol + '//' + window.location.host + window.location.pathname;
    };

    Infodeck.prototype.trimAddressBar = function() {
      if (window.location.hash === "") {
        return;
      }
      return window.history.replaceState('', '', this.baseLocation());
    };

    Infodeck.prototype.busy = function(bool) {
      $('.slide.current').spin(bool);
      return this._isBusy = bool;
    };

    Infodeck.prototype.requestNextSlide = function() {
      if (this.currentIsLast()) {
        return;
      }
      if (this._isBusy) {
        return;
      }
      this.log("next requested " + this.nextURI());
      if (this.loadingNext.state() === "pending") {
        this.busy(true);
      }
      return this.loadingNext.always((function(_this) {
        return function() {
          _this.busy(false);
          return _this.showNextSlide();
        };
      })(this));
    };

    Infodeck.prototype.requestPreviousSlide = function() {
      if (this.currentIsFirst()) {
        return;
      }
      if (this._isBusy) {
        return;
      }
      this.log("prev requested " + this.previousURI());
      if (this.loadingPrevious.state() === "pending") {
        this.busy(true);
      }
      return this.loadingPrevious.always((function(_this) {
        return function() {
          _this.busy(false);
          return _this.showPreviousSlide();
        };
      })(this));
    };

    Infodeck.prototype.goToSlide = function(num) {
      this.trimAddressBar();
      this.log("requested go to slide " + num);
      if (num > this.length()) {
        return this.goToLast();
      } else if (num < 1) {
        return this.goToFirst();
      } else {
        if (this.loading().state() === "pending") {
          this.busy(true);
        }
        return this.loading().always((function(_this) {
          return function() {
            _this.busy(false);
            return _this.showSlideIndex(num - 1);
          };
        })(this));
      }
    };

    Infodeck.prototype.goToHash = function(hash) {
      return this.goToSlide(this.indexForHash(hash) + 1);
    };

    Infodeck.prototype.goToFirst = function() {
      return this.goToSlide(1);
    };

    Infodeck.prototype.goToLast = function() {
      return this.goToSlide(this.length());
    };

    Infodeck.prototype.toggleTableOfContents = function() {
      return $('.deck-toc-panel').toggleClass('show');
    };

    Infodeck.prototype.hideTableOfContents = function() {
      return $('.deck-toc-panel').removeClass('show');
    };

    Infodeck.prototype.$goToField = function() {
      return $('.deck-goto-panel .deck-goto-input');
    };

    Infodeck.prototype.$goToPanel = function() {
      return $('.deck-goto-panel');
    };

    Infodeck.prototype.toggleGoToPanel = function() {
      this.$goToPanel().toggleClass('show');
      if (this.$goToPanel().hasClass('show')) {
        return this.$goToField().focus();
      } else {
        this.$goToField().blur();
        return this.$goToField().val('');
      }
    };

    Infodeck.prototype.initializeGoToPanel = function() {
      this.$goToField().keyup((function(_this) {
        return function(event) {
          _this.$goToField().val(_this.$goToField().val().replace(/[^0-9]/g, ''));
          if (event.which === 71) {
            _this.toggleGoToPanel();
          }
          return event.stopPropagation();
        };
      })(this));
      return this.$goToPanel().submit((function(_this) {
        return function(event) {
          _this.goToSlide(_this.$goToField().val());
          _this.toggleGoToPanel();
          return false;
        };
      })(this));
    };

    Infodeck.prototype.forwards = function() {
      if (this.buildsFor(this.currentSlide()) != null) {
        if (this._data.buildIndex === this.buildsFor(this.currentSlide()).length()) {
          return this.requestNextSlide();
        } else {
          this.buildsFor(this.currentSlide()).sequence[this._data.buildIndex].forwards();
          return this._data.buildIndex += 1;
        }
      } else {
        return this.requestNextSlide();
      }
    };

    Infodeck.prototype.backwards = function() {
      if (this.buildsFor(this.currentSlide()) != null) {
        if (this._data.buildIndex === 0) {
          return this.requestPreviousSlide();
        } else {
          this._data.buildIndex -= 1;
          return this.buildsFor(this.currentSlide()).sequence[this._data.buildIndex].backwards();
        }
      } else {
        return this.requestPreviousSlide();
      }
    };

    Infodeck.prototype.toggleTouchPanel = function() {
      return window.touchPanel.toggleTouchPanel();
    };

    Infodeck.prototype.skipForwards = function() {
      this.requestNextSlide();
      return this.loadingNext.always((function(_this) {
        return function() {
          return _this.runSetupBuild($('.slide.previous'), 'previous');
        };
      })(this));
    };

    Infodeck.prototype.skipBackwards = function() {
      this.requestPreviousSlide();
      return this.loadingPrevious.always((function(_this) {
        return function() {
          return _this.runSetupBuild($('.slide.next'), 'next');
        };
      })(this));
    };

    Infodeck.prototype.reloadThisSlide = function() {
      window.location.replace(this.permalink());
      return window.location.reload();
    };

    Infodeck.prototype.popStateHandler = function(ev) {
      this.log("pop state ", ev, ev.state);
      if (this.loading().state() !== 'pending') {
        return this.goToHash(this.location().hash);
      }
    };

    Infodeck.prototype.bindKeyboardEvents = function() {
      return $(document).keyup((function(_this) {
        return function(event) {
          var map;
          map = {
            '8': 'backwards',
            '32': 'forwards',
            '33': 'skipBackwards',
            '34': 'skipForwards',
            '35': 'goToLast',
            '36': 'goToFirst',
            '37': 'backwards',
            '38': 'skipBackwards',
            '39': 'forwards',
            '40': 'skipForwards',
            '67': 'toggleTableOfContents',
            '71': 'toggleGoToPanel',
            '74': 'backwards',
            '75': 'forwards',
            '80': 'toggleTouchPanel',
            '82': 'reloadThisSlide'
          };
          if (event.metakey) {
            return;
          }
          if (map[event.which]) {
            return _this[map[event.which]].call(_this);
          }
        };
      })(this));
    };

    Infodeck.prototype.initializeUI = function() {
      this.bindKeyboardEvents();
      return this.initializeGoToPanel();
    };

    Infodeck.prototype.addBuild = function(slideID, aBuild) {
      var base;
      if ((base = this._data.builds)[slideID] == null) {
        base[slideID] = new BuildCollection();
      }
      return this._data.builds[slideID].addSequence(aBuild);
    };

    Infodeck.prototype.addSetupBuild = function(slideID, aBuild) {
      var base;
      if ((base = this._data.builds)[slideID] == null) {
        base[slideID] = new BuildCollection();
      }
      return this._data.builds[slideID].addSetupBuild(aBuild);
    };

    Infodeck.prototype.addImmediateBuild = function(slideID, aBuild) {
      var base;
      if ((base = this._data.builds)[slideID] == null) {
        base[slideID] = new BuildCollection();
      }
      return this._data.builds[slideID].addImmediateBuild(aBuild);
    };

    return Infodeck;

  })();

  BuildCollection = (function() {
    function BuildCollection() {
      this.sequence = [];
    }

    BuildCollection.prototype.addSequence = function(aBuild) {
      return this.sequence.push(aBuild);
    };

    BuildCollection.prototype.addSetupBuild = function(aBuild) {
      return this.setupBuild = aBuild;
    };

    BuildCollection.prototype.addImmediateBuild = function(aBuild) {
      return this.immediateBuild = aBuild;
    };

    BuildCollection.prototype.length = function() {
      return this.sequence.length;
    };

    return BuildCollection;

  })();

  window.Infodeck = Infodeck;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var LoadingSlide;

  LoadingSlide = (function() {
    function LoadingSlide(uri) {
      this._gettingDom = uri ? $.get(uri) : $.Deferred();
      this.domLoading = $.Deferred();
      this._gettingDom.done((function(_this) {
        return function(data) {
          return _this.domLoading.resolve(data);
        };
      })(this));
      this._gettingDom.fail((function(_this) {
        return function(data) {
          return _this.domLoading.reject(data);
        };
      })(this));
      this.imagesLoading = $.Deferred();
      this._imagesLoadingCombiner = void 0;
      this._all = $.when(this.domLoading, this.imagesLoading);
    }

    LoadingSlide.newResolved = function() {
      var result;
      result = new LoadingSlide();
      result.resolve();
      return result;
    };

    LoadingSlide.prototype.promise = function() {
      return this._all.promise();
    };

    LoadingSlide.prototype.state = function() {
      return this._all.state();
    };

    LoadingSlide.prototype.always = function(func) {
      return this._all.always(func);
    };

    LoadingSlide.prototype.done = function(func) {
      return this._all.done(func);
    };

    LoadingSlide.prototype.then = function(func) {
      return this.always(func);
    };

    LoadingSlide.prototype.fail = function(func) {
      return this._all.fail(func);
    };

    LoadingSlide.prototype.reject = function() {
      this.imagesLoading.reject();
      return this.domLoading.reject();
    };

    LoadingSlide.prototype.resolve = function() {
      this.imagesLoading.resolve();
      return this.domLoading.resolve();
    };

    LoadingSlide.prototype.registerImages = function(images) {
      var i, imgPromises, j, len, registerImg;
      this._imagesLoadingCombiner = $.Deferred();
      imgPromises = [];
      registerImg = (function(_this) {
        return function(img) {
          var $img, deferredImg;
          $img = $(img);
          if (!_this.isTrackingImage($img)) {
            deferredImg = $.Deferred();
            imgPromises.push(deferredImg);
            return $img.load(function() {
              return deferredImg.resolve();
            });
          }
        };
      })(this);
      for (j = 0, len = images.length; j < len; j++) {
        i = images[j];
        registerImg(i);
      }
      $.when.apply($, imgPromises).done((function(_this) {
        return function() {
          return _this._imagesLoadingCombiner.resolve();
        };
      })(this));
      this._imagesLoadingCombiner.done((function(_this) {
        return function() {
          return _this.imagesLoading.resolve();
        };
      })(this));
      return this._imagesLoadingCombiner.fail((function(_this) {
        return function() {
          return _this.imagesLoading.reject();
        };
      })(this));
    };

    LoadingSlide.prototype.isTrackingImage = function(img) {
      return img.attr('src').match("^http://www.assoc-amazon.com");
    };

    return LoadingSlide;

  })();

  window.LoadingSlide = LoadingSlide;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  $(document).ready(function() {
    $('.deck-next-link').click(function() {
      return deck.forwards();
    });
    $('.deck-prev-link').click(function() {
      return deck.backwards();
    });
    $('.deck-help').click(function() {
      return $('.deck-help-panel').toggleClass('deck-help-visible');
    });
    $('.deck-status').click(function() {
      return deck.toggleGoToPanel();
    });
    $('.deck-first-link').click(function() {
      return deck.goToFirst();
    });
    return $('#deck-container').on('deck-becameCurrent', function() {
      $('.deck-prev-link').toggleClass('deck-nav-disabled', deck.currentIsFirst());
      $('.deck-next-link').toggleClass('deck-nav-disabled', deck.currentIsLast());
      $('.deck-status-current').text(deck.currentSlideNumber());
      $('.deck-status-total').text(deck.length());
      return $('a.deck-permalink').attr('href', deck.permalink());
    });
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  window.rescaleViewport = function() {
    var aspectRatio, content, defaultContent, ref, scale, setViewport, viewportContent, viewportTag, win;
    defaultContent = "minimum-scale = 1.0, initial-scale = 1.0";
    viewportTag = function() {
      return document.querySelector("meta[name=viewport]");
    };
    setViewport = function(content) {
      var meta;
      if (viewportTag() != null) {
        return viewportTag().setAttribute('content', content);
      } else {
        meta = "<meta name = 'viewport' content = '" + content + "'/>";
        return $('head').append(meta);
      }
    };
    viewportContent = function() {
      if (viewportTag() != null) {
        return viewportTag()['content'];
      } else {
        return "no viewport tag";
      }
    };
    win = $(window);
    aspectRatio = win.width() / win.height();
    if (1.53 < aspectRatio) {
      scale = win.height() / 640;
      scale = Math.floor(scale * 100) / 100;
      content = "minimum-scale = " + scale + ", initial-scale = " + scale;
      return setViewport(content);
    } else {
      return (ref = viewportTag()) != null ? ref.remove() : void 0;
    }
  };

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  // spin.js jquery plugin
$.fn.spin = function(opts) {
  this.each(function() {
    var $this = $(this),
        data = $this.data();

    if (data.spinner) {
      data.spinner.stop();
      delete data.spinner;
    }
    if (opts !== false) {
      data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);
    }
  });
  return this;
};;


}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var TouchPanel;

  TouchPanel = (function() {
    function TouchPanel() {
      this.visible = false;
      $('.deck-touch-panel .button.previous, .deck-touch-panel .button.next').width(100);
      $('.deck-touch-panel .button.first').click(function() {
        return window.deck.goToFirst();
      });
      $('.deck-touch-panel .button.last').click(function() {
        return window.deck.goToLast();
      });
      $('.deck-touch-panel .button.goto').click(function() {
        return window.deck.toggleGoToPanel();
      });
    }

    TouchPanel.prototype._sideWidth = 100;

    TouchPanel.prototype.tap = function(event) {
      if ($(event.target).closest('.banner').length !== 0) {
        return;
      }
      if (event.pageX < this._sideWidth) {
        return window.deck.backwards();
      } else if (event.pageX > $(window).width() - this._sideWidth) {
        return window.deck.forwards();
      } else {
        return this.toggleTouchPanel();
      }
    };

    TouchPanel.prototype.toggleTouchPanel = function() {
      return $('.deck-touch-panel').toggle(500);
    };

    return TouchPanel;

  })();

  window.touchPanel = new TouchPanel;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var TouchParser;

  TouchParser = (function() {
    function TouchParser() {
      this.clear();
    }

    TouchParser.prototype.touchstart = function(event) {
      if (!this.shouldAccept(event)) {
        return;
      }
      this.lastTouchEvent = event;
      if (event.originalEvent.touches.length === 1) {
        return this.startPoint = event.originalEvent.touches[0];
      } else {
        return this.multiTouch = true;
      }
    };

    TouchParser.prototype.touchend = function(event) {
      var end, result;
      end = event.originalEvent.changedTouches[0];
      if (this.considerGesture(event)) {
        result = this.determineGesture(this.startPoint, end);
        $(end.target).trigger(result);
      }
      return this.clear();
    };

    TouchParser.prototype.clear = function() {
      this.multiTouch = false;
      return this.startPoint = void 0;
    };

    TouchParser.prototype.considerGesture = function(event) {
      return (this.startPoint != null) && !this.multiTouch;
    };

    TouchParser.prototype.shouldAccept = function(event) {
      if (event.originalEvent.target.localName === "a") {
        return false;
      }
      return true;
    };

    TouchParser.prototype.determineGesture = function(start, end) {
      var tapEvent, tapTolerance;
      tapTolerance = 10;
      if (Math.abs(end.pageX - start.pageX) < tapTolerance && Math.abs(end.pageY - start.pageY) < tapTolerance) {
        tapEvent = $.Event("touchTap", {
          pageX: end.pageX,
          pageY: end.pageY
        });
        return tapEvent;
      }
    };

    return TouchParser;

  })();

  window.touchParser = new TouchParser;

}).call(this);

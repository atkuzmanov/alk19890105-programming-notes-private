<!DOCTYPE html>
<!-- saved from url=(0055)https://howtodoinjava.com/spring-core/spring-ioc-vs-di/ -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="text/javascript" async="" src="./Difference between IoC and Dependency Injection in Spring_files/f(4).txt"></script><script async="" src="./Difference between IoC and Dependency Injection in Spring_files/analytics.js"></script><script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/cmp.complete.bundle.js"></script><script async="" src="./Difference between IoC and Dependency Injection in Spring_files/apstag.js"></script><script type="text/javascript">!function(a9,a,p,s,t,A,g){if(a[a9])return;function q(c,r){a[a9]._Q.push([c,r])}a[a9]={init:function(){q("i",arguments)},fetchBids:function(){q("f",arguments)},setDisplayBids:function(){},targetingKeys:function(){return[]},_Q:[]};A=p.createElement(s);A.async=!0;A.src=t;g=p.getElementsByTagName(s)[0];g.parentNode.insertBefore(A,g)}("apstag",window,document,"script","//c.amazon-adsystem.com/aax2/apstag.js");</script><script type="text/javascript" async="" src="./Difference between IoC and Dependency Injection in Spring_files/videoplayer.js"></script><script type="text/javascript" async="" src="./Difference between IoC and Dependency Injection in Spring_files/prebid.js"></script><link rel="stylesheet" type="text/css" href="./Difference between IoC and Dependency Injection in Spring_files/e185d.css" media="all"><meta name="viewport" content="width=device-width, initial-scale=1"><title>Difference between IoC and Dependency Injection in Spring</title><meta name="description" content="What is dependency injection in spring. Difference between ioc and dependency injection in spring with example. Learn IoC vs DI interview questions."><meta name="robots" content="max-snippet:-1, max-image-preview:large, max-video-preview:-1"><link rel="canonical" href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/"><meta property="og:locale" content="en_US"><meta property="og:type" content="article"><meta property="og:title" content="Difference between IoC and Dependency Injection in Spring"><meta property="og:description" content="What is dependency injection in spring. Difference between ioc and dependency injection in spring with example. Learn IoC vs DI interview questions."><meta property="og:url" content="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/"><meta property="og:site_name" content="HowToDoInJava"><meta property="article:publisher" content="http://www.facebook.com/HowToDoInJava"><meta property="article:author" content="http://www.facebook.com/HowToDoInJAVA"><meta property="article:tag" content="Dependency injection"><meta property="article:tag" content="Inversion of control"><meta property="article:tag" content="Spring"><meta property="article:section" content="Spring Core"><meta property="og:image" content="https://howtodoinjava.com/wp-content/uploads/2013/03/container-magic1.png"><meta property="og:image:secure_url" content="https://howtodoinjava.com/wp-content/uploads/2013/03/container-magic1.png"><meta property="og:image:width" content="498"><meta property="og:image:height" content="296"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:description" content="What is dependency injection in spring. Difference between ioc and dependency injection in spring with example. Learn IoC vs DI interview questions."><meta name="twitter:title" content="Difference between IoC and Dependency Injection in Spring"><meta name="twitter:site" content="@HowToDoInJAVA"><meta name="twitter:image" content="https://howtodoinjava.com/wp-content/uploads/2013/03/container-magic1.png"><meta name="twitter:creator" content="@HowToDoInJAVA"> <script async="" type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/gpt.js"></script><script type="application/ld+json" class="yoast-schema-graph yoast-schema-graph--main">{"@context":"https://schema.org","@graph":[{"@type":"WebSite","@id":"https://howtodoinjava.com/#website","url":"https://howtodoinjava.com/","name":"HowToDoInJava","publisher":{"@id":"https://howtodoinjava.com/#/schema/person/"},"potentialAction":{"@type":"SearchAction","target":"https://howtodoinjava.com/?s={search_term_string}","query-input":"required name=search_term_string"}},{"@type":"ImageObject","@id":"https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#primaryimage","url":"https://howtodoinjava.com/wp-content/uploads/2013/03/container-magic1.png","width":498,"height":296},{"@type":"WebPage","@id":"https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#webpage","url":"https://howtodoinjava.com/spring-core/spring-ioc-vs-di/","inLanguage":"en-US","name":"Difference between IoC and Dependency Injection in Spring","isPartOf":{"@id":"https://howtodoinjava.com/#website"},"primaryImageOfPage":{"@id":"https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#primaryimage"},"datePublished":"2013-03-19T00:56:35+00:00","dateModified":"2019-10-13T09:16:45+00:00","description":"What is dependency injection in spring. Difference between ioc and dependency injection in spring with example. Learn IoC vs DI interview questions."},{"@type":"Article","@id":"https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#article","isPartOf":{"@id":"https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#webpage"},"author":{"@id":"https://howtodoinjava.com/#/schema/person/4976af58f6c3f73d00db5f58af2bde12"},"headline":"Spring &#8211; Inversion of Control vs Dependency Injection","datePublished":"2013-03-19T00:56:35+00:00","dateModified":"2019-10-13T09:16:45+00:00","commentCount":"13","mainEntityOfPage":{"@id":"https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#webpage"},"publisher":{"@id":"https://howtodoinjava.com/#/schema/person/"},"image":{"@id":"https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#primaryimage"},"keywords":"Dependency injection,Inversion of control,Spring","articleSection":"Spring Core"},{"@type":["Person"],"@id":"https://howtodoinjava.com/#/schema/person/4976af58f6c3f73d00db5f58af2bde12","name":"Lokesh Gupta","description":"A family guy with fun loving nature. Love computers, programming and solving everyday problems.  Find me on <a href=\"https://facebook.com/howtodoinjava\" rel=\"external\">Facebook</a> and <a href=\"https://twitter.com/howtodoinjava\" rel=\"external\">Twitter</a>.","sameAs":["http://www.facebook.com/HowToDoInJAVA","https://twitter.com/HowToDoInJAVA"]}]}</script> <link rel="amphtml" href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/amp/"><meta name="generator" content="AMP for WP 1.0.15"><link rel="dns-prefetch" href="https://use.fontawesome.com/"><link rel="dns-prefetch" href="https://s.w.org/"><style id="scriptlesssocialsharing-inline-css" type="text/css">.scriptlesssocialsharing-buttons { width: auto }.scriptlesssocialsharing-buttons a.button { padding: 6px; width: 20%;; }@media only screen and (max-width: 767px) { .scriptlesssocialsharing .sss-name { position: absolute; clip: rect(1px, 1px, 1px, 1px); height: 1px; width: 1px; border: 0; overflow: hidden; } }</style><link rel="stylesheet" id="font-awesome-css" href="./Difference between IoC and Dependency Injection in Spring_files/all.css" type="text/css" media="all"> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/jquery.js"></script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/jquery-migrate.min.js"></script> <script type="text/javascript">/*<![CDATA[*//*  */
var wpnmObject = {"button_html":"<div class=\"wpnm-button style-2\">\n                            <div class=\"wpnm-button-inner-left\"><\/div>\n                            <div class=\"wpnm-button-inner\"><\/div>\n                        <\/div>","default":"","server_time":"1581423810","turn_on_time":"","turn_off_time":""};
/*  *//*]]>*/</script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/wp-night-mode-public.js"></script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/responsive-menu.js"></script> <link rel="https://api.w.org/" href="https://howtodoinjava.com/wp-json/"><link rel="canonical" href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/"><style type="text/css">.wp-night-mode-slider {
				background-color: ;
			}

			.wp-night-mode-button.active .wp-night-mode-slider {
				background-color: ;
			}

			body.wp-night-mode-on * {
				background: #020202;
			}

			body.wp-night-mode-on .customize-partial-edit-shortcut button,
			body.wp-night-mode-on .customize-partial-edit-shortcut button svg,
			body.wp-night-mode-on #adminbarsearch,
			body.wp-night-mode-on span.display-name,
			body.wp-night-mode-on span.ab-icon,
			body.wp-night-mode-on span.ab-label {
			    background: transparent;
			}

			body.wp-night-mode-on * {
				color: #c1c1c1;
			}

			body.wp-night-mode-on a {
				color: #c1c1c1;
			}

			body.wp-night-mode-on a:hover,
			body.wp-night-mode-on a:visited,
			body.wp-night-mode-on a:active {
				color: #c1c1c1;
			}
		}				@media (prefers-color-scheme: dark) {
					 
			.wp-night-mode-slider {
				background-color: ;
			}

			.wp-night-mode-button.active .wp-night-mode-slider {
				background-color: ;
			}

			body.wp-night-mode-on * {
				background: #020202;
			}

			body.wp-night-mode-on .customize-partial-edit-shortcut button,
			body.wp-night-mode-on .customize-partial-edit-shortcut button svg,
			body.wp-night-mode-on #adminbarsearch,
			body.wp-night-mode-on span.display-name,
			body.wp-night-mode-on span.ab-icon,
			body.wp-night-mode-on span.ab-label {
			    background: transparent;
			}

			body.wp-night-mode-on * {
				color: #c1c1c1;
			}

			body.wp-night-mode-on a {
				color: #c1c1c1;
			}

			body.wp-night-mode-on a:hover,
			body.wp-night-mode-on a:visited,
			body.wp-night-mode-on a:active {
				color: #c1c1c1;
			}
		}				}</style><style>#wpcomm .wc_new_comment{background:#00B38F;}
                #wpcomm .wc_new_reply{background:#00B38F;}
                #wpcomm .wc-form-wrapper{ background:none; } /* ->formBGColor */
                #wpcomm .wpdiscuz-front-actions{background:#F9F9F9;}
                #wpcomm .wpdiscuz-subscribe-bar{background:#F9F9F9;}
                #wpcomm select,
                #wpcomm input[type="text"],
                #wpcomm input[type="email"],
                #wpcomm input[type="url"],
                #wpcomm input[type="date"],
                #wpcomm input[type="color"]{border:#D9D9D9 1px solid;}
                #wpcomm .wc-comment .wc-comment-right{background:#FEFEFE;}
                #wpcomm .wc-reply .wc-comment-right{background:#F8F8F8;}
                #wpcomm .wc-comment-right .wc-comment-text, 
                #wpcomm .wc-comment-right .wc-comment-text *{
                    font-size:16px;
                }
                #wpcomm .wc-blog-administrator > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-administrator > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-administrator > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-editor > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-editor > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-editor > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-author > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-author > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-author > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-contributor > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-contributor > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-contributor > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-subscriber > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-subscriber > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-subscriber > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_keymaster > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_keymaster > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_keymaster > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_spectator > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_spectator > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_spectator > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_blocked > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_blocked > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_blocked > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_moderator > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_moderator > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_moderator > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-bbp_participant > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-bbp_participant > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-bbp_participant > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-wpseo_manager > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-wpseo_manager > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-wpseo_manager > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-wpseo_editor > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-wpseo_editor > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-wpseo_editor > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-post_author > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-post_author > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-post_author > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }#wpcomm .wc-blog-guest > .wc-comment-right .wc-comment-author, #wpcomm .wc-blog-guest > .wc-comment-right .wc-comment-author a{color:#00B38F;}#wpcomm .wc-blog-guest > .wc-comment-left .wc-comment-label{color:#00B38F; border:none; border-bottom: 1px solid #dddddd; }                #wpcomm .wc-comment .wc-comment-left .wc-comment-label{ background: #ffffff;}
                #wpcomm .wc-comment-left .wc-follow-user{color:#00B38F;}
                #wpcomm .wc-load-more-submit{border:1px solid #D9D9D9;}
                #wpcomm .wc-new-loaded-comment > .wc-comment-right{background:#FFFAD6;}
                #wpcomm .wpdiscuz-subscribe-bar{color:#777;}
                #wpcomm .wpdiscuz-front-actions .wpdiscuz-sbs-wrap span{color: #777;}
                #wpcomm .page-numbers{color:#555;border:#555 1px solid;}
                #wpcomm span.current{background:#555;}
                #wpcomm .wpdiscuz-readmore{cursor:pointer;color:#00B38F;}
                #wpcomm .wpdiscuz-textarea-wrap{border:#D9D9D9 1px solid;} .wpd-custom-field .wcf-pasiv-star, #wpcomm .wpdiscuz-item .wpdiscuz-rating > label {color: #DDDDDD;}
                #wpcomm .wpdiscuz-item .wpdiscuz-rating:not(:checked) > label:hover,.wpdiscuz-rating:not(:checked) > label:hover ~ label {   }#wpcomm .wpdiscuz-item .wpdiscuz-rating > input ~ label:hover, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:not(:checked) ~ label:hover ~ label, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:not(:checked) ~ label:hover ~ label{color: #FFED85;} 
                #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked ~ label:hover, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked ~ label:hover, #wpcomm .wpdiscuz-item .wpdiscuz-rating > label:hover ~ input:checked ~ label, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked + label:hover ~ label, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked ~ label:hover ~ label, .wpd-custom-field .wcf-active-star, #wpcomm .wpdiscuz-item .wpdiscuz-rating > input:checked ~ label{ color:#FFD700;}
                #wpcomm .wc-comment-header{border-top: 1px solid #dedede;}
                #wpcomm .wc-reply .wc-comment-header{border-top: 1px solid #dedede;}
                /* Buttons */
                #wpcomm button, 
                #wpcomm input[type="button"], 
                #wpcomm input[type="reset"], 
                #wpcomm input[type="submit"]{ border: 1px solid #555555; color: #FFFFFF; background-color: #555555; }
                #wpcomm button:hover, 
                #wpcomm button:focus,
                #wpcomm input[type="button"]:hover, 
                #wpcomm input[type="button"]:focus, 
                #wpcomm input[type="reset"]:hover, 
                #wpcomm input[type="reset"]:focus, 
                #wpcomm input[type="submit"]:hover, 
                #wpcomm input[type="submit"]:focus{ border: 1px solid #333333; background-color: #333333;  }
                #wpcomm .wpdiscuz-sort-buttons{color:#777777;}
                #wpcomm .wpdiscuz-sort-button{color:#777777; cursor:pointer;}
                #wpcomm .wpdiscuz-sort-button:hover{color:#00B38F!important;cursor:pointer;}
                #wpcomm .wpdiscuz-sort-button-active{color:#00B38F!important;cursor:default!important;}
                #wpcomm .wc-cta-button, 
                #wpcomm .wc-cta-button-x{color:#777777; }
                #wpcomm .wc-vote-link.wc-up{color:#999999;}
                #wpcomm .wc-vote-link.wc-down{color:#999999;}
                #wpcomm .wc-vote-result{color:#999999;}
                #wpcomm .wpf-cta{color:#999999; }
                #wpcomm .wc-comment-link .wc-share-link .wpf-cta{color:#eeeeee;}
                #wpcomm .wc-footer-left .wc-reply-button{border:1px solid #00B38F!important; color: #00B38F;}
                #wpcomm .wpf-cta:hover{background:#00B38F!important; color:#FFFFFF;}
                #wpcomm .wc-footer-left .wc-reply-button.wc-cta-active, #wpcomm .wc-cta-active{background:#00B38F!important; color:#FFFFFF;}
                #wpcomm .wc-cta-button:hover{background:#00B38F!important; color:#FFFFFF;}
                #wpcomm .wc-footer-right .wc-toggle,
                #wpcomm .wc-footer-right .wc-toggle a,
                #wpcomm .wc-footer-right .wc-toggle i{color:#00B38F;}
                /* STICKY COMMENT HEADER */
                #wpcomm .wc-sticky-comment.wc-comment .wc-comment-header .wpd-sticky{background: #1ecea8; color: #ffffff; }
                #wpcomm .wc-closed-comment.wc-comment .wc-comment-header .wpd-closed{background: #aaaaaa; color: #ffffff;}
                /* PRIVATE COMMENT HEADER */
                #wpcomm .wc-private-comment.wc-comment .wc-comment-header .wpd-private{background: #999999; color: #ffffff;}
                /* FOLLOW LINK */

                #wpcomm .wc-follow{color:#777777;}
                #wpcomm .wc-follow-active{color:#ff7a00;}
                #wpcomm .wc-follow:hover i,
                #wpcomm .wc-unfollow:hover i,
                #wpcomm .wc-follow-active:hover i{color:#00B38F;}
                                .wpd-wrapper .wpd-list-item.wpd-active{border-top: 3px solid #00B38F;}
                                .comments-area{width:auto;}</style><meta name="google-site-verification" content="EV_Uq1MFIe3lcKLlf4xhcabIz-68zGeWx8pjwQH3pB8"><meta name="msvalidate.01" content="C71A4DAE3450D101003DA6DCE7D44ADE"> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/3094.js"></script><style type="text/css">#waldo-sticky-footer-wrapper {position: fixed; width: 100%; bottom: 0px; left: 0px; text-align: center; z-index: 9000;}#waldo-sticky-footer-wrapper > div {position: relative; display: inline-block}#waldo-sticky-footer-wrapper iframe, #waldo-sticky-footer-wrapper div {margin-left: auto;margin-right: auto;}.waldo-sticky-sidebar{position: fixed; top: 10px;z-index: 90}.waldo-sticky-css{position: sticky; top: 10px; z-index: 90}.waldo-overlay{position: fixed;height: 100%;width: 100%;top: 0;left: 0;z-index: 105;background: rgba(0,0,0,0.7);}#waldo-counter {position: absolute;bottom: 0;right: 0;color: #fff;font-size: 30px;padding: 15px;}.waldo-bfleft {position: fixed; left: 0; top: 10px;z-index:101;}.waldo-bfright {position: fixed; right: 0; top: 10px;z-index:101;}#waldo-tag-6038 {clear: both !important;}div[class^="app_gdpr-"] a {color: #41afbb !important; text-decoration: underline !important}#waldo-close-button {position: absolute; right: 0;top: -24px;}#waldo-close-button a {border: 1px solid rgba(0,0,0,.35);padding: 3px;font-size: 12px;color: #fff;font-weight: bold;background-color: #777;}</style><link rel="icon" href="https://howtodoinjava.com/wp-content/uploads/2015/05/howtodoinjava_logo-55696c1cv1_site_icon-32x32.png" sizes="32x32"><link rel="icon" href="https://howtodoinjava.com/wp-content/uploads/2015/05/howtodoinjava_logo-55696c1cv1_site_icon-256x256.png" sizes="192x192"><link rel="apple-touch-icon-precomposed" href="https://howtodoinjava.com/wp-content/uploads/2015/05/howtodoinjava_logo-55696c1cv1_site_icon-256x256.png"><meta name="msapplication-TileImage" content="https://howtodoinjava.com/wp-content/uploads/2015/05/howtodoinjava_logo-55696c1cv1_site_icon.png"><link rel="stylesheet" type="text/css" href="./Difference between IoC and Dependency Injection in Spring_files/shCore.css"><link rel="stylesheet" type="text/css" href="./Difference between IoC and Dependency Injection in Spring_files/shThemeDefault.css"><link rel="preload" href="./Difference between IoC and Dependency Injection in Spring_files/f(5).txt" as="script"><script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/f(5).txt"></script><link rel="preload" href="./Difference between IoC and Dependency Injection in Spring_files/f(6).txt" as="script"><script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/f(6).txt"></script><script src="./Difference between IoC and Dependency Injection in Spring_files/pubads_impl_2020013001.js" async=""></script><script type="text/javascript">googletag.cmd.push(function() {googletag.pubads().addEventListener('slotRenderEnded', function(event) {waldoAddCloseBtn(event);waldoPassbackInit(event);});googletag.pubads().enableSingleRequest();googletag.enableServices();gptAdSlots[3095] = googletag.defineSlot('/124067137/howtodoinjava300x250FL_1', [[300, 250], [300, 600], [160, 600]], 'waldo-tag-3095').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[300, 250], [300, 600], [160, 600]]).addSize([768, 0], [[300, 250], [300, 600], [160, 600]]).addSize([0, 0], [[300, 250], [300, 600], [160, 600]]).build()).addService(googletag.pubads());googletag.display('waldo-tag-3095');gptAdSlots[3097] = googletag.defineSlot('/124067137/howtodoinjava300x250FL_2', [[300, 250], [300, 600], [160, 600]], 'waldo-tag-3097').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[300, 250], [300, 600], [160, 600]]).addSize([768, 0], [[300, 250], [300, 600], [160, 600]]).addSize([0, 0], [[300, 250], [300, 600], [160, 600]]).build()).addService(googletag.pubads());googletag.display('waldo-tag-3097');gptAdSlots[3099] = googletag.defineSlot('/124067137/howtodoinjava300x250FX_1', [300, 250], 'waldo-tag-3099').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[300, 250]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());googletag.display('waldo-tag-3099');gptAdSlots[3101] = googletag.defineSlot('/124067137/howtodoinjava728x90FS_1', [[728, 90], [320, 50]], 'waldo-tag-3101').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[728, 90]]).addSize([768, 0], [[320, 50]]).addSize([0, 0], [[320, 50]]).build()).addService(googletag.pubads());googletag.display('waldo-tag-3101');gptAdSlots[3937] = googletag.defineSlot('/124067137/howtodoinjava300x250FX_2', [300, 250], 'waldo-tag-3937').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[300, 250]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());googletag.display('waldo-tag-3937');gptAdSlots[3939] = googletag.defineSlot('/124067137/howtodoinjava300x250FX_3', [300, 250], 'waldo-tag-3939').defineSizeMapping(googletag.sizeMapping().addSize([1024, 0], [[300, 250]]).addSize([768, 0], [[300, 250]]).addSize([0, 0], [[300, 250]]).build()).addService(googletag.pubads());googletag.display('waldo-tag-3939');});</script><script src="./Difference between IoC and Dependency Injection in Spring_files/cse_element__en.js" type="text/javascript"></script><link type="text/css" rel="stylesheet" href="./Difference between IoC and Dependency Injection in Spring_files/default+en.css"><link type="text/css" rel="stylesheet" href="./Difference between IoC and Dependency Injection in Spring_files/default.css"><style type="text/css">.gsc-control-cse{font-family:verdana, arial, sans-serif}.gsc-control-cse .gsc-table-result{font-family:verdana, arial, sans-serif}.gsc-refinementsGradient{background:linear-gradient(to left,rgba(255,255,255,1),rgba(255,255,255,0))}.gsc-control-cse{border-color:#FFFFFF;background-color:#FFFFFF}input.gsc-input,.gsc-input-box,.gsc-input-box-hover,.gsc-input-box-focus{border-color:#F9F9F9}.gsc-search-button-v2,.gsc-search-button-v2:hover,.gsc-search-button-v2:focus{border-color:#5890FF;background-color:#5890FF;background-image:none;filter:none}.gsc-search-button-v2 svg{fill:#FFFFFF}.gsc-tabHeader.gsc-tabhActive,.gsc-refinementHeader.gsc-refinementhActive{color:#CCCCCC;border-color:#CCCCCC;background-color:#FFFFFF}.gsc-tabHeader.gsc-tabhInactive,.gsc-refinementHeader.gsc-refinementhInactive{color:#CCCCCC;border-color:#CCCCCC;background-color:#FFFFFF}.gsc-webResult.gsc-result,.gsc-results .gsc-imageResult{border-color:#FFFFFF;background-color:#FFFFFF}.gsc-webResult.gsc-result:hover,.gsc-imageResult:hover{border-color:#FFFFFF;background-color:#FFFFFF}.gs-webResult.gs-result a.gs-title:link,.gs-webResult.gs-result a.gs-title:link b,.gs-imageResult a.gs-title:link,.gs-imageResult a.gs-title:link b{color:#3367D6}.gs-webResult.gs-result a.gs-title:visited,.gs-webResult.gs-result a.gs-title:visited b,.gs-imageResult a.gs-title:visited,.gs-imageResult a.gs-title:visited b{color:#3367D6}.gs-webResult.gs-result a.gs-title:hover,.gs-webResult.gs-result a.gs-title:hover b,.gs-imageResult a.gs-title:hover,.gs-imageResult a.gs-title:hover b{color:#0000CC}.gs-webResult.gs-result a.gs-title:active,.gs-webResult.gs-result a.gs-title:active b,.gs-imageResult a.gs-title:active,.gs-imageResult a.gs-title:active b{color:#3367D6}.gsc-cursor-page{color:#3367D6}a.gsc-trailing-more-results:link{color:#3367D6}.gs-webResult .gs-snippet,.gs-imageResult .gs-snippet,.gs-fileFormatType{color:#000000}.gs-webResult div.gs-visibleUrl,.gs-imageResult div.gs-visibleUrl{color:#999999}.gs-webResult div.gs-visibleUrl-short{color:#999999}.gs-webResult div.gs-visibleUrl-short{display:none}.gs-webResult div.gs-visibleUrl-long{display:block}.gs-promotion div.gs-visibleUrl-short{display:none}.gs-promotion div.gs-visibleUrl-long{display:block}.gsc-cursor-box{border-color:#FFFFFF}.gsc-results .gsc-cursor-box .gsc-cursor-page{border-color:#CCCCCC;background-color:#FFFFFF;color:#CCCCCC}.gsc-results .gsc-cursor-box .gsc-cursor-current-page{border-color:#CCCCCC;background-color:#FFFFFF;color:#CCCCCC}.gsc-webResult.gsc-result.gsc-promotion{border-color:#F3F3F3;background-color:#F3F3F3}.gsc-completion-title{color:#3367D6}.gsc-completion-snippet{color:#000000}.gs-promotion a.gs-title:link,.gs-promotion a.gs-title:link *,.gs-promotion .gs-snippet a:link{color:#3367D6}.gs-promotion a.gs-title:visited,.gs-promotion a.gs-title:visited *,.gs-promotion .gs-snippet a:visited{color:#3367D6}.gs-promotion a.gs-title:hover,.gs-promotion a.gs-title:hover *,.gs-promotion .gs-snippet a:hover{color:#0000CC}.gs-promotion a.gs-title:active,.gs-promotion a.gs-title:active *,.gs-promotion .gs-snippet a:active{color:#3367D6}.gs-promotion .gs-snippet,.gs-promotion .gs-title .gs-promotion-title-right,.gs-promotion .gs-title .gs-promotion-title-right *{color:#000000}.gs-promotion .gs-visibleUrl,.gs-promotion .gs-visibleUrl-short{color:#999999}.gcsc-find-more-on-google{color:#3367D6}.gcsc-find-more-on-google-magnifier{fill:#3367D6}</style><style>[data-ad-unit="LEFT_RAIL_DYNAMIC"]{display:none !important}</style><style>[data-ad-unit="LEFT_RAIL"]{display:none !important}</style><iframe src="./Difference between IoC and Dependency Injection in Spring_files/serve.html" id="bidt-sra" scrolling="no" allowtransparency="true" frameborder="0" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" sandbox="allow-forms allow-same-origin allow-scripts allow-top-navigation allow-popups" width="1" height="1"></iframe><style>[data-ad-unit="LEFT_RAIL_DYNAMIC"]{display:none !important}</style><style>[data-ad-unit="LEFT_RAIL"]{display:none !important}</style><img src="./Difference between IoC and Dependency Injection in Spring_files/notify"><img src="./Difference between IoC and Dependency Injection in Spring_files/notify(1)"></head><body data-rsssl="1" class="post-template-default single single-post postid-867 single-format-standard custom-header header-full-width sidebar-content-sidebar genesis-breadcrumbs-hidden genesis-footer-widgets-visible wpdiscuz_5.3.5"><div class="site-container"><header class="site-header"><div class="wrap"><div class="title-area"><p class="site-title"><a href="https://howtodoinjava.com/" title="HowToDoInJava">HowToDoInJava</a></p></div><nav class="nav-primary" aria-label="Main"><div class="wrap"><div class="responsive-menu-icon"></div><ul id="menu-category-menu" class="menu genesis-nav-menu menu-primary responsive-menu"><li id="menu-item-8094" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8094"><a href="https://howtodoinjava.com/java-8-tutorial/"><span>Java 8</span></a></li><li id="menu-item-11160" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11160"><a href="https://howtodoinjava.com/java-regular-expression-tutorials/"><span>Regex</span></a></li><li id="menu-item-11159" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11159"><a href="https://howtodoinjava.com/java-concurrency-tutorial/"><span>Concurrency</span></a></li><li id="menu-item-11158" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11158"><a href="https://howtodoinjava.com/java-best-practices/"><span>Best Practices</span></a></li><li id="menu-item-10224" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10224"><a href="https://howtodoinjava.com/spring-boot-tutorials/"><span>Spring Boot</span></a></li><li id="menu-item-11161" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11161"><a href="https://howtodoinjava.com/junit-5-tutorial/"><span>JUnit5</span></a></li><li id="menu-item-3631" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3631"><a title="Java Interview Questions" rel="ipt-icon-bubbles2" href="https://howtodoinjava.com/java-interview-questions/"><span>Interview Questions</span></a></li><li id="menu-item-13046" class="wp-night-mode menu-item menu-item-type-custom menu-item-object-custom menu-item-13046"><div class="wpnm-button style-2">
                            <div class="wpnm-button-inner-left"></div>
                            <div class="wpnm-button-inner"></div>
                        </div></li></ul></div></nav></div></header><div class="site-inner"><div class="wrap"><div class="content-sidebar-wrap"><main class="content"><article class="post-867 post type-post status-publish format-standard has-post-thumbnail category-spring-core tag-dependency-injection tag-inversion-of-control tag-java-spring-tutorials entry"><header class="entry-header"><h1 class="entry-title">Spring – Inversion of Control vs Dependency Injection</h1><p class="entry-meta">By <span class="entry-author"><span class="entry-author-name">Lokesh Gupta</span></span> | <span class="entry-categories">Filed Under: <a href="https://howtodoinjava.com/spring-core/" rel="category tag">Spring Core</a></span></p></header><div class="entry-content"><p>In software engineering, <a title="inversion_of_control" href="https://en.wikipedia.org/wiki/Inversion_of_control"><strong>inversion of control</strong></a> (IoC) is a programming technique in which object coupling is bound at run time by an assembler object and is typically not known at compile time using static analysis. In this spring tutorial, learn the <em>difference between ioc and dependency injection in spring with example</em>.</p><pre>Table of Contents

<a href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#ioc">1. Inversion of Control (IoC)</a>
<a href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#di">2. Dependency Injection (DI)</a>
<a href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#ioc-implementation">3. How to Implement Inversion of Control</a>
<a href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#ioc-in-spring">4. IoC in Spring Framework</a>
<a href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#beans">5. Ways to create beans in Spring</a>
<a href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#di-in-spring">6. Dependency Injection in Spring Framework</a>
<a href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#questions">7. IoC vs DI Interview Questions</a></pre><p><a id="ioc"></a></p><style>.beloposttitle300250 { text-align: center; margin-top: 20px; margin-bottom: 20px;} @media (min-width:960px) { .beloposttitle300250 { display: none !important; } }</style><div class="beloposttitle300250"><div id="waldo-tag-3937" data-processed="true"><span id="_waldo-tag-3937-5-container"></span></div></div><h2>1. What is Inversion of Control (IoC)</h2><p>In traditional programming, the flow of the business logic is determined by objects that are statically assigned to one another. With <em>inversion of control</em>, the flow depends on the object graph that is instantiated by the assembler and is made possible by object interactions being defined through abstractions. The binding process is achieved through <em>dependency injection</em>, although some argue that the use of a service locator also provides inversion of control.</p><p><strong>Inversion of control as a design guideline</strong> serves the following purposes:</p><ol><li>There is a decoupling of the execution of a certain task from implementation.</li><li>Every module can focus on what it is designed for.</li><li>Modules make no assumptions about what other systems do but rely on their contracts.</li><li>Replacing modules has no side effect on other modules.</li></ol><p><a id="di"></a></p><h2>2. What is Dependency Injection (DI)</h2><p>IoC is a design paradigm with the goal of giving more control to the targeted components of your application, the ones getting the work done. While <em>Dependency injection</em> is a pattern used to create instances of objects that other objects rely on without knowing at compile time which class will be used to provide that functionality. IoC relies on dependency injection because a mechanism is needed in order to activate the components providing the specific functionality.</p><style>.beloposttitle300250 { text-align: center; margin-top: 20px; margin-bottom: 20px;} @media (min-width:960px) { .beloposttitle300250 { display: none !important; } }</style><div class="beloposttitle300250"><div id="waldo-tag-3939" data-processed="true"><span id="_waldo-tag-3939-4-container"></span></div></div><p>The two concepts work together in this way to allow for much more flexible, reusable, and encapsulated code to be written. As such, they are important concepts in designing object-oriented solutions.</p><p><a id="ioc-implementation"></a></p><h2>3. How to implement IoC</h2><p>In object-oriented programming, there are several basic techniques to implement inversion of control. These are:</p><ol><li>using a factory pattern</li><li>using a service locator pattern</li><li>using a <strong>dependency injection</strong> of any given below type:<ul><li>a constructor injection</li><li>a setter injection</li><li>an interface injection</li></ul></li></ol><p><a id="ioc-in-spring"></a></p><h2>4. Inversion of control in Spring</h2><p>The <code>org.springframework.beans</code> and <code>org.springframework.context</code> packages provide the basis for the Spring Framework’s IoC container. The <a title="BeanFactory" href="https://docs.spring.io/spring/docs/1.2.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html"><code>BeanFactory</code></a> interface provides an advanced configuration mechanism capable of managing objects of any nature. The <a title="ApplicationContext" href="https://docs.spring.io/spring/docs/2.5.5/javadoc-api/org/springframework/context/ApplicationContext.html"><code>ApplicationContext</code></a> interface builds on top of the <code>BeanFactory</code> (it is a sub-interface) and adds other functionality such as easier integration with Spring’s AOP features, message resource handling (for use in internationalization), event propagation, and application-layer specific contexts such as the <em>WebApplicationContext</em> for use in web applications.</p><p>The <strong><code>BeanFactory</code> is the actual representation of the Spring IoC container</strong>  that is responsible for containing and otherwise managing the aforementioned beans. The <code>BeanFactory</code> interface is the central IoC container interface in Spring.</p><p><a href="./Difference between IoC and Dependency Injection in Spring_files/container-magic.png"><img class="aligncenter size-full wp-image-869" alt="container-magic" src="./Difference between IoC and Dependency Injection in Spring_files/container-magic.png" width="498" height="296"></a></p><p>There are a number of implementations of the <code>BeanFactory</code> interface. The most commonly used <code>BeanFactory</code> implementation is the <code>XmlBeanFactory</code> class. Other commonly used class is <code>XmlWebApplicationContext</code>. Depending on the bean definition, the factory will return either an independent instance of a contained object (the Prototype design pattern), or a single shared instance (a superior alternative to the Singleton design pattern, in which the instance is a singleton in the scope of the factory). Which type of instance will be returned depends on the bean factory configuration: the API is the same.</p><p>Before we dive into <strong>dependency injection types</strong>, let first identify the ways of creating a bean in spring framework as it will help in understanding the things in next section.</p><p><a id="beans"></a></p><h2>5. How to create beans in Spring</h2><p>A bean definition can be seen as a recipe for creating one or more actual objects. The container looks at the recipe for a named bean when asked, and uses the configuration metadata encapsulated by that bean definition to create (or acquire) an actual object.</p><h4>5.1. Using constructor</h4><p>When creating a bean using the constructor approach, all normal classes are usable by and compatible with Spring. That is, the class being created does not need to implement any specific interfaces or be coded in a specific fashion. Just specifying the bean class should be enough. When using XML-based configuration metadata you can specify your bean class like so:</p><div><div id="highlighter_590602" class="syntaxhighlighter nogutter  xml"><table border="0" cellpadding="0" cellspacing="0"><caption>beans.xml</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"exampleBean"</code><code class="xml plain">/&gt;</code></div></div></td></tr></tbody></table></div></div><h4>5.2. Using static factory method</h4><p>When defining a bean which is to be created using a static factory method, along with the class attribute which specifies the class containing the static factory method, another attribute named factory-method is needed to specify the name of the factory method itself.</p><div><div id="highlighter_139438" class="syntaxhighlighter nogutter  xml"><table border="0" cellpadding="0" cellspacing="0"><caption>beans.xml</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"exampleBean"</code> <code class="xml color1">factory-method</code><code class="xml plain">=</code><code class="xml string">"createInstance"</code><code class="xml plain">/&gt;</code></div></div></td></tr></tbody></table></div></div><p>Spring expects to be able to call this method  and get back a live object, which from that point on is treated as if it had been created normally via a constructor.</p><h4>5.3. Using instance factory method</h4><p>In a fashion similar to instantiation via a static factory method, instantiation using an instance factory method is where the factory method of an existing bean from the container is invoked to create the new bean.</p><div><div id="highlighter_284544" class="syntaxhighlighter nogutter  xml"><table border="0" cellpadding="0" cellspacing="0"><caption>beans.xml</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"myFactoryBean"</code>&nbsp; <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"..."</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"exampleBean"</code>&nbsp; <code class="xml color1">factory-bean</code><code class="xml plain">=</code><code class="xml string">"myFactoryBean"</code> <code class="xml color1">factory-method</code><code class="xml plain">=</code><code class="xml string">"createInstance"</code><code class="xml plain">&gt;&lt;/</code><code class="xml keyword">bean</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div><p><a id="di-in-spring"></a></p><h2>6. Dependency Injection in Spring</h2><p>The basic principle behind Dependency Injection (DI) is that objects define their dependencies only through constructor arguments, arguments to a factory method, or properties which are set on the object instance after it has been constructed or returned from a factory method. Then, it is the job of the container to actually inject those dependencies when it creates the bean. This is fundamentally the inverse, hence the name Inversion of Control (IoC).</p><h4>6.1. Setter Injection</h4><p>Setter-based DI is realized by calling setter methods on your beans after invoking a no-argument constructor or no-argument static factory method to instantiate your bean.</p><div><div id="highlighter_714217" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><caption>TestSetterDI.java</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">TestSetterDI {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java plain">DemoBean demoBean = </code><code class="java keyword">null</code><code class="java plain">;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setDemoBean(DemoBean demoBean) {</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.demoBean = demoBean;</code></div><div class="line number7 index6 alt2"><code class="java plain">}</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h4>6.2. Constructor Injection</h4><p>Constructor-based DI is realized by invoking a constructor with a number of arguments, each representing a collaborator. Additionally, calling a static factory method with specific arguments to construct the bean, can be considered almost equivalent, and the rest of this text will consider arguments to a constructor and arguments to a static factory method similarly.</p><div><div id="highlighter_571632" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><caption>ConstructorDI.java</caption><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">ConstructorDI {</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java plain">DemoBean demoBean = </code><code class="java keyword">null</code><code class="java plain">;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="java keyword">public</code> <code class="java plain">TestSetterDI (DemoBean demoBean) {</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.demoBean = demoBean;</code></div><div class="line number7 index6 alt2"><code class="java plain">}</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><h4>6.3. Interface Injection</h4><p>In this methodology we implement an interface from the IOC framework. IOC framework will use the interface method to inject the object in the main class. It is much more appropriate to use this approach when you need to have some logic that is not applicable to place in a property. Such as logging support.</p><div><div id="highlighter_674040" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">SetLogger(ILogger logger)</code></div><div class="line number2 index1 alt1"><code class="java plain">{</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">_notificationService.SetLogger(logger);</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">_productService.SetLogger(logger);</code></div><div class="line number5 index4 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div><p><a id="questions"></a></p><h2>7. Interview Questions</h2><h4>7.1. What is difference between component and service?</h4><p>A component is a glob of software that’s intended to be used, without change, by an application that is out of the control of the writers of the component. By ‘without change’ means that the using application doesn’t change the source code of the components, although they may alter the component’s behavior by extending it in ways allowed by the component writers.</p><p>A service is similar to a component in that it’s used by foreign applications. The main difference is that a component to be used locally (think jar file, assembly, dll, or a source import). A service will be used remotely through some remote interface, either synchronous or asynchronous (eg web service, messaging system, RPC, or socket.)</p><h4>7.2. How DI is different from Service locator pattern?</h4><p>The key benefit of a Dependency Injector is that it allows to plug-in a suitable implementation of a service according to environment and usage. Injection isn’t the only way to break this dependency, another is to use a service locator. The basic idea behind a service locator is to have an object that knows how to get hold of all of the services that an application might need. It then scans all such services and store them as a singleton Registry. When asked for a service implementation, a requester can query the registry with a token and get appropriate implementation.</p><p>Mostly these registries are populated via some configuration files. The key difference is that with a Service Locator every user of a service has a dependency to the locator. The locator can hide dependencies to other implementations, but you do need to see the locator.</p><h4>7.3. Which one should be better to use i.e. service locator or dependency injection?</h4><p>Well, it as I already said that key difference is that with a Service Locator every user of a service has a dependency to the locator. It means you must know the details of service locator in terms of input and output. So, it actually becomes the deciding factor which pattern to choose from.</p><p>If it is easy and necessary to maintain registry information then go for service locator, or else simply use dependency injection as it does not bother the users of service with any per-requisites.</p><h4>7.4. Which is better constructor injection or setter injection?</h4><p>The choice between setter and constructor injection is interesting as it mirrors a more general issue with object-oriented programming – should you fill fields in a constructor or with setters.<br>
Constructors with parameters give you a clear statement of what it means to create a valid object in an obvious place. If there’s more than one way to do it, create multiple constructors that show the different combinations. Another advantage with constructor initialization is that it allows you to clearly hide any fields that are immutable by simply not providing a setter. I think this is important – if something shouldn’t change then the lack of a setter communicates this very well. If you use setters for initialization, then this can become a pain.</p><p>But If you have a lot of constructor parameters things can look messy, particularly in languages without keyword parameters. If you have multiple ways to construct a valid object, it can be hard to show this through constructors, since constructors can only vary on the number and type of parameters. Constructors also suffer if you have simple parameters such as strings. With setter injection you can give each setter a name to indicate what the string is supposed to do. With constructors you are just relying on the position, which is harder to follow.</p><p>My preference is to start with constructor injection, but be ready to switch to setter injection as soon as the problems I’ve outlined above start to become a problem.</p><h4>7.5. What is Bean Factory ?</h4><p>A <em>BeanFactory</em> is like a factory class that contains a collection of beans. The <em>BeanFactory</em> holds Bean Definitions of multiple beans within itself and then instantiates the bean whenever asked for by clients.</p><p><em>BeanFactory</em> is able to create associations between collaborating objects as they are instantiated. This removes the burden of configuration from bean itself and the beans client. <em>BeanFactory</em> also takes part in the life cycle of a bean, making calls to custom initialization and destruction methods.</p><h4>7.6. What is Application Context?</h4><p>A bean factory is fine to simple applications, but to take advantage of the full power of the Spring framework, you may want to move up to Springs more advanced container, the application context. On the surface, an application context is same as a bean factory.Both load bean definitions, wire beans together, and dispense beans upon request. But it also provides:</p><ul><li>A means for resolving text messages, including support for internationalization.</li><li>A generic way to load file resources.</li><li>Events to beans that are registered as listeners.</li></ul><h4>7.7. What are the common implementations of the Application Context?</h4><p>The three commonly used implementation of <code>ApplicationContext</code> are:</p><ol><li><code>ClassPathXmlApplicationContext</code> : It Loads context definition from an XML file located in the classpath, treating context definitions as classpath resources. The application context is loaded from the application’s classpath by using the code .<div><div id="highlighter_568257" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">ApplicationContext context = </code><code class="java keyword">new</code> <code class="java plain">ClassPathXmlApplicationContext(</code><code class="java string">"bean.xml"</code><code class="java plain">);</code></div></div></td></tr></tbody></table></div></div></li><li><code>FileSystemXmlApplicationContext</code> : It loads context definition from an XML file in the filesystem. The application context is loaded from the file system by using the code .<div><div id="highlighter_168185" class="syntaxhighlighter nogutter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java plain">ApplicationContext context = </code><code class="java keyword">new</code> <code class="java plain">FileSystemXmlApplicationContext(</code><code class="java string">"bean.xml"</code><code class="java plain">);</code></div></div></td></tr></tbody></table></div></div></li><li><code>XmlWebApplicationContext</code> : It loads context definition from an XML file contained within a web application.</li></ol><h4>7.8. What should be used preferably BeanFactory or ApplicationContext?</h4><p>A <code>BeanFactory</code> pretty much just instantiates and configures beans. An <code>ApplicationContext</code> also does that, and it provides the supporting infrastructure to enable lots of enterprise-specific features such as transactions and AOP.</p><p>In short, favor the use of an <code>ApplicationContext</code>.</p><p>In this tutorial, we learned the <strong>difference between ioc and di in spring</strong>.</p><p>Happy Learning !!</p><div class="bottomAdesense"><div id="waldo-tag-7253"></div></div><div class="scriptlesssocialsharing"><div class="scriptlesssocialsharing-buttons"><a class="button twitter" target="_blank" href="https://twitter.com/intent/tweet?text=Spring%20%E2%80%93%20Inversion%20of%20Control%20vs%20Dependency%20Injection&amp;url=https%3A%2F%2Fhowtodoinjava.com%2Fspring-core%2Fspring-ioc-vs-di%2F&amp;via=howtodoinjava&amp;related=howtodoinjava" rel="noopener noreferrer nofollow"><span class="sss-name">Twitter</span></a><a class="button facebook" target="_blank" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fhowtodoinjava.com%2Fspring-core%2Fspring-ioc-vs-di%2F" rel="noopener noreferrer nofollow"><span class="sss-name">Facebook</span></a><a class="button linkedin" target="_blank" href="https://www.linkedin.com/shareArticle?mini=1&amp;url=https%3A%2F%2Fhowtodoinjava.com%2Fspring-core%2Fspring-ioc-vs-di%2F&amp;title=Spring%20%E2%80%93%20Inversion%20of%20Control%20vs%20Dependency%20Injection&amp;source=https%3A%2F%2Fhowtodoinjava.com&amp;summary=What%20is%20dependency%20injection%20in%20spring.%20Difference%20between%20ioc%20and%20dependency%20injection%20in%20spring%20with%20example.%20Learn%20IoC%20vs%20DI%20interview%20questions." rel="noopener noreferrer nofollow"><span class="sss-name">Linkedin</span></a><a class="button reddit" target="_blank" href="https://www.reddit.com/submit?url=https%3A%2F%2Fhowtodoinjava.com%2Fspring-core%2Fspring-ioc-vs-di%2F" rel="noopener noreferrer nofollow"><span class="sss-name">Reddit</span></a><a class="button pocket" target="_blank" href="https://getpocket.com/save?url=https%3A%2F%2Fhowtodoinjava.com%2Fspring-core%2Fspring-ioc-vs-di%2F&amp;title=Spring%20%E2%80%93%20Inversion%20of%20Control%20vs%20Dependency%20Injection" rel="noopener noreferrer nofollow"><span class="sss-name">Pocket</span></a></div></div></div><footer class="entry-footer"></footer></article><section class="author-box"><h4 class="author-box-title">About <span itemprop="name">Lokesh Gupta</span></h4><div class="author-box-content" itemprop="description"><p>A family guy with fun loving nature. Love computers, programming and solving everyday problems.  Find me on <a href="https://facebook.com/howtodoinjava" rel="external">Facebook</a> and <a href="https://twitter.com/howtodoinjava" rel="external">Twitter</a>.</p></div></section><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width: 0;height: 0;clear: both;margin: 0;padding: 0;"></div><h3 id="wc-comment-header"><div class="wpdiscuz-comment-count"><div class="wpd-cc-value">13</div><div class="wpd-cc-arrow"></div></div>
Leave a Reply</h3><div id="wpcomm" class="wpdiscuz_unauth wpd-default wpdiscuz_no_avatar"><div class="wpdiscuz-form-top-bar"><div class="wpdiscuz-ftb-left"><div id="wc_show_hide_loggedin_username"></div></div><div class="wpd-clear"></div></div><div class="wc_social_plugin_wrapper"></div><div class="wc-form-wrapper wc-main-form-wrapper" id="wc-main-form-wrapper-0_0"><div class="wpdiscuz-comment-message" style="display: block;"></div><form class="wc_comm_form wc_main_comm_form" method="post" enctype="multipart/form-data"><div class="wc-field-comment"><div class="wpdiscuz-item wc-field-textarea" style="margin-left: 0;"><div class="wpdiscuz-textarea-wrap "><textarea id="wc-textarea-0_0" placeholder="Join the discussion..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div></div><div class="clearfix"></div></div><div class="wc-form-footer" style="display: none;"><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div>
<input value="" required="required" class="wc_name wpd-field" type="text" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}" title=""></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div>
<input value="" required="required" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*"></div><div class="wpdiscuz-item wc_website-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-link"></i></div>
<input value="" class="wc_website wpd-field" type="text" name="wc_website" placeholder="Website"></div></div><div class="wpd-form-col-right"><div class="wc-field-captcha wpdiscuz-item wc_captcha-wrapper"><div class="wc-bin-captcha">
<i class="fas fa-shield-alt"></i>This comment form is under antispam protection</div></div><div class="wc-field-submit">
<label class="wpd_label" title="Notify of new replies to this comment">
<input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type">
<span class="wpd_label__text">
<span class="wpd_label__check">
<i class="fas fa-bell wpdicon wpdicon-on"></i>
<i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
</span>
</span>
</label>
<input class="wc_comm_submit wc_not_clicked button alt" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><div class="clearfix"></div>
<input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form><div class="wpdiscuz-form-bottom-bar"><div class="wpdiscuz-fbb-left"><div class="wpdiscuz-stat wpd-stat-threads wpd-tooltip-left">
<i class="fas fa-align-left fa-rotate-180" data-fa-transform="rotate-180"></i><span class="wpd-stat-threads-count">5</span>
<wpdtip>Comment threads</wpdtip></div><div class="wpdiscuz-stat wpd-stat-replies wpd-tooltip-left">
<i class="far fa-comments"></i><span class="wpd-stat-replies-count">8</span>
<wpdtip>Thread replies</wpdtip></div><div class="wpdiscuz-stat wpd-stat-subscribers wpd-tooltip-left">
<i class="fas fa-rss"></i><span>0</span>
<wpdtip>Followers</wpdtip></div>&nbsp;<div class="wpdiscuz-stat wpd-stat-reacted wpd-tooltip">
<i class="fas fa-bolt"></i>
<wpdtip>Most reacted comment</wpdtip></div><div class="wpdiscuz-stat wpd-stat-hot wpd-tooltip">
<i class="fab fa-hotjar"></i>
<wpdtip>Hottest comment thread</wpdtip></div></div><div class="wpdiscuz-fbb-right"><div class="wpdiscuz-stat wpd-stat-users wpd-tooltip">
<i class="fas fa-user-circle"></i> <span class="wpd-stat-authors-count">8</span>
<wpdtip>Comment authors</wpdtip></div></div><div class="wpd-clear"></div></div></div><div id="wpdiscuz_hidden_secondary_form" style="display: none;"><div class="wc-form-wrapper wc-secondary-form-wrapper" id="wc-secondary-form-wrapper-wpdiscuzuniqueid" style="display: none;"><div class="wpdiscuz-comment-message" style="display: block;"></div><div class="wc-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wc_comm_form wc-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wc-field-comment"><div class="wpdiscuz-item wc-field-textarea" style="margin-left: 0;"><div class="wpdiscuz-textarea-wrap "><textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Join the discussion..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div></div><div class="clearfix"></div></div><div class="wc-form-footer" style="display: none;"><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div>
<input value="" required="required" class="wc_name wpd-field" type="text" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}" title=""></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div>
<input value="" required="required" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*"></div><div class="wpdiscuz-item wc_website-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-link"></i></div>
<input value="" class="wc_website wpd-field" type="text" name="wc_website" placeholder="Website"></div></div><div class="wpd-form-col-right"><div class="wc-field-captcha wpdiscuz-item wc_captcha-wrapper"><div class="wc-bin-captcha">
<i class="fas fa-shield-alt"></i>This comment form is under antispam protection</div></div><div class="wc-field-submit">
<label class="wpd_label" title="Notify of new replies to this comment">
<input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type">
<span class="wpd_label__text">
<span class="wpd_label__check">
<i class="fas fa-bell wpdicon wpdicon-on"></i>
<i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
</span>
</span>
</label>
<input class="wc_comm_submit wc_not_clicked button alt" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><div class="clearfix"></div>
<input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div><div class="wpdiscuz-front-actions"><div class="wpdiscuz-sbs-wrap">
<span><i class="far fa-envelope" aria-hidden="true"></i>&nbsp; Subscribe &nbsp;<i class="fas fa-caret-down" aria-hidden="true"></i></span></div><div class="wpdiscuz-sort-buttons" style="font-size:14px; color: #777;">
<i class="fas fa-caret-up" aria-hidden="true"></i>
<span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active">newest</span> <i class="fas fa-caret-up" aria-hidden="true"></i>
<span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc ">oldest</span>
<i class="fas fa-caret-up" aria-hidden="true"></i> <span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up ">most voted</span></div><div class="clearfix"></div></div><div class="wpdiscuz-subscribe-bar wpdiscuz-hidden"><form action="https://howtodoinjava.com/wp-admin/admin-ajax.php?action=addSubscription" method="post" id="wpdiscuz-subscribe-form"><div class="wpdiscuz-subscribe-form-intro">Notify of</div><div class="wpdiscuz-subscribe-form-option" style="width:40%;">
<select class="wpdiscuz_select" name="wpdiscuzSubscriptionType"><option value="post">new follow-up comments</option><option value="all_comment">new replies to my comments</option>
</select></div><div class="wpdiscuz-item wpdiscuz-subscribe-form-email">
<input class="email" type="email" name="wpdiscuzSubscriptionEmail" required="required" value="" placeholder="Email"></div><div class="wpdiscuz-subscribe-form-button">
<input id="wpdiscuz_subscription_button" type="submit" value="›" name="wpdiscuz_subscription_button"></div>
<input type="hidden" id="wpdiscuz_subscribe_form_nonce" name="wpdiscuz_subscribe_form_nonce" value="cfe6df224c"><input type="hidden" name="_wp_http_referer" value="/spring-core/spring-ioc-vs-di/">                                                                <input type="hidden" value="867" name="wpdiscuzSubscriptionPostId"></form><div class="wpdiscuz_clear"></div></div><div id="wcThreadWrapper" class="wc-thread-wrapper"><div id="wc-comm-22548_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-22548" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Deepak</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-22548" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hi pankaj,</p><p>I think the question you asked should be — is ioc possible WITHOUT di ?</p><p>It may be a typo.</p><p>And thanks for the discussion on this. It helped to clearly understand ioc and di</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-22548_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-16287_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-16287" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Aditya</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-16287" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hi Lokesh,<br>
your blog really gives me a good insight of the technology.<br>
Thanks for taking time and pain in collecting this information and making it available for the java geeks.</p><p>Great work and keep going.<br>
All The Best</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>4 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-16287_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-2126_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-2126" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Pankaj Prakash Shet</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-2126" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hi lokesh,</p><p>I got this interview question in one of the interviews.</p><p>Is IOC possible with DI?</p><p>I answered Yes.</p><p>DI is Injecting Dependancies.<br>
Since the process of DI is managed by the container and not us , the flow is reversed hence it is Inversion Of Control.</p><p>So ideally, The Servlet which instantiated by container, whose lifecyle methods are managed by the web container, is also IOC? but not DI?</p><p>Am I correct? Please explain.</p><p>Regards,<br>
-Pankaj.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-2126_0" class="wpdiscuz_clear"></div><div id="wc-comm-2127_2126" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-2127" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-2127" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>You are right for most of the part. I have only different opinion on example given i.e. Servlets.</p><p>IOC basically facilitates having different components designed and coded separately and later used together by defining their relation with DI. In case of servlets we do not have multiple components. There is only one component i.e. servlet and you can not change the way how a servlet works. A servlet is basically combination of front controller and mediator pattern, which container uses internally.</p><p><a href="https://en.wikipedia.org/wiki/Front_Controller_pattern" rel="nofollow ugc">https://en.wikipedia.org/wiki/Front_Controller_pattern</a><br>
<a href="https://en.wikipedia.org/wiki/Mediator_pattern" rel="nofollow ugc">https://en.wikipedia.org/wiki/Mediator_pattern</a></p><p>Actually, it is a very good topic and I would like others to jump into discussion with their thoughts.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-2127_2126" class="wpdiscuz_clear"></div><div id="wc-comm-2129_2127" class="wc-comment wc-reply wc-blog-guest wc_comment_level-3"><div id="comment-2129" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Pankaj Prakash Shet</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-2129" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>In my Opinion , DI and IOC are two different things. DI is a Injecting dependanices.</p><p>Suppose if I have a Segment Object which depends on two  Point objects,  Two point objects will be created and instantiated seperately, and can be injected to segment object.</p><p>This is injecting DEPENDANCIES (Two Point objects)  into the dependant object(Segment object) ,which we as the application programmers would have done manually which is DI but not IOC (i.e. Flow is straight.(Application to framework))</p><p>But in Spring, since it is a framework or Container who does that job of injecting dependancies (DI) and not us,  The flow of control is reversed, (Framework to Application) it is DI with IOC.<br>
It is IOC not because of DI, but because flow of control is reversed.</p><p>However,  When we talk about servlet. It is the servlet container that loads and  instantiates servlets, but since it is independant servlet and has no depandancies to be injected, there is no DI, but since it is not us and it is the servlet container which instanciates and loads the servlets,  the flow is reversed(i.e. Framework to Application) and hence it is IOC (IOC without DI)</p><p>I Hope I am correct and explanation is understandable. Please correct me if I am wrong anywhere.</p><p>Regards,<br>
-Pankaj</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-2129_2127" class="wpdiscuz_clear"></div><div id="wc-comm-2131_2129" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-4"><div id="comment-2131" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-2131" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Thanks for detailed comment. I appreciate it. In a sense you are right. IOC also helps in creating executable components without much details of background infrastructure. A valid point can be make in your case when servlet container provides advanced capabilities to servlet e.g. thread management, session handling and much more. So, servlets can be argued as IOC as well. I agree on this with you.<br>
In fact IOC is much broader term and can include anywhere control of execution is put at separate place, away from executables.<br>
With or without DI?? I really doubt myself. Basically we provide servlet mappings in web.xml. Should we consider them as DI? My take is YES. What you think?</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-2131_2129" class="wpdiscuz_clear"></div><div id="wc-comm-2132_2131" class="wc-comment wc-reply wc-blog-guest wc_comment_level-5"><div id="comment-2132" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Pankaj Prakash Shet</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-2132" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Considering Servlets as DI, I think, Container just take lookup of Servlets in web.xml  and instantiates the mapped servlet. But I think Container does not Inject any dependancies in the servlets?</p><p>If the container would have  injected any Objects to servlets, It would have been DI (DI with IOC)</p><p>Is it that, Servlet object is dependant on other objects and servlets cannot be formed without injecting those dependancies? No right?  Servlets are created by the container without injecting anything hence it is IOC without DI.</p><p>If the servlet object would have been dependant on any object, and those objects would have been injected by Container like ( Segment object has to have 2 point objects, i.e Segment object is completely dependant on Point objects, ) then it would have been a DI, (DI with IOC.) which is not the case.?</p><p>Even in Case of advanced capabilities the container does not have to inject any resources to servlet, Servlet is managed by container, but container does not have to inject anything to servlet instance, to form servlet, right? Hence  It is not DI. but IOC.</p><p>Summary:</p><p>IOC- Flow of control is from Container to application.</p><p>DI- If One object is dependant on the other and if other object needs to be injected to that object,</p><p>IOC without DI-  Flow of control is from Container to application but object is not dependant on the other and hence no need to inject dependancies. Container just instantiates the object without doing any dependancy Injection.</p><p>DI without IOC-  If One object is dependant on the other and if other object needs to be injected to that object, If this process is done by the application directly and no container is involved, it is DI without IOC,</p><p>IOC With DI- –  If One object is dependant on the other and if other object needs to be injected to that object, If this process is done by the container, The flow of control is reversed, hence it is IOC with DI,</p><p>Hope I am right and this clears the concept. Correct me if I am wrong.</p><p>Regards,<br>
-Pankaj.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-2132_2131" class="wpdiscuz_clear"></div><div id="wc-comm-2133_2132" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-6"><div id="comment-2133" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-2133" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hmm.. Make sense. Thanks for your time to write all this. It will help us all..</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>5 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-2133_2132" class="wpdiscuz_clear"></div><div id="wc-comm-20595_2133" class="wc-comment wc-reply wc-blog-guest wc_comment_level-7"><div id="comment-20595" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Vinay Patil</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-20595" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Hi ,<br>
Thank you for this discussion, this really helped to clearly understand this concept.</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>3 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-20595_2133" class="wpdiscuz_clear"></div></div></div><div id="wc-comm-50053_2132" class="wc-comment wc-reply wc-blog-guest wc_comment_level-6"><div id="comment-50053" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">Nitin Sridhar</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-50053" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Great Pankaj, you cleared my doubts</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>7 months ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-50053_2132" class="wpdiscuz_clear"></div></div></div></div></div></div></div><div id="wc-comm-692_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-692" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">kishore</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-692" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>Nice blog lokesh…Every time before going to interview am referring to this site only..<br>
Thanx for sharing your knowledge</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>6 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-692_0" class="wpdiscuz_clear"></div></div><div id="wc-comm-690_0" class="wc-comment wc-blog-guest wc_comment_level-1"><div id="comment-690" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author ">RahamaTullah</div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-690" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p>I want to learn spring with web services, can you provide the example on this</p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>6 years ago</div><div class="wc-toggle"><i class="fas fa-chevron-up" title="Hide Replies"></i></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-690_0" class="wpdiscuz_clear"></div><div id="wc-comm-691_690" class="wc-comment wc-reply wc-blog-user wc-blog-post_author wc_comment_level-2"><div id="comment-691" class="wc-comment-right wc-hide-avatar"><div class="wc-comment-header"><div class="wc-comment-author "><a href="https://howtodoinjava.com/" rel="nofollow" target="_blank">Lokesh Gupta</a></div><div class="wc-comment-link"><span class="wc-comment-img-link-wrap"><i class="fas fa-link wc-comment-img-link wpf-cta" data-comment-url="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/#comment-691" aria-hidden="true"></i></span></div><div class="wpdiscuz_clear"></div></div><div class="wc-comment-text"><p><a href="https://howtodoinjava.com/spring/spring-restful/how-to-write-restful-webservices-using-spring-3-mvc/" rel="nofollow ugc">https://howtodoinjava.com/spring/spring-restful/how-to-write-restful-webservices-using-spring-3-mvc/</a></p></div><div class="wc-comment-footer"><div class="wc-footer-left"><span class="wc-vote-link wc-up wc_vote wc_not_clicked"><i class="fas fa-plus wc-vote-img-up"></i><span>Vote Up</span></span><span class="wc-vote-result">0</span><span class="wc-vote-link wc-down wc_vote wc_not_clicked"><i class="fas fa-minus wc-vote-img-down"></i><span>Vote Down</span></span>&nbsp;<span class="wc-reply-button wc-cta-button" title="Reply"><i class="far fa-comments" aria-hidden="true"></i> Reply</span></div><div class="wc-footer-right"><div class="wc-comment-date"><i class="far fa-clock" aria-hidden="true"></i>6 years ago</div><div class="wc-toggle"></div></div><div class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-message"></div><div id="wpdiscuz_form_anchor-691_690" class="wpdiscuz_clear"></div></div></div><div class="wpdiscuz-comment-pagination"></div></div><div class="wpdiscuz_clear"></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar wpdiscuz-loading-bar-unauth"></div>
</main><aside class="sidebar sidebar-primary widget-area" role="complementary" aria-label="Primary Sidebar"><section id="text-37" class="widget widget_text"><div class="widget-wrap"><h4 class="widget-title widgettitle">Search Tutorials</h4><div class="textwidget"><form action="https://howtodoinjava.com/search-results">
<input class="search-input" name="q" placeholder="Type and Press ENTER..." size="35" type="text"></form></div></div></section>
<section id="text-43" class="widget widget_text"><div class="widget-wrap"><div class="textwidget"><div style="margin-top: 10px; margin-bottom: 6px; width: 300px;"><div id="waldo-tag-3099" data-processed="true"><div id="_waldo-tag-3099-5-container" style="margin: auto; text-align: center;"><iframe id="waldo-tag-3099-5" scrolling="no" allowtransparency="true" frameborder="0" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" sandbox="allow-forms allow-same-origin allow-scripts allow-top-navigation allow-popups" width="300" height="250" src="./Difference between IoC and Dependency Injection in Spring_files/render.html">
    </iframe></div></div></div></div></div></section>
<section id="text-46" class="widget widget_text"><div class="widget-wrap"><div class="textwidget"><div style="margin-bottom: 6px;"><div id="waldo-tag-3095" data-processed="true"><span id="_waldo-tag-3095-3-container" style="margin: auto; text-align: center;"></span></div></div><div style="margin-bottom: 6px;"><div id="waldo-tag-3097" data-processed="true"><div id="_waldo-tag-3097-2-container" style="margin: auto; text-align: center;"><iframe id="waldo-tag-3097-2" scrolling="no" allowtransparency="true" frameborder="0" marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" sandbox="allow-forms allow-same-origin allow-scripts allow-top-navigation allow-popups" width="300" height="250" src="./Difference between IoC and Dependency Injection in Spring_files/render(1).html">
    </iframe></div></div></div></div></div></section>
</aside></div><aside class="sidebar sidebar-secondary widget-area" role="complementary" aria-label="Secondary Sidebar"><section id="nav_menu-25" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Spring Tutorial</h4><div class="menu-spring-core-container"><ul id="menu-spring-core" class="menu"><li id="menu-item-8056" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8056"><a href="https://howtodoinjava.com/java-spring-framework-tutorials/">Spring – Introduction</a></li><li id="menu-item-5448" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5448"><a href="https://howtodoinjava.com/spring-core/different-spring-ioc-containers/">Spring – IoC Containers</a></li><li id="menu-item-5471" class="menu-item menu-item-type-post_type menu-item-object-post current-menu-item menu-item-5471"><a href="https://howtodoinjava.com/spring-core/spring-ioc-vs-di/" aria-current="page">Spring – IoC vs. DI</a></li><li id="menu-item-5467" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5467"><a href="https://howtodoinjava.com/spring-core/spring-bean-scopes/">Spring – Bean Scopes</a></li><li id="menu-item-5466" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5466"><a href="https://howtodoinjava.com/spring-core/spring-bean-life-cycle/">Spring – Bean Life Cycle</a></li><li id="menu-item-5465" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5465"><a href="https://howtodoinjava.com/spring-core/spring-bean-post-processors/">Spring – Bean Postprocessors</a></li><li id="menu-item-5463" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5463"><a href="https://howtodoinjava.com/spring-core/spring-beans-autowiring-concepts/">Spring – Autowiring</a></li><li id="menu-item-13014" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-13014"><a href="https://howtodoinjava.com/spring-core/spring-annotations/">Spring – Annotations</a></li><li id="menu-item-5456" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5456"><a href="https://howtodoinjava.com/spring-core/stereotype-annotations/">Spring – Stereotype Annotations</a></li><li id="menu-item-5468" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5468"><a href="https://howtodoinjava.com/spring-core/spring-scheduled-annotation/">Spring – Task Scheduling</a></li><li id="menu-item-5469" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5469"><a href="https://howtodoinjava.com/spring-core/spring-timer-tasks/">Spring – Timer Task</a></li><li id="menu-item-5447" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5447"><a href="https://howtodoinjava.com/spring-core/how-to-publish-and-listen-application-events-in-spring/">Spring – Events</a></li><li id="menu-item-5449" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5449"><a href="https://howtodoinjava.com/spring-core/resolving-text-messages-in-spring-resourcebundlemessagesource-example/">Spring – Message Source</a></li><li id="menu-item-5451" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5451"><a href="https://howtodoinjava.com/spring-core/spring-resource-loader-aware/">Spring – ResourceLoader</a></li><li id="menu-item-5446" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5446"><a href="https://howtodoinjava.com/spring-core/registering-built-in-property-editors-in-spring-4-customeditorconfigurer-example/">Spring – Property Editor</a></li><li id="menu-item-5459" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5459"><a href="https://howtodoinjava.com/spring-core/send-email-with-spring-javamailsenderimpl-example/">Spring –  Send Email</a></li><li id="menu-item-5458" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5458"><a href="https://howtodoinjava.com/spring-core/do-not-specify-version-numbers-in-spring-schema-references/">Spring – Version-less Schema</a></li><li id="menu-item-8055" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-8055"><a href="https://howtodoinjava.com/interview-questions/top-spring-interview-questions-with-answers/">Spring – Interview Questions</a></li><li id="menu-item-5457" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5457"><a href="https://howtodoinjava.com/best-practices/13-best-practices-for-writing-spring-configuration-files/">Spring – Best Practices</a></li></ul></div></div></section>
<section id="nav_menu-103" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Popular Tutorials</h4><div class="menu-popular-tutorials-container"><ul id="menu-popular-tutorials" class="menu"><li id="menu-item-12031" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12031"><a href="https://howtodoinjava.com/java-8-tutorial/">Java 8 Tutorial</a></li><li id="menu-item-10311" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-10311"><a href="https://howtodoinjava.com/java/basics/what-is-java-programming-language/">Core Java Tutorial</a></li><li id="menu-item-12032" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12032"><a href="https://howtodoinjava.com/java-collections/">Collections in Java</a></li><li id="menu-item-12033" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12033"><a href="https://howtodoinjava.com/java-concurrency-tutorial/">Java Concurrency</a></li><li id="menu-item-11314" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11314"><a href="https://howtodoinjava.com/spring-boot-tutorials/">Spring Boot Tutorial</a></li><li id="menu-item-10318" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10318"><a href="https://howtodoinjava.com/spring-aop-tutorial/">Spring AOP Tutorial</a></li><li id="menu-item-10308" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10308"><a href="https://howtodoinjava.com/spring-mvc-tutorial/">Spring MVC Tutorial</a></li><li id="menu-item-10309" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10309"><a href="https://howtodoinjava.com/spring-security-tutorial/">Spring Security Tutorial</a></li><li id="menu-item-10292" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10292"><a href="https://howtodoinjava.com/hibernate-tutorials/">Hibernate Tutorial</a></li><li id="menu-item-13063" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13063"><a href="https://howtodoinjava.com/python-tutorial/">Python Tutorial</a></li><li id="menu-item-10303" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10303"><a href="https://howtodoinjava.com/jersey-jax-rs-tutorials/">Jersey Tutorial</a></li><li id="menu-item-10306" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10306"><a href="https://howtodoinjava.com/maven/">Maven Tutorial</a></li><li id="menu-item-10305" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10305"><a href="https://howtodoinjava.com/log4j2/">Log4j Tutorial</a></li><li id="menu-item-12034" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12034"><a href="https://howtodoinjava.com/java-regular-expression-tutorials/">Regex Tutorial</a></li></ul></div></div></section>
</aside></div></div><div class="before-footer"><div class="wrap"><section id="text-45" class="widget widget_text"><div class="widget-wrap"><div class="textwidget"><style>.hideOnMobile { display: block; } @media (max-width:960px) { .hideOnMobile { display: none; } }</style><div class="hideOnMobile" style="margin: 10px auto; text-align: center; width: 728px;"><div id="waldo-tag-3101" data-processed="true"><span id="_waldo-tag-3101-4-container" style="margin: auto; text-align: center;"></span></div></div></div></div></section></div></div><div class="footer-widgets"><div class="wrap"><div class="widget-area footer-widgets-1 footer-widget-area"><section id="nav_menu-6" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Meta Links</h4><div class="menu-meta-links-container"><ul id="menu-meta-links" class="menu"><li id="menu-item-3574" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3574"><a href="https://howtodoinjava.com/advertise/">Advertise</a></li><li id="menu-item-3570" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3570"><a href="https://howtodoinjava.com/contact/">Contact Us</a></li><li id="menu-item-3568" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3568"><a href="https://howtodoinjava.com/privacy-policy/">Privacy policy</a></li><li id="menu-item-3571" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3571"><a href="https://howtodoinjava.com/about/">About Me</a></li></ul></div></div></section></div><div class="widget-area footer-widgets-2 footer-widget-area"><section id="nav_menu-118" class="widget widget_nav_menu"><div class="widget-wrap"><h4 class="widget-title widgettitle">Recommended Reading</h4><div class="menu-recommended-reading-container"><ul id="menu-recommended-reading" class="menu"><li id="menu-item-5713" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5713"><a title="10 Life Lessions" href="https://howtodoinjava.com/resources/10-life-lessons-i-have-learned-in-last-few-years/">10 Life Lessons</a></li><li id="menu-item-5724" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5724"><a href="https://howtodoinjava.com/security/how-to-generate-secure-password-hash-md5-sha-pbkdf2-bcrypt-examples/">Secure Hash Algorithms</a></li><li id="menu-item-5714" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5714"><a href="https://howtodoinjava.com/tomcat/a-birds-eye-view-on-how-web-servers-work/">How Web Servers work?</a></li><li id="menu-item-5717" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5717"><a href="https://howtodoinjava.com/java/io/how-java-io-works-internally-at-lower-level/">How Java I/O Works Internally?</a></li><li id="menu-item-5722" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-5722"><a href="https://howtodoinjava.com/resources/best-way-to-learn-java/">Best Way to Learn Java</a></li><li id="menu-item-5733" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5733"><a href="https://howtodoinjava.com/java-best-practices/">Java Best Practices Guide</a></li><li id="menu-item-9622" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-9622"><a href="https://howtodoinjava.com/microservices/microservices-definition-principles-benefits/">Microservices Tutorial</a></li><li id="menu-item-6405" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-6405"><a title="REST API Tutorial" target="_blank" rel="nofollow" href="http://restfulapi.net/">REST API Tutorial</a></li><li id="menu-item-9519" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-9519"><a href="https://howtodoinjava.com/start-new-blog/">How to Start New Blog</a></li></ul></div></div></section></div></div></div><footer class="site-footer"><div class="wrap"><p style="margin: 20px auto;max-width: 800px;">Copyright © 2016 · HowToDoInjava.com · All Rights Reserved. | <a href="https://howtodoinjava.com/sitemap.xml">Sitemap</a></p></div></footer></div><a id="wpdUserContentInfoAnchor" style="display:none;" rel="#wpdUserContentInfo" data-wpd-lity="">wpDiscuz</a><div id="wpdUserContentInfo" style="overflow:auto;background:#FDFDF6;padding:20px;width:600px;max-width:100%;border-radius:6px;" class="lity-hide"></div><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-40697607-1', 'auto');
  ga('set', 'dimension1', 'Test');
  ga('send', 'pageview');</script> <script>(function() {
    var cx = '000292789241211868774:cvclu5feha4';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//cse.google.com/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();</script><script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/shCore.js"></script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/shBrushXml.js"></script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/shBrushJava.js"></script> <script type="text/javascript">(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://howtodoinjava.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.head.appendChild( corecss );
		var themecssurl = "https://howtodoinjava.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.head.appendChild( themecss );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

	// Infinite scroll support
	if ( typeof( jQuery ) !== 'undefined' ) {
		jQuery( function( $ ) {
			$( document.body ).on( 'post-load', function() {
				SyntaxHighlighter.highlight();
			} );
		} );
	}</script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/wpdcc.js"></script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/jquery.autogrowtextarea.min.js"></script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/jquery.form.min.js"></script> <script type="text/javascript">/*<![CDATA[*//*  */
var wpdiscuzAjaxObj = {"url":"https:\/\/howtodoinjava.com\/wp-admin\/admin-ajax.php","customAjaxUrl":"https:\/\/howtodoinjava.com\/wp-content\/plugins\/wpdiscuz\/utils\/ajax\/wpdiscuz-ajax.php","wpdiscuz_options":{"wc_hide_replies_text":"Hide Replies","wc_show_replies_text":"View Replies","wc_msg_required_fields":"Please fill out required fields","wc_invalid_field":"Some of field value is invalid","wc_error_empty_text":"please fill out this field to comment","wc_error_url_text":"url is invalid","wc_error_email_text":"email address is invalid","wc_invalid_captcha":"Invalid Captcha Code","wc_login_to_vote":"You Must Be Logged In To Vote","wc_deny_voting_from_same_ip":"You are not allowed to vote for this comment","wc_self_vote":"You cannot vote for your comment","wc_vote_only_one_time":"You've already voted for this comment","wc_voting_error":"Voting Error","wc_held_for_moderate":"Comment awaiting moderation","wc_comment_edit_not_possible":"Sorry, this comment no longer possible to edit","wc_comment_not_updated":"Sorry, the comment was not updated","wc_comment_not_edited":"You've not made any changes","wc_new_comment_button_text":"new comment","wc_new_comments_button_text":"new comments","wc_new_reply_button_text":"new reply on your comment","wc_new_replies_button_text":"new replies on your comments","wc_msg_input_min_length":"Input is too short","wc_msg_input_max_length":"Input is too long","wc_follow_user":"Follow this user","wc_unfollow_user":"Unfollow this user","wc_follow_success":"You started following this comment author","wc_follow_canceled":"You stopped following this comment author.","wc_follow_email_confirm":"Please check your email and confirm the user following request.","wc_follow_email_confirm_fail":"Sorry, we couldn't send confirmation email.","wc_follow_login_to_follow":"Please login to follow users.","wc_follow_impossible":"We are sorry, but you can't follow this user.","wc_follow_not_added":"Following failed. Please try again later.","is_user_logged_in":false,"commentListLoadType":"0","commentListUpdateType":"0","commentListUpdateTimer":"30","liveUpdateGuests":"1","wc_comment_bg_color":"#FEFEFE","wc_reply_bg_color":"#F8F8F8","wpdiscuzCommentsOrder":"desc","wpdiscuzCommentOrderBy":"comment_date_gmt","commentsVoteOrder":false,"wordpressThreadCommentsDepth":"10","wordpressIsPaginate":"","commentTextMaxLength":null,"storeCommenterData":100000,"isCaptchaInSession":true,"isGoodbyeCaptchaActive":false,"socialLoginAgreementCheckbox":0,"enableFbLogin":0,"enableFbShare":0,"facebookAppID":"","facebookUseOAuth2":0,"enableGoogleLogin":0,"googleAppID":"","cookiehash":"1aece0b34da653945745203e18ec6df7","isLoadOnlyParentComments":0,"ahk":"av6#4%v(x-9c%p&s0@x$e&zp8hgd#$=#","enableDropAnimation":1,"isNativeAjaxEnabled":1,"cookieCommentsSorting":"wpdiscuz_comments_sorting","enableLastVisitCookie":0,"version":"5.3.5","wc_post_id":867,"loadLastCommentId":0,"lastVisitKey":"wpdiscuz_last_visit","isCookiesEnabled":true,"wc_captcha_show_for_guest":"0","wc_captcha_show_for_members":"0","is_email_field_required":"1"}};
/*  *//*]]>*/</script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/wpdiscuz.js"></script> <script type="text/javascript">/*  */
var wpdiscuzUCObj = {"msgConfirmDeleteComment":"Are you sure you want to delete this comment?","msgConfirmCancelSubscription":"Are you sure you want to cancel this subscription?","msgConfirmCancelFollow":"Are you sure you want to cancel this follow?"};
/*  */</script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/wpdiscuz-user-content.js"></script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/lity.js"></script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/comment-reply.min.js"></script> <script type="text/javascript" src="./Difference between IoC and Dependency Injection in Spring_files/collapsable.js"></script> </body></html>
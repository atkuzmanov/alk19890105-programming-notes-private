<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0083)http://what-when-how.com/enterprise-javabeans-3/jndi-as-a-component-registry-ejb-3/ -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>JNDI as a component registry (EJB 3)</title>
<meta name="robots" content="noodp, noydir">
<meta name="description" content="JNDI is the JDBC of naming and directory services. Just as JDBC provides a standard Java EE API to access all kinds of databases, JNDI standardizes naming and directory service access. If you’ve ever used a Lightweight Directory Access Protocol […]">
<link rel="stylesheet" href="./JNDI as a component registry (EJB 3)_files/style.css" type="text/css" media="screen, projection">
<link rel="stylesheet" href="./JNDI as a component registry (EJB 3)_files/layout.css" type="text/css" media="screen, projection">
<!--[if lte IE 8]><link rel="stylesheet" href="http://what-when-how.com/wp-content/themes/thesis_182/lib/css/ie.css" type="text/css" media="screen, projection" /><![endif]-->
<link rel="shortcut icon" href="http://what-when-how.com/wp-content/uploads/2011/08/favicon.ico">
<link rel="alternate" type="application/rss+xml" title="what-when-how RSS Feed" href="http://feeds.feedburner.com/what-when-how">
<link rel="pingback" href="http://what-when-how.com/xmlrpc.php">
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://what-when-how.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://what-when-how.com/wp-includes/wlwmanifest.xml">
</head>
<body>
<div id="header_area" class="full_width">
<div class="page">
<ul class="menu">
</ul>
	<div id="header">
		<p id="logo"><a href="http://what-when-how.com/">what-when-how</a></p>
		<p id="tagline">In Depth Tutorials and Information</p>
	</div>
</div>
</div>
<div id="content_area" class="full_width">
<div class="page">
	<div id="content_box">
		<div id="content" class="hfeed">

				   



						<script language="javascript">



						//	navigator.CustomTag = null;



						</script>				   				   



							<div class="post-108036 post type-post status-publish format-standard hentry category-enterprise-javabeans-3 post_box top" id="post-108036">
				<div class="headline_area">
					<h1 class="entry-title">JNDI as a component registry (EJB 3)</h1>
				</div>
				<div class="format_text entry-content">

<script type="text/javascript">
    google_ad_client = "ca-pub-3548356617924720";
    google_ad_slot = "9774666650";
    google_ad_width = 728;
    google_ad_height = 90;
</script>
<!-- Above the fold 728x90 -->
<script type="text/javascript" src="./JNDI as a component registry (EJB 3)_files/f.txt">
</script>


<script type="text/javascript">
    google_ad_client = "ca-pub-3548356617924720";
    google_ad_slot = "9774666650";
    google_ad_width = 728;
    google_ad_height = 90;
</script>
<!-- Above the fold 728x90 -->
<script type="text/javascript" src="./JNDI as a component registry (EJB 3)_files/f.txt">
</script>



<p><strong>JNDI is the JDBC of naming and directory services.</strong> Just as JDBC provides a standard Java EE API to access all kinds of databases, JNDI standardizes naming and directory service access. If you’ve ever used a Lightweight Directory Access Protocol (LDAP) such as a Microsoft Active Directory server, you already know what a naming and directory service is. </p>
<p><a name="bookmark112"></a><a name="bookmark113"></a><strong>In simple terms,</strong> a naming service provides the ability to locate a component or service by name. You give a naming service the complete name for a resource and it figures out how to get you a handle to the resource that you can use. Domain Name Service (DNS) is a relatively well-known example of a naming service. When we point our web browser to http://yahoo.com, the DNS server conducts a lookup and directs us to the right IP address for Yahoo. The RMI registry is another example of a naming service. In a sense, even an operating system file manager is a naming service. You give the file manager the complete path to a file and it gives you a handle to the file you are looking for. </p>
<p><a name="bookmark114"></a><a name="bookmark115"></a><a name="bookmark116"></a><strong>As figure A.2 shows,</strong> JNDI provides a uniform abstraction over a number of different naming services such as LDAP, DNS, Network Information Service (NIS), Novell Directory Services (NDS), RMI, Common Object Request Broker Architecture (CORBA), and so on. Once you have an instance of a JNDI context, you can use it to locate resources in any underlying naming service available to the context. Under the hood, JNDI negotiates with each available naming service given the name of a resource to figure out where to look up the service’s actual location. </p><!--Ad Injection:random-->
<div style="float:left;margin-top:3px;margin-bottom:3px;padding-top:3px;padding-bottom:3px;"><script type="text/javascript">
    google_ad_client = "ca-pub-3548356617924720";
    google_ad_slot = "9654707454";
    google_ad_width = 336;
    google_ad_height = 280;
</script>
<script type="text/javascript" src="./JNDI as a component registry (EJB 3)_files/f.txt">
</script></div><br clear="all">
<p><a href="http://what-when-how.com/wp-content/uploads/2011/06/tmp4B42_thumb.jpg" target="_blank"><img title="JNDI provides a single unified API to access various naming services such as LDAP, NDS, NDS, NIS, RMI, and CORBA. Any naming service with a JNDI Service Provider Interface (SPI) provider can be plugged into the API seamlessly. " style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="146" alt="JNDI provides a single unified API to access various naming services such as LDAP, NDS, NDS, NIS, RMI, and CORBA. Any naming service with a JNDI Service Provider Interface (SPI) provider can be plugged into the API seamlessly. " src="./JNDI as a component registry (EJB 3)_files/tmp4B42_thumb_thumb.jpg" width="640" border="0"></a> </p>
<p><a name="bookmark117"></a><strong>Figure A.2 JNDI provides a single unified API to access various naming services such as LDAP, NDS, NDS, NIS, RMI, and CORBA. Any naming service with a JNDI Service Provider Interface (SPI) provider can be plugged into the API seamlessly.</strong> </p>
<p><a href="http://what-when-how.com/wp-content/uploads/2011/06/tmp4B43_thumb1.jpg" target="_blank"><img title="An example JNDI tree for an application server. All global resources such as jdbc and jms are bound to the root context of JNDI tree. Each application has its own application context, and EJBs and other resources in the application are bound under the application context. " style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="325" alt="An example JNDI tree for an application server. All global resources such as jdbc and jms are bound to the root context of JNDI tree. Each application has its own application context, and EJBs and other resources in the application are bound under the application context. " src="./JNDI as a component registry (EJB 3)_files/tmp4B43_thumb1_thumb.jpg" width="1024" border="0"></a> </p>
<p><strong>Figure A.3 An example JNDI tree for an application server. All global resources such as jdbc and jms are bound to the root context of JNDI tree. Each application has its own application context, and EJBs and other resources in the application are bound under the application context.</strong> </p>
<p><strong>Like RMI,</strong> JNDI plays a vital role in EJB 3, although it is by and large hidden behind the scenes (also like RMI, JNDI used to be a lot more visible and made EJB much more cumbersome as of EJB 2). In a very real sense, JNDI is to EJB what the RMI registry is to RMI. JNDI is used as the central repository for resources managed by the container. </p>
<p><a name="bookmark118"></a>As a result, every bean managed by the container is automatically registered with JNDI. In addition, a typical container JNDI registry will store JDBC data sources, JMS queues, JMS connection factories, JPA entity managers, JPA entity manager factories, and so on. Whenever a client (such as an EJB) needs to use a managed resource, they use JNDI to look up the resource by its unique name. Figure A.3 shows how a typical JNDI tree for a Java EE application server might look. </p>
<p><strong>As you can see in figure A.3</strong>, resources are stored in a JNDI tree in a hierarchical manner. This means that JNDI resource names look much like Unix file pathnames (they also sometimes start with a protocol specification such as java:, much like a URL address you would enter in a browser navigation bar). As with RMI, once you procure a handle to a resource from a JNDI context, you can use it as though it were a local resource. </p>
<p>To use a resource stored in the JNDI context, a client has to initialize the context and look up the resource. Despite the robustness of the JNDI mechanism itself, the code to do so isn’t that intimidating. The code in listing A.1 looks up a JDBC data source from JNDI and creates a new connection from it. As you might imagine, the JDBC connection then might be used to issue SQL to the underlying database pointed to by the retrieved data source. </p>
<p><strong>Listing A.1 Looking up a JDBC data source using JNDI</strong> </p>
<p><a href="http://what-when-how.com/wp-content/uploads/2011/06/tmp4B44_thumb.jpg" target="_blank"><img title="Listing A.1 Looking up a JDBC data source using JNDI " style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="105" alt="Listing A.1 Looking up a JDBC data source using JNDI " src="./JNDI as a component registry (EJB 3)_files/tmp4B44_thumb_thumb.jpg" width="640" border="0"></a> </p>
<p><a name="bookmark119"></a><a name="bookmark120"></a><strong>In listing A.1</strong>, the JNDI lookup takes place in the first two lines. First, an Initial-Context object is instantiated. The InitialContext object connects to any given JNDI tree. In the case of the parameter-less version of the constructor used in listing A.1, the InitialContext object connects to the "default" JNDI tree. The JNDI defaults are determined by the contents of a file named jndi.properties that can be stored anywhere in the JVM’s CLASSPATH. The Java EE application server usually provides this properties file, and the settings in the file typically point to the JNDI tree of the local application server. As a result, the default InitialContext constructor is most useful while looking up resources within the same JVM. If you are looking up a resource (such as an EJB) on a remote application server, then you must feed environment properties to the InitialContext constructor. This can be done as follows: </p>
<p><a href="http://what-when-how.com/wp-content/uploads/2011/06/tmp4B45_thumb.jpg" target="_blank"><img title="tmp4B-45_thumb" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="183" alt="tmp4B-45_thumb" src="./JNDI as a component registry (EJB 3)_files/tmp4B45_thumb_thumb.jpg" width="640" border="0"></a> </p>
<p><strong>In the example,</strong> the custom Properties entries specify that we are trying to connect to a remote Oracle application server JNDI tree. Note JNDI connection properties are vendor (application server) specific and our example cannot be used universally, so you should consult with your application server’s documentation to see how you can connect to it remotely. In general, you might find that most application servers require a common set of JNDI properties defined as constants in the Context interface. Table A.1 summarizes the most common environment properties that are used for Java EE application servers. </p>
<p>Note that instead of providing environment properties programmatically, you can also simply modify the jndi.properties file in your runtime CLASSPATH. If you are using EJB 3 DI, this is the only way of connecting to a remote server. </p>
<p><strong>Table A.1 Common JNDI environment properties required for creating an initial context to connect to a remote JNDI service provider in a Java EE environment. These are specified either as system properties in the jndi.properties file in the JVM at the client side or as Property object entries passed to the constructor in your Java code. Of these options, a properties file is recommended as it improves maintainability of your application code.</strong> </p>
<p><span class="font9"></span></p>
<table border="1">
<tbody>
<tr>
<td>
<p><span class="font9"><strong>Property Name</strong></span></p>
</td>
<td>
<p><span class="font9"><strong>Description</strong></span></p>
</td>
<td>
<p><span class="font9"><strong>Example Value</strong></span></p>
</td>
</tr>
<tr>
<td><a href="http://what-when-how.com/wp-content/uploads/2011/06/tmp4B46.jpg" target="_blank"><img title="tmp4B-46" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; width: 122pt; height: 37pt; border-right-width: 0px" height="316" alt="tmp4B-46" src="./JNDI as a component registry (EJB 3)_files/tmp4B46_thumb.jpg" width="1024" border="0"></a></td>
<td>
<p><span class="font4">The name of the factory class that will be used to create the context</span></p>
</td>
<td>
<p><span class="font0">oracle.j2ee.rmi.</span></p>
<p><span class="font0">RMIInitialContextFactory</span></p>
</td>
</tr>
<tr>
<td><a href="http://what-when-how.com/wp-content/uploads/2011/06/tmp4B47.jpg" target="_blank"><img title="tmp4B-47" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; width: 122pt; height: 28pt; border-right-width: 0px" height="235" alt="tmp4B-47" src="./JNDI as a component registry (EJB 3)_files/tmp4B47_thumb.jpg" width="1024" border="0"></a></td>
<td>
<p><span class="font4">The URL for the JNDI service provider</span></p>
</td>
<td>
<p><span class="font0">ormi://localhost:23791/ chapter1</span></p>
</td>
</tr>
<tr>
<td><a href="http://what-when-how.com/wp-content/uploads/2011/06/tmp4B48.jpg" target="_blank"><img title="tmp4B-48" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; width: 122pt; height: 37pt; border-right-width: 0px" height="316" alt="tmp4B-48" src="./JNDI as a component registry (EJB 3)_files/tmp4B48_thumb.jpg" width="1024" border="0"></a></td>
<td>
<p><span class="font4">The username or identity for authenticating the caller in the JNDI service provider</span></p>
</td>
<td>
<p><span class="font0">oc4jadmin</span></p>
</td>
</tr>
<tr>
<td><a href="http://what-when-how.com/wp-content/uploads/2011/06/tmp4B49.jpg" target="_blank"><img title="tmp4B-49" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; width: 122pt; height: 38pt; border-right-width: 0px" height="319" alt="tmp4B-49" src="./JNDI as a component registry (EJB 3)_files/tmp4B49_thumb.jpg" width="1024" border="0"></a></td>
<td>
<p><span class="font4">The password for the username/principal being used for authentication</span></p>
</td>
<td>
<p><span class="font0">welcome!</span></p>
</td>
</tr>
</tbody>
</table>
<p><span class="font13"></span></p>
<p><strong>In the second line of listing A.1,</strong> the lookup is performed using the context instantiated in the first line. The single parameter of the lookup method is the full name of the resource you are seeking. In our case, the JNDI name of the JDBC data source we are looking for happens to be jdbc/ActionBazaarDS. Note that because the lookup method returns the Object type, we must cast the retrieved resource to the correct type. In the case of EJBs, references returned by JNDI must be cast to a valid business interface implemented by the EJB. </p>
<p><a name="bookmark121"></a><strong>While the code in listing A.1 looks harmless,</strong> don’t be taken in by appearances. JNDI lookups were one of the primary causes for EJB 2′s complexity. First of all, you had to do lookups to access any resource managed by the container, even if you were only accessing data sources and EJBs from other EJBs located in the same JVM. Given that most EJBs in an application depend on other EJBs and resources, imagine the lines of repetitive JNDI lookup code littered across an average business application! To make matters worse, JNDI names of resources aren’t always that obvious to figure out, especially for resources that are bound to the environment naming context (which must use the arcane java:comp/env/ prefix for portability of applications instead of using a global JNDI name). </p>
<p><strong>The good news is that except for certain corner cases,</strong> you won’t have to deal with the evils of JNDI in EJB 3. EJB 3 puts the mechanical details of JNDI lookups well hidden behind metadata-based DI. DI does such a great job in abstraction that you won’t even know that JNDI lookups are happening behind the scenes, even for remote lookups. </p>

<script type="text/javascript">
    google_ad_client = "ca-pub-3548356617924720";
    google_ad_slot = "4305259831";
    google_ad_width = 200;
    google_ad_height = 90;
</script>
<!-- At end of article Link unit 200x90 -->
<script type="text/javascript" src="./JNDI as a component registry (EJB 3)_files/f.txt">
</script>

<script type="text/javascript">
    google_ad_client = "ca-pub-3548356617924720";
    google_ad_slot = "4305259831";
    google_ad_width = 200;
    google_ad_height = 90;
</script>
<!-- At end of article Link unit 200x90 -->
<script type="text/javascript" src="./JNDI as a component registry (EJB 3)_files/f.txt">
</script>


				</div>
			</div>

			<div id="comments">
			</div>
					<div class="prev_next post_nav">
						<p class="previous">Next post: <a href="http://what-when-how.com/enterprise-javabeans-3/database-tables-columns-rows-and-schema-ejb-3/" rel="prev">Database tables, columns, rows, and schema (EJB 3)</a></p>
						<p>Previous post: <a href="http://what-when-how.com/enterprise-javabeans-3/distributed-communication-with-rmi-ejb-3/" rel="next">Distributed communication with RMI (EJB 3)</a></p>
					</div>
		</div>

		<div id="sidebars">
			<div id="sidebar_1" class="sidebar">
				<ul class="sidebar_list">
<li class="widget widget_nrc" id="related-links-by-category"><h3>Related Links</h3>			<ul>
				<li class="serif"><span class="cat-name"><a href="http://what-when-how.com/category/enterprise-javabeans-3/" title="Enterprise JavaBeans 3">Enterprise JavaBeans 3</a></span><ul><li class="cat-item" id="related-cat-post-110227"><a href="http://what-when-how.com/enterprise-javabeans-3/ejb-overview/" title="EJB overview">EJB overview</a></li><li class="cat-item" id="related-cat-post-110216"><a href="http://what-when-how.com/enterprise-javabeans-3/understanding-ejb-types/" title="Understanding EJB types">Understanding EJB types</a></li><li class="cat-item" id="related-cat-post-110213"><a href="http://what-when-how.com/enterprise-javabeans-3/getting-inside-ejb/" title="Getting inside EJB">Getting inside EJB</a></li><li class="cat-item" id="related-cat-post-110210"><a href="http://what-when-how.com/enterprise-javabeans-3/renaissance-of-ejb/" title="Renaissance of EJB">Renaissance of EJB</a></li><li class="cat-item" id="related-cat-post-110197"><a href="http://what-when-how.com/enterprise-javabeans-3/new-features-simplifying-ejb/" title="New features: simplifying EJB">New features: simplifying EJB</a></li></ul></li>			</ul>
			</li><li class="widget thesis_widget_google_cse" id="google-custom-search">
<h3>:: Search WWH ::</h3>
<style type="text/css">
@import url(http://www.google.com/cse/api/branding.css);
</style>
<div class="cse-branding-bottom" style="background-color:#FFFFFF;color:#000000">
  <div class="cse-branding-form">
    <form action="http://www.google.com/cse" id="cse-search-box" target="_blank">
      <div>
        <input type="hidden" name="cx" value="partner-pub-3548356617924720:u0h0be-i8eq">
        <input type="hidden" name="ie" value="ISO-8859-1">
        <input type="text" name="q" size="60">
        <input type="submit" name="sa" value="Search">
      </div>
    </form>
  </div>
  <div class="cse-branding-logo">
    <img src="./JNDI as a component registry (EJB 3)_files/poweredby_FFFFFF.gif" alt="Google">
  </div>
  <div class="cse-branding-text">
    Custom Search
  </div>
</div>
</li>
				</ul>
			</div>
			<div id="sidebar_2" class="sidebar">
				<ul class="sidebar_list">
				</ul>
			</div>
		</div>
	</div>
</div>
</div>
<div id="footer_area" class="full_width">
<div class="page">
	<div id="footer">

<p><a href="http://what-when-how.com/help-unprivileged-children/" rel="nofollow">Help Unprivileged Children</a> &nbsp;¶&nbsp;

<a href="http://what-when-how.com/careers/" rel="nofollow">Careers</a> &nbsp;¶&nbsp;

<a href="http://what-when-how.com/privacy-statement/" rel="nofollow">Privacy Statement</a> &nbsp;¶&nbsp;

<a href="http://what-when-how.com/copyright-information/" rel="nofollow">Copyright Information</a></p>


<script type="text/javascript">
var sc_project=4900976; 
var sc_invisible=1; 
var sc_security="2107041e"; 
</script>
<script type="text/javascript" src="./JNDI as a component registry (EJB 3)_files/counter_xhtml.js"></script>
<noscript><div class="statcounter"><a 
class="statcounter"><img class="statcounter"
src="http://c.statcounter.com/4900976/0/2107041e/1/"
alt="" /></a></div></noscript>

	</div>
</div>
</div>
<!--[if lte IE 8]>
<div id="ie_clear"></div>
<![endif]-->

</body></html>
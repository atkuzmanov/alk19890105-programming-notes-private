<!DOCTYPE html>
<!-- saved from url=(0076)https://www.marcobehler.com/guides/java-microservices-a-practical-guide#_fin -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="robots" content="max-snippet:-1,max-image-preview:large,max-video-preview:-1">

  <link rel="shortcut icon" href="https://www.marcobehler.com/images/favicon.ico">

  <link rel="canonical" href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide">

  <meta name="description" content="You can use this guide to understand what Java microservices are, how you architect and build them. Also: A look at Java microservice libraries &amp; common questions.">

  <meta property="og:title" content="Java Microservices: A Practical Guide">
  <meta property="og:type" content="article">
  <meta property="og:url" content="https://www.marcobehler.com/guides/java-microservices-a-practical-guide">
  <meta property="og:description" content="You can use this guide to understand what Java microservices are, how you architect and build them. Also: A look at Java microservice libraries &amp; common questions.">
  <meta property="og:image" content="https://www.marcobehler.com/images/guides/undraw_online_test_gba7-45c329b0.png">

  <meta name="twitter:card" content="summary">
  <meta name="twitter:creator" content="Marco Behler">
  <meta name="twitter:site" content="@MarcoBehler">
  <meta name="twitter:url" content="https://www.marcobehler.com/guides/java-microservices-a-practical-guide">
  <meta name="twitter:title" content="Java Microservices: A Practical Guide">
  <meta name="twitter:description" content="You can use this guide to understand what Java microservices are, how you architect and build them. Also: A look at Java microservice libraries &amp; common questions.">
  <meta name="twitter:image" content="https://www.marcobehler.com/images/guides/undraw_online_test_gba7-45c329b0.png">

  <title>Java Microservices: A Practical Guide</title>

  <!-- Bootstrap CSS -->
  <link href="./Java Microservices_ A Practical Guide_files/css" rel="stylesheet" type="text/css">
  <link rel="stylesheet" href="./Java Microservices_ A Practical Guide_files/bootstrap.min.css">
  <link rel="stylesheet" href="./Java Microservices_ A Practical Guide_files/shariff.complete-00526bf0.css">
  <link href="./Java Microservices_ A Practical Guide_files/gifplayer.css" rel="stylesheet">

  <link rel="stylesheet" href="./Java Microservices_ A Practical Guide_files/custom-af311573.css">

    <!-- Global site tag (gtag.js) - Google Analytics -->
  <script type="text/javascript" async="" src="./Java Microservices_ A Practical Guide_files/f.txt"></script><script type="text/javascript" async="" src="./Java Microservices_ A Practical Guide_files/analytics.js"></script><script async="" src="./Java Microservices_ A Practical Guide_files/qevents.js"></script><script src="./Java Microservices_ A Practical Guide_files/443144319884590" async=""></script><script async="" src="./Java Microservices_ A Practical Guide_files/fbevents.js"></script><script async="" src="./Java Microservices_ A Practical Guide_files/js"></script>
  <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
          dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'UA-146539011-1');
      gtag('config', 'AW-828277359');
  </script>

  <!-- Facebook Pixel Code -->
  <script>
      !function (f, b, e, v, n, t, s) {
          if (f.fbq) return;
          n = f.fbq = function () {
              n.callMethod ?
                  n.callMethod.apply(n, arguments) : n.queue.push(arguments)
          };
          if (!f._fbq) f._fbq = n;
          n.push = n;
          n.loaded = !0;
          n.version = '2.0';
          n.queue = [];
          t = b.createElement(e);
          t.async = !0;
          t.src = v;
          s = b.getElementsByTagName(e)[0];
          s.parentNode.insertBefore(t, s)
      }(window, document, 'script',
          'https://connect.facebook.net/en_US/fbevents.js');
      fbq('init', '443144319884590');
      fbq('track', 'PageView');
  </script>

  <!-- End Facebook Pixel Code -->

  <!-- DO NOT MODIFY -->
  <!-- Quora Pixel Code (JS Helper) -->
  <script>
      !function (q, e, v, n, t, s) {
          if (q.qp) return;
          n = q.qp = function () {
              n.qp ? n.qp.apply(n, arguments) : n.queue.push(arguments);
          };
          n.queue = [];
          t = document.createElement(e);
          t.async = !0;
          t.src = v;
          s = document.getElementsByTagName(e)[0];
          s.parentNode.insertBefore(t, s);
      }(window, 'script', 'https://a.quora.com/qevents.js');
      qp('init', '88898ec3f33c4cd2bc9fb2de6e5433b4');
      qp('track', 'ViewContent');
  </script>



  <!-- End of Quora Pixel Code -->

  <!-- Hotjar Tracking Code for www.marcobehler.com -->
  <script>
      (function (h, o, t, j, a, r) {
          h.hj = h.hj || function () {
              (h.hj.q = h.hj.q || []).push(arguments)
          };
          h._hjSettings = {hjid: 1495926, hjsv: 6};
          a = o.getElementsByTagName('head')[0];
          r = o.createElement('script');
          r.async = 1;
          r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
          a.appendChild(r);
      })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');
  </script><script async="" src="./Java Microservices_ A Practical Guide_files/hotjar-1495926.js"></script>

  <script src="./Java Microservices_ A Practical Guide_files/cbd5c45929.js" crossorigin="anonymous"></script><link href="./Java Microservices_ A Practical Guide_files/free-v4-shims.min.css" media="all" rel="stylesheet" id="font-awesome-5-kit-css"><link href="./Java Microservices_ A Practical Guide_files/free-v4-font-face.min.css" media="all" rel="stylesheet" id="font-awesome-5-kit-css"><link href="./Java Microservices_ A Practical Guide_files/free.min.css" media="all" rel="stylesheet" id="font-awesome-5-kit-css">

<link type="text/css" href="./Java Microservices_ A Practical Guide_files/commento.css" rel="stylesheet" onload="window.commento.loadCssOverride()"><script async="" src="./Java Microservices_ A Practical Guide_files/modules.98591d9c2c879f3aa719.js" charset="utf-8"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script src="./Java Microservices_ A Practical Guide_files/f(1).txt"></script></head>

<body>

<noscript><img height="1" width="1" style="display:none"
                   src="https://www.facebook.com/tr?id=443144319884590&amp;ev=PageView&amp;noscript=1"
      /></noscript>
  <noscript>
    <img height="1" width="1" style="display:none" src="https://q.quora.com/_/ad/88898ec3f33c4cd2bc9fb2de6e5433b4/pixel?tag=ViewContent&amp;noscript=1"/>
  </noscript>

<div class="container">
  <header class="py-3">
    <div class="row flex-nowrap   justify-content-center ">
      <div class="col-6 col-md-4 pt-1 small">
        <a class="nav-link text-dark" href="https://www.marcobehler.com/">
          <img style="height: 20px;" src="./Java Microservices_ A Practical Guide_files/marco_behler-black-dbe99f23.svg">
          <span class="d-none d-md-inline-block">Marcobehler.com</span>
        </a>
      </div>

      <div class="col-6  justify-content-end d-flex ">

        <a class="nav-link text-dark" href="https://www.marcobehler.com/academy">Academy
        </a>

        <a class="nav-link text-dark" href="https://www.marcobehler.com/guides">Blog
        </a>

        <!--<a class="nav-link text-dark" href="/login">
            Login
        </a>
        <a class="nav-link text-dark font-weight-bold" href="/signup-flow?planId=free">Sign Up
        </a>-->
      <a class="btn btn-outline-secondary nav-link text-dark mr-3" href="https://www.marcobehler.com/login">Login</a><a class="btn btn-outline-secondary nav-link text-dark font-weight-bold" href="https://www.marcobehler.com/signup-flow?planId=free">Sign up free</a></div>


    </div>
  </header>
</div>


        <main role="main" class="pt-3 pb-3 container-fluid">
        <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="article">
  <div class="row">
    <div class="col-10 col-xl-7 mb-4 mx-auto">

      <div class="text-center  ">

            <img class="img-fluid mb-3 w-50" style="max-height: 12rem;" itemprop="image" alt="Java Microservices: A Practical Guide - header image" src="./Java Microservices_ A Practical Guide_files/undraw_online_test_gba7-f12d0418.svg">

        <h1 style="font-weight: bold">Java Microservices: A Practical Guide</h1>

          <h6 style="color: #777">Last updated
            on December 19, 2019 - <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#commento">13 comments</a></h6>
      </div>
  </div>
  </div>

  <div class="row">

 <nav class="col-md-2 d-block px-5 px-md-0 sidebar pb-3 pb-md-0">
      <div class="sticky-top">

           <div class="list-group pt-0 smaller" id="article-toc">

            <h6 class="sidebar-heading mb-1 mt-3">
                     <span>Quick Links</span>
                   </h6>

                        <ul class="nav flex-column"><li class="nav-item"><a class="nav-link py-1 " href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#_java_microservices_the_basics">Java Microservices: The Basics</a></li><li class="nav-item"><a class="nav-link py-1 " href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#_java_microservice_architecture">Java Microservice Architecture</a></li><li class="nav-item"><a class="nav-link py-1 " href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#_deploying_and_testing_java_microservices">Deploying and Testing Java Microservices</a></li><li class="nav-item"><a class="nav-link py-1 " href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#issues-and-questions">Common Java Microservice Questions</a></li><li class="nav-item"><a class="nav-link py-1 " href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#_conceptual_microservice_challenges">Conceptual Microservice Challenges</a></li><li class="nav-item"><a class="nav-link py-1 " href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#_fin">Fin</a></li></ul>
                      </div>



   </div>

    </nav>

      <div class="col-md-8 px-5 text-left">

            <p>You can use this guide to understand what Java microservices are, how you architect and build them. Also: A look at Java microservice libraries &amp; common questions.</p>

        <div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>[<strong>Editor’s note</strong>: At nearly 7,000 words, you probably don’t want to try reading this on a mobile device. Bookmark it and come back later.]</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_java_microservices_the_basics">Java Microservices: The Basics</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To get a real understanding of Java microservices, it makes sense to start with the very basics: The infamous Java monolith, what it is and what its advantages or disadvantages are.</p>
</div>
<div class="sect2">
<h3 id="_what_is_a_java_monolith">What is a Java monolith?</h3>
<div class="paragraph">
<p>Imagine you are working for a bank or a fintech start-up. You provide users a mobile app, which they can use to open up a new bank account.</p>
</div>
<div class="paragraph">
<p>In Java code, this will lead to a controller class that looks, <em>simplified</em>, like the following.</p>
</div>
<div id="pre-microservice" class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Controller</span>
<span class="type">class</span> <span class="class">BankController</span> {

    <span class="annotation">@PostMapping</span>(<span class="string"><span class="delimiter">"</span><span class="content">/users/register</span><span class="delimiter">"</span></span>)
    <span class="directive">public</span> <span class="type">void</span> register(RegistrationForm form) {
        validate(form);
        riskCheck(form);
        openBankAccount(form);
        <span class="comment">// etc..</span>
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>You’ll want to:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Validate the registration form.</p>
</li>
<li>
<p>Do a risk check on the user’s address to decide if you want to give him a bank account or not.</p>
</li>
<li>
<p>Open up the bank account</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Your BankController class will be packaged up, with all your other source code, into a bank.jar or bank.war file for deployment: A good, old monolith, containing all the code you need for your bank to run. (As a rough pointer, <em>initially</em> your .jar/.war file will have a size in the range of 1-100MB).</p>
</div>
<div class="paragraph">
<p>On your server, you then simply run your .jar file - that’s all you need to do to deploy Java applications.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./Java Microservices_ A Practical Guide_files/microservices-bank-1b.png" alt="microservices bank 1b" width="850" height="182">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_what_is_the_problem_with_java_monoliths">What is the problem with Java monoliths?</h3>
<div class="paragraph">
<p>At its core, there’s nothing wrong with a Java monolith. It is simply that project experience has shown that, if you:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Let many different programmers/teams/consultancies…​</p>
</li>
<li>
<p>Work on the same monolith under high pressure and unclear requirements…​</p>
</li>
<li>
<p>For a couple of years…​</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Then your small bank.jar file, turns into a gigabyte large code monster, that everyone fears deploying.</p>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_get_the_java_monolith_smaller">How to get the Java monolith smaller?</h3>
<div class="paragraph">
<p>This naturally leads to the question of how to get the monolith smaller. For now, your bank.jar runs in one JVM, one process on one server. Nothing more, nothing less.</p>
</div>
<div class="paragraph">
<p>Now you could come up with the idea to say: Well, the risk check service is being used by other departments in my company and it doesn’t <em>really</em> have anything to do with my Mono(lithic) Bank <em>domain</em>,
so we could try and cut it out of the monolith and deploy it as its own product, or more technically, run it as its own Java process.</p>
</div>
</div>
<div class="sect2">
<h3 id="_what_is_a_java_microservice">What is a Java Microservice?</h3>
<div class="paragraph">
<p>In practical terms, this means that instead of calling the riskCheck() method inside your BankController, you will move that method/bean with all its helper classes to its own Maven/Gradle project, put it under source control and deploy it independently from your banking monolith.</p>
</div>
<div class="paragraph">
<p>That whole extraction process does not make your new RiskCheck module a <em>microservice</em> per se and that is because the definition of microservices is open for interpretation (which leads to a fair amount of discussion in teams and companies).</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Is it micro if it only has 5-7 classes inside?</p>
</li>
<li>
<p>Are 100 or 1000 classes still micro?</p>
</li>
<li>
<p>Has it even got anything to do with the number of classes?</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Instead of theorizing about it, we’ll keep things pragmatic and do two things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Call <em>all separately deployable</em> services microservices - independent of size or domain boundaries.</p>
</li>
<li>
<p>Focus on the important topic of inter-service communication, because your microservices need ways to talk to each other.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>So, to sum up: Before you had one JVM process, one Banking monolith. Now you have a banking monolith JVM process and a RiskCheck microservice, which runs in its own JVM process. And your monolith now has to call that microservice for risk checks.</p>
</div>
<div class="paragraph">
<p>How do you do that?</p>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_communicate_between_java_microservices">How to communicate between Java Microservices?</h3>
<div class="paragraph">
<p>You basically have two choices: <em>synchronous communication</em> or <em>asynchronous communication</em>.</p>
</div>
<div class="sect3">
<h4 id="synchronous-communication">(HTTP)/REST - Synchronous Communication</h4>
<div class="paragraph">
<p>Synchronous microservice communication is usually done via HTTP and REST-like services that return XML or JSON - though this is by no means required (have a look at <a href="https://developers.google.com/protocol-buffers">Google’s Protocol Buffers</a> for example).</p>
</div>
<div class="paragraph">
<p>Use REST communication when you need an immediate response, which we do in our case, as risk-checking is mandatory before opening an account: No risk check, no account.</p>
</div>
<div class="paragraph">
<p>Tool-wise, check out <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#synchronous-rest-tools">Which libraries are the best for synchronous Java REST calls?</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="asynchronous-communication">Messaging - Asynchronous Communication</h4>
<div class="paragraph">
<p>Asynchronous microservice communication is usually done through messaging with a <a href="https://en.wikipedia.org/wiki/Java_Message_Service">JMS implementation</a> and/or with a protocol like <a href="https://www.amqp.org/">AMQP</a>. Usually, because the number of, for example, email/SMTP-driven integrations is not to be underestimated in practice.</p>
</div>
<div class="paragraph">
<p>Use it when you do not need an immediate response, say the users presses the 'buy-now' button and you want to generate an invoice, which certainly does not have to happen as part of the user’s purchase request-response cycle.</p>
</div>
<div class="paragraph">
<p>Tool-wise, check out <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#asynchronous-rest-tools">Which brokers are the best for asynchronous Java messaging?</a>.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_example_calling_rest_apis_in_java">Example: Calling REST APIs in Java</h3>
<div class="paragraph">
<p>Assuming we chose to go with synchronous microservice communication, our Java code <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#pre-microservice">from above</a> would then look something like this on a low-level. Low-level, because for microservice communication you usually create client libraries, that abstract the actual HTTP calls away from you.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Controller</span>
<span class="type">class</span> <span class="class">BankController</span> {

    <span class="annotation">@Autowired</span>
    <span class="directive">private</span> HttpClient httpClient;

    <span class="annotation">@PostMapping</span>(<span class="string"><span class="delimiter">"</span><span class="content">/users/register</span><span class="delimiter">"</span></span>)
    <span class="directive">public</span> <span class="type">void</span> register(RegistrationForm form) {
        validate(form);
        httpClient.send(riskRequest, responseHandler());
        setupAccount(form);
        <span class="comment">// etc..</span>
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Looking at the code it becomes clear, that you now must deploy two Java (micro)services. Your Bank and your RiskCheck service. You are going to end up with two JVMs, two processes. The graphic from before will look like this:</p>
</div>
<div id="microservice-basics-graphic" class="imageblock">
<div class="content">
<img src="./Java Microservices_ A Practical Guide_files/microservices-bank-2b.png" alt="microservices bank 2b" width="810" height="448">
</div>
</div>
<div class="paragraph">
<p>That’s all you need to develop a Java Microservices project: Build and deploy smaller pieces (.jar or .war files), instead of one large piece.</p>
</div>
<div class="paragraph">
<p>But that leaves the question: How <em>exactly</em> do you cut or setup those microservices? What are these smaller pieces? What is the right size?</p>
</div>
<div class="paragraph">
<p>Let’s do a reality check.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_java_microservice_architecture">Java Microservice Architecture</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In practice, there’s various ways that companies try to design or architect Microservice projects. It depends on if you are trying to turn an existing monolith into a microservices project, or if you are starting out with a new Greenfield project.</p>
</div>
<div class="sect2">
<h3 id="_from_monolith_to_microservices">From Monolith to Microservices</h3>
<div class="paragraph">
<p>One rather organic idea is to break microservices out of an existing monolith. Note, that "micro" here does not actually mean that the extracted services themselves will, indeed, be micro - they could still be quite large themselves.</p>
</div>
<div class="paragraph">
<p>Let’s look at some theory.</p>
</div>
<div class="sect3">
<h4 id="_the_idea_break_a_monolith_into_microservices">The Idea: Break a Monolith into Microservices</h4>
<div class="paragraph">
<p>Legacy projects lend themselves to a microservices approach. Mainly, for three reasons:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>They are often hard to maintain/change/extend.</p>
</li>
<li>
<p>Everyone, from developers, ops to management <span class="line-through">wants to make things simpler</span> wants stuff to be simpler.</p>
</li>
<li>
<p>You have (somewhat) clear domain boundaries, that means: You know what your software is supposed to do.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>This means you can have a look at your Java bank monolith and try to split it along <em>domain boundaries</em> - a sensible approach.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You could conclude that there should be an 'Account Management' microservice, that handles user data like names, addresses, phone numbers.</p>
</li>
<li>
<p>Or the aforementioned 'Risk Module', that checks user risk levels and which could be used by many other projects or even departments in your company.</p>
</li>
<li>
<p>Or an invoicing module, that sends out invoices via PDF or actual mail.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_reality_let_someone_else_do_it">Reality: Let someone else do it</h4>
<div class="paragraph">
<p>While this approach definitely looks good on paper and UML-like diagrams, it has its drawbacks. Mainly, you need very strong technical skills to pull it off. Why?</p>
</div>
<div class="paragraph">
<p>Because there is a huge difference between <em>understanding</em> that it would be a good thing to extract the, say, highly coupled account management module out of your monolith and <em>doing it</em> (properly).</p>
</div>
<div class="paragraph">
<p>Most enterprise projects reach the stage where developers are scared to, say, upgrade the 7-year-old Hibernate version to a newer one, which is just a library update but a fair amount of work trying to make sure not to break anything.</p>
</div>
<div class="paragraph">
<p>Those same developers are now supposed to dig deep into old, legacy code, with unclear database transaction boundaries and extract well-defined microservices? Possible, but often a real challenge and not solvable on a whiteboard or in architecture meetings.</p>
</div>
<img class="img-fluid img-thumbnail mx-auto d-block w-50 mb-2 lazy loaded" data-src="https://www.marcobehler.com/images/guides/undraw_escaping_my1b-8d8d97ad.png " src="./Java Microservices_ A Practical Guide_files/undraw_escaping_my1b-8d8d97ad.png" data-was-processed="true">
<div class="paragraph">
<p>This is already the first time in this article, where a quote from <a href="https://twitter.com/simonbrown/status/573072777147777024?lang=en">@simonbrown on Twitter</a> fits in:</p>
</div>
<blockquote class="b-1 blockquote text-center">
<p class="mb-0">I'll keep saying this ... if people can't build monoliths properly, microservices won't help.</p>
<footer class="blockquote-footer">Simon Brown</footer>
</blockquote>
</div>
</div>
<div class="sect2">
<h3 id="_greenfield_project_microservice_architecture">Greenfield Project Microservice Architecture</h3>
<div class="paragraph">
<p>Things look a bit different when developing new, greenfield Jav aprojects. Now, those three points from above look a bit different:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>You are starting with a clean slate, so there’s no old baggage to maintain.</p>
</li>
<li>
<p>Developers would like things to stay simple in the future.</p>
</li>
<li>
<p>The issue: You have a much foggier picture of domain boundaries: You don’t know what your software is actually supposed to do (hint: agile ;) )</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>This leads to various ways that companies try and tackle greenfield Java microservices projects.</p>
</div>
<div class="sect3">
<h4 id="_technical_microservice_architecture">Technical Microservice Architecture</h4>
<div class="paragraph">
<p>The first approach is the most obvious for developers, although the one highly recommended against. Props to <a href="https://twitter.com/hhariri">Hadi Hariri</a> for coming up with the "Extract Microservice" refactoring in IntelliJ.</p>
</div>
<img class="img-fluid img-thumbnail mx-auto d-block w-50 mb-2 lazy loaded" data-src="https://www.marcobehler.com/images/guides/extract_microservices_joke-f593982e.png " src="./Java Microservices_ A Practical Guide_files/extract_microservices_joke-f593982e.png" data-was-processed="true">
<div class="paragraph">
<p>While the following example is oversimplified to the extreme, actual implementations seen in real projects are unfortunately not too far off.</p>
</div>
<div class="paragraph">
<p><strong>Before Microservices</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Service</span>
<span class="type">class</span> <span class="class">UserService</span> {

    <span class="directive">public</span> <span class="type">void</span> register(User user) {
        <span class="predefined-type">String</span> email = user.getEmail();
        <span class="predefined-type">String</span> username =  email.substring(<span class="integer">0</span>, email.indexOf(<span class="string"><span class="delimiter">"</span><span class="content">@</span><span class="delimiter">"</span></span>));
        <span class="comment">// ...</span>
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>With a substring Java microservice</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Service</span>
<span class="type">class</span> <span class="class">UserService</span> {

    <span class="annotation">@Autowired</span>
    <span class="directive">private</span> HttpClient client;

    <span class="directive">public</span> <span class="type">void</span> register(User user) {
        <span class="predefined-type">String</span> email = user.getEmail();
        <span class="comment">// now calling the substring microservice via http</span>
        <span class="predefined-type">String</span> username =  httpClient.send(substringRequest(email), responseHandler());
        <span class="comment">// ...</span>
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>So, you are essentially wrapping a Java method call into a HTTP call, with no obvious reasons to do so. One reason, however, is: Lack of experience and trying to force a Java microservices approach.</p>
</div>
<div class="paragraph">
<p><strong>Recommendation</strong>: Don’t do it.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_workflow_oriented_microservice_architecture">Workflow Oriented Microservice Architecture</h3>
<div class="paragraph">
<p>The next common approach is, to module your Java microservices after your workflow.</p>
</div>
<div class="paragraph">
<p>Real-Life example: In Germany, when you go to a (public) doctor he needs to record your appointment in his health software CRM.</p>
</div>
<div class="paragraph">
<p>To get paid from the insurance he will send in your treatment data and that of all other patients he treated to an intermediary via XML.</p>
</div>
<div class="paragraph">
<p>The intermediary will have a look at that XML file and (simplified):</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Try and validate the file that it is proper XML</p>
</li>
<li>
<p>Try and validate it for plausibility: did it make sense that a 1 year old got three tooth cleanings in a day from a gynecologist?</p>
</li>
<li>
<p>Enhance the XML with some other bureaucratic data</p>
</li>
<li>
<p>Forward the XML to the insurance to trigger payments</p>
</li>
<li>
<p>And model the whole way back to the doctor, including a "success" message or "please re-send that data entry again - once it makes sense"</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>If you now try and model this workflow with microservives, you will end up with at least.</p>
</div>
<div class="paragraph">
<p><strong>Note</strong>: Communication between Microservices is irrelevant in this example, but could well be done asynchronously with a message broker like RabbitMQ, as the doctor does not get immediate feedback, anyway.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./Java Microservices_ A Practical Guide_files/microservices-bank-3b.png" alt="microservices bank 3b" width="1370" height="154">
</div>
</div>
<div class="paragraph">
<p>Again, this is something that looks good on paper, but immediately leads to several questions:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Do you feel the need to deploy six applications to process 1 xml file?</p>
</li>
<li>
<p>Are these microservices <em>really</em> independent from each other? They can be deployed independently from each other? With different versions and API schemes?</p>
</li>
<li>
<p>What does the plausibility-microservice do if the validation microservice is down? Is the system then still running?</p>
</li>
<li>
<p>Do these microservices now share the same database (they sure need some common data in a database table) or are you going to take the even bigger hammer of giving them all their own database?</p>
</li>
<li>
<p>And a ton of other infrastructure/operations questions.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Interestingly, for some architects the above diagram reads simpler, because every service now has its exact, well-defined <em>purpose</em>. Before, it looked like this scary monolith:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./Java Microservices_ A Practical Guide_files/microservices-bank-4b.png" alt="microservices bank 4b" width="370" height="210">
</div>
</div>
<div class="paragraph">
<p>While arguments can be made about the simplicity of those diagrams, you now definitely have these <em>additional</em> operational challenges to solve.</p>
</div>
<div class="paragraph">
<p>You…​</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Don’t just need to deploy one application, but at least six.</p>
</li>
<li>
<p>Might even need to deploy multiple databases, depending on how far you want to take your microservice architecture.</p>
</li>
<li>
<p>Have to make sure that every system is online, healthy and working.</p>
</li>
<li>
<p>Have to make sure that your calls between microservices are actually <em>resilient</em> (see <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#resilience">How to make a Java microservice resilient?</a>).</p>
</li>
<li>
<p>And everything else this setup implies - from local development setups to integration testing.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Recommendation</strong>:</p>
</div>
<div class="paragraph">
<p>Unless:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>you are Netflix (you are not)…​</p>
</li>
<li>
<p>you have super-strong operation skills: you open up your development IDE, which triggers a chaos monkey that DROPs your production database which easily auto-recovers in 5 seconds.</p>
</li>
<li>
<p>or you feel like <a href="https://twitter.com/jackkleeman/status/1190354757308862468?lang=en">@monzo</a> in giving 1500 microservices a try, simply because you can.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>→ Don’t do it.</p>
</div>
<div class="paragraph">
<p>In less hyperbole, though.</p>
</div>
<div class="paragraph">
<p>Trying to model microservices after domain boundaries is a very sensible approach. But a domain boundary (say user management vs invoicing) does not mean taking a single workflow and splitting it up into its tiniest individual pieces  (receive XML, validate XML, forward XML).</p>
</div>
<div class="paragraph">
<p>Hence, whenever you are starting out with a new Java microservices project and the domain boundaries are still very vague, try to keep the size of your microservices on the <em>lower end</em>. You can always add more modules later on.</p>
</div>
<div class="paragraph">
<p>And make sure that you have exceptionally strong DevOps skills across your team/company/division to support your new infrastructure.</p>
</div>
</div>
<div class="sect2">
<h3 id="_polyglot_or_team_oriented_microservice_architecture">Polyglot or Team Oriented Microservice Architecture</h3>
<div class="paragraph">
<p>There is a third, almost libertarian approach to developing microservices: Giving your teams or even individuals the possibility to implement user stories with as many languages or microservices they want (marketing term: polyglot programming).</p>
</div>
<div class="paragraph">
<p>So the XML Validation service above could be written in Java, while the Plausibility Microservice is written in Haskell (to make it mathematically sound) and the Insurance Forwarding Microservice should be written in Erlang (because it <em>really</em> needs to scale ;) ).</p>
</div>
<div class="paragraph">
<p>What might look like fun from a developer’s perspective (developing a perfect system with your perfect language in an isolated setting) is basically never what an organization wants: Homogenization and standardization.</p>
</div>
<div class="paragraph">
<p>That means a relatively standardized set of languages, libraries and tools so that other developers can keep maintaining your Haskell microservice in the future, once you are off to greener pastures.</p>
</div>
<img class="img-fluid img-thumbnail mx-auto d-block w-50 mb-2 lazy loaded" data-src="https://www.marcobehler.com/images/guides/undraw_Ride_till_I_can_no_more_44wq-b175e273.png " src="./Java Microservices_ A Practical Guide_files/undraw_Ride_till_I_can_no_more_44wq-b175e273.png" data-was-processed="true">
<div class="paragraph">
<p>What’s interesting: Historically standardization went way too far. Developers in big Fortune 500 companies were sometimes not even allowed to use Spring, because it was 'not in the company’s technology blueprint'. But going full-on polyglot is pretty much the same thing, just the other side of the same coin.</p>
</div>
<div class="paragraph">
<p><strong>Recommendation</strong> : If you are going polyglot, try smaller diversity in the same programming language <em>eco-system</em>. Example: Kotlin and Java (JVM-based with 100% compatibility between each other), not Haskell and Java.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_deploying_and_testing_java_microservices">Deploying and Testing Java Microservices</h2>
<div class="sectionbody">
<div class="paragraph">
<p>It helps to have a quick look back <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#microservice-basics-graphic">at the basics</a>, mentioned at the beginning of this article. Any server-side Java program, hence also any microservice, is just a .jar/.war file.</p>
</div>
<div class="paragraph">
<p>And there’s this one great thing about the Java ecosystem, or rather the JVM: You write your Java code once, you can run it basically on any operating system you want provided you didn’t compile your code with a newer Java version than your target JVM’s versions).</p>
</div>
<div class="paragraph">
<p>It’s important to understand this, especially when it comes to topics like Docker, Kubernetes or (shiver) <em>The Cloud</em>. Why? Let’s have a look at different deployment scenarios:</p>
</div>
<div class="sect2">
<h3 id="_a_bare_minimum_java_microservice_deployment_example">A bare minimum Java microservice deployment example</h3>
<div class="paragraph">
<p>Continuing with the bank example, we ended up with our monobank.jar file (the monolith) and our freshly extracted riskengine.jar (the first microservice).</p>
</div>
<div class="paragraph">
<p>Let’s also assume that both applications, just like any other application in the world, need a .properties file, be it just the database url and credentials.</p>
</div>
<div class="paragraph">
<p>A bare minimum deployment could hence consist of just two directories, that look roughly like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="console">-r-r------ 1 ubuntu ubuntu     2476 Nov 26 09:41 application.properties
-r-x------ 1 ubuntu ubuntu 94806861 Nov 26 09:45 monobank-384.jar

ubuntu@somemachine:/var/www/www.monobank.com/java$ java -jar monobank-384.jar

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
...</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="console">-r-r------ 1 ubuntu ubuntu     2476 Nov 26 09:41 application.properties
-r-x------ 1 ubuntu ubuntu 94806861 Nov 26 09:45 risk-engine-1.jar

ubuntu@someothermachine:/var/www/risk.monobank.com/java$ java -jar risk-engine-1.jar

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
...</code></pre>
</div>
</div>
<div class="paragraph">
<p>This leaves open the question: How do you get your .properties and .jar file onto the server?</p>
</div>
<div class="paragraph">
<p>Unfortunately, there’s a variety of <em>alluring</em> answers to that question.</p>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_use_build_tools_ssh_ansible_for_java_microservice_deployments">How to use Build Tools, SSH &amp; Ansible for Java microservice deployments</h3>
<div class="paragraph">
<p>The boring, but perfectly fine answer to Java microservice deployments is how admins deployed <em>any</em> Java server-side program in companies in the past 20 years. With a mixture of:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Your favorite build tool (Maven, Gradle)</p>
</li>
<li>
<p>Good old SSH/SCP for copying your .jars to servers</p>
</li>
<li>
<p>Bash scripts to manage your deployment scripts and servers</p>
</li>
<li>
<p>Or even better: some <a href="https://www.ansible.com/">Ansible</a> scripts.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you are not fixated on creating a breathing cloud of ever auto-load-balancing servers, chaos monkeys nuking your machines, or the warm and fuzzy-feeling of seeing ZooKeeper’s leader election working, then this setup will take you very far.</p>
</div>
<div class="paragraph">
<p>Oldschool, boring, but working.</p>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_use_docker_for_java_microservice_deployments">How to use Docker for Java microservice deployments</h3>
<div class="paragraph">
<p>Back to the alluring choices. A couple of years ago, <a href="https://www.docker.com/">Docker</a> or the topic of containerization hit the scene.</p>
</div>
<div class="paragraph">
<p>If you have no previous experience with it, this is what it is all about for end-users or developers:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>A container is (simplified) like a good old virtual machine, but more lightweight. Have a look at <a href="https://stackoverflow.com/a/16048358">this Stackoverflow</a> answer to understand what lightweight means in this context.</p>
</li>
<li>
<p>A container guarantees you that it is portable, it runs anywhere. Does this sound familiar?</p>
</li>
</ol>
</div>
<div class="imageblock">
<div class="content">
<img src="./Java Microservices_ A Practical Guide_files/docker-1a.png" alt="docker 1a" width="930" height="378">
</div>
</div>
<div class="paragraph">
<p>Interestingly, with the <a href="https://www.marcobehler.com/guides/a-guide-to-java-versions-and-features">JVM’s portability and backwards compatibility</a> this doesn’t sound like major benefits. You could just download a JVM.zip on any server, Raspberry Pi (or even mobile phone), unzip it and run any .jar file you want.</p>
</div>
<div class="paragraph">
<p>It looks a bit different for languages like PHP or Python, where version incompatibilities or deployment setups historically were more complex.</p>
</div>
<div class="paragraph">
<p>Or if your Java application depends on a ton of other installed services (with the right version numbers): Think of a database like Postgres or key-value store like Redis.</p>
</div>
<div class="paragraph">
<p>So, Docker’s primary benefit for Java microservices, or rather Java applications lies in:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Setting up homogenized test or integration environments, with tools like <a href="https://www.testcontainers.org/">Testcontainers</a>.</p>
</li>
<li>
<p>Making complex deployables "simpler" to install. Take the <a href="https://discourse.org/">Discourse</a> forum software. You can install it with one Docker image, that contains everything you need: From the Discourse software written in Ruby, to a Postgres database, to Redis and the kitchen sink.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If your deployables look similar or you want to run a nice, little Oracle database on your development machine, give Docker a try.</p>
</div>
<div class="paragraph">
<p>So, to sum things up, instead of simply scp’ing a .jar file, you will now:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Bundle up your jar file into a Docker image</p>
</li>
<li>
<p>Transfer that docker image to a private docker registry</p>
</li>
<li>
<p>Pull and run that image on your target platform</p>
</li>
<li>
<p>Or scp the Docker image directly to your prod system and run it</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_use_docker_swarm_or_kubernetes_for_java_microservice_deployments">How to use Docker Swarm or Kubernetes for Java microservice deployments</h3>
<div class="paragraph">
<p>Let’s say you are giving Docker a try. Every time you deploy your Java microservice, you now create a Docker image which bundles your .jar file. You have a couple of these Java microservices and you want to deploy these services to a couple of machines: a <em>cluster</em>.</p>
</div>
<div class="paragraph">
<p>Now the question arises: How do you manage that cluster, that means run your Docker containers, do health checks, roll out updates, scale (brrrr)?</p>
</div>
<div class="paragraph">
<p>Two possible answers to that question are <a href="https://docs.docker.com/engine/swarm/">Docker Swarm</a> and <a href="https://kubernetes.io/">Kubernetes</a>.</p>
</div>
<div class="paragraph">
<p>Going into detail on both options is not possible in the scope of this guide, but the reality takeaway is this: Both options in the end rely on you writing <a href="https://en.wikipedia.org/wiki/YAML">YAML</a> files (see <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#yaml-tales">Not a question: Yaml Indentation Tales</a>) to manage your cluster. Do a quick search on Twitter if you want to know what feelings that invokes in practice.</p>
</div>
<div class="paragraph">
<p>So the deployment process for your Java microservices now looks a bit like this:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Setup and manage Docker Swarm/Kubernetes</p>
</li>
<li>
<p>Everything from the Docker steps above</p>
</li>
<li>
<p>Write and execute YAML until <span class="line-through">your eyes bleed</span> things are working</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_test_java_microservices">How to test Java microservices</h3>
<div class="paragraph">
<p>Let’s assume you solved deploying microservices in production, but how do you integration test your n-microservices during development? To see if a complete workflow is working, not just the single pieces?</p>
</div>
<div class="paragraph">
<p>In practice, you’ll find three different ways:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>With a bit of extra work (and if you are using frameworks like Spring Boot), you can wrap all your microservices into one launcher class, and boot up all microservices with one Wrapper.java class - depending if you have enough memory on your machine to run all of your microservices.</p>
</li>
<li>
<p>You can <span class="line-through">try to</span> replicate your Docker Swarm or Kubernetes setup locally.</p>
</li>
<li>
<p>Simply don’t do integration tests locally anymore. Instead have a dedicated DEV/TEST environment. It’s what a fair numbers of teams actually do, succumbing to the pain of local microservice setups.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Furthermore, in addition to your Java microservices, you’ll likely also need an up and running message broker (think: <a href="https://activemq.apache.org/">ActiveMQ</a> or <a href="https://www.rabbitmq.com/">RabbitMQ</a>) or maybe an email server or any other messaging component that your Java microservices need to communicate with each other.</p>
</div>
<div class="paragraph">
<p>This leads to a fair amount of underestimated complexity on the DevOps side. Have a look at <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#microservice-testing">Microservice Testing Libraries</a> to mitigate some of that pain.</p>
</div>
<div class="paragraph">
<p>In any case, this complexity leads us to common Microservice issues:</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="issues-and-questions">Common Java Microservice Questions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let’s have a look at Java specific microservices issues, from more abstract stuff like resilience to specific libraries.</p>
</div>
<div class="sect2">
<h3 id="resilience">How to make a Java microservice resilient?</h3>
<div class="paragraph">
<p>To recap, when building microservices, you are essentially swapping out JVM method calls with <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#synchronous-communication">synchronous HTTP calls</a> or <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#asynchronous-communication">asynchronous messaging</a>.</p>
</div>
<div class="paragraph">
<p>Whereas a method call execution is basically guaranteed (with the exception of your JVM exiting abruptly), a network call is, by default, unreliable.</p>
</div>
<div class="paragraph">
<p>It could work, it could also not work for various reasons: From the network being down or congested, to a new firewall rule being implemented to your message broker exploding.</p>
</div>
<div class="paragraph">
<p>To see what implications that has, let’s have a look at an exemplary <em>BillingService</em> example.</p>
</div>
<div class="sect3">
<h4 id="_httprest_resilience_patterns">HTTP/REST Resilience Patterns</h4>
<div class="paragraph">
<p>Say customers can buy e-books on your companies' website. For that, you just implemented a billing microservice, that your webshop can call to generate the actual PDF invoices.</p>
</div>
<div class="paragraph">
<p>For now, we’ll do that call synchronously, via HTTP. (It would make more sense to call that service asynchronously, because PDF generation doesn’t have to be instant from a user’s perspective. But we want to re-use this very example in the next section and see the differences.)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Service</span>
<span class="type">class</span> <span class="class">BillingService</span> {

    <span class="annotation">@Autowired</span>
    <span class="directive">private</span> HttpClient client;

     <span class="directive">public</span> <span class="type">void</span> bill(User user, Plan plan) {
        Invoice invoice = createInvoice(user, plan);
        httpClient.send(invoiceRequest(user.getEmail(), invoice), responseHandler());
        <span class="comment">// ...</span>
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Think about what kind of possible results that HTTP call could have. To generalize, you will end up with three possible results:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>OK</strong>: The call went through and the invoice got created successfully.</p>
</li>
<li>
<p><strong>DELAYED</strong>: The call went through but took an unusually long amount of time to do so.</p>
</li>
<li>
<p><strong>ERROR</strong>: The call did not go through, maybe because you sent an incompatible request, or the system was down.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Handling errors, not just the happy-cases, is expected for any program. It is the same for microservices, even though you have to take extra care
to keep all of your deployed API versions compatible, as soon as you start with individual microservice deployments and releases.</p>
</div>
<div class="paragraph">
<p>And if you want to go full-on chaos-monkey, you will also have to live with the possibility that your servers just get nuked during request processing and you might want the request to get re-routed to another, working instance.</p>
</div>
<img class="img-fluid img-thumbnail mx-auto d-block w-50 mb-2 lazy loaded" data-src="https://www.marcobehler.com/images/guides/undraw_road_sign_mfpo-1db036f9.png " src="./Java Microservices_ A Practical Guide_files/undraw_road_sign_mfpo-1db036f9.png" data-was-processed="true">
<div class="paragraph">
<p>An interesting 'warning' case is the delayed case. Maybe the responding’s microservice hard-disk is running full and instead of 50ms, it takes 10 seconds to respond. This can get even more interesting when you are experiencing
a certain load, so that the unresponsiveness of your BillingService starts <em>cascading</em> through your system. Think of a slow kitchen slowly starting the block all the waiters of a restaurant.</p>
</div>
<div class="paragraph">
<p>This section obviously cannot give in-depth coverage on the microservice resilience topic, but serves as a reminder for developers that this is something to actually <em>tackle</em> and <em>not ignore</em> until your first release (which from experience, happens more often than it should)</p>
</div>
<div class="paragraph">
<p>A popular library that helps you think about latency and fault tolerance, is <a href="https://github.com/Netflix/Hystrix">Netflix’s Hystrix</a>. Use its documentation to dive more into the topic.</p>
</div>
</div>
<div class="sect3">
<h4 id="_messaging_resilience_patterns">Messaging Resilience Patterns</h4>
<div class="paragraph">
<p>Let’s take a closer look at asynchronous communication. Our BillingService code might now look something like this, providing we use <a href="https://spring.io/">Spring</a> and <a href="https://www.rabbitmq.com/">RabbitMQ</a> for our messaging.</p>
</div>
<div class="paragraph">
<p>To create an invoice, we now send a message to our RabbitMQ message broker, which has some workers waiting for new messages. These workers create the PDF invoices and send them out to the respective users.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Service</span>
<span class="type">class</span> <span class="class">BillingService</span> {

    <span class="annotation">@Autowired</span>
    <span class="directive">private</span> RabbitTemplate rabbitTemplate;

     <span class="directive">public</span> <span class="type">void</span> bill(User user, Plan plan) {
        Invoice invoice = createInvoice(user, plan);
        <span class="comment">// converts the invoice to,for example, json and uses it as the message's body</span>
        rabbitTemplate.convertAndSend(exchange, routingkey, invoice);
        <span class="comment">// ...</span>
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now the potential error cases look a bit different, as you don’t get immediate OK or ERROR responses anymore, like you did with synchronous HTTP communication. Instead, you’ll roughly have these three error cases:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Was my message delivered and consumed by a worker? Or did it get lost? (The user gets no invoice).</p>
</li>
<li>
<p>Was my message delivered just once? Or delivered more than once and only processed exactly once? (The user would get multiple invoices).</p>
</li>
<li>
<p>Configuration: From "Did I use the right routing-keys/exchange names", to is "my message broker setup and maintained correctly or are its queues overflowing?" (The user gets no invoice).</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Again, it is not in the scope of this guide to go into detail on every single asynchronous microservice resilience pattern. More so, it is meant as pointers in the right direction, especially as it also depends on the actual messaging technology you are using. Examples:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If you are using JMS implementations, like <a href="https://activemq.apache.org/">ActiveMQ</a>, you could want to trade speed for the guarantees of <a href="https://www.atomikos.com/">two-phase (XA) commits</a>.</p>
</li>
<li>
<p>If you are using RabbitMQ you at least want to make sure to have read and understood <a href="https://www.rabbitmq.com/reliability.html">this guide</a> and then think hard about acknowledgements, confirms and message reliability in general.</p>
</li>
<li>
<p>And also have someone with experience in setting up e.g. Active or RabbitMQ servers and configuring them properly, especially when used in combination with clustering and Docker (network splits, anyone? ;) )</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_which_java_microservice_framework_is_the_best">Which Java microservice framework is the best?</h3>
<div class="paragraph">
<p>On one hand you have established and very popular choices like <a href="https://spring.io/projects/spring-boot">Spring Boot</a>, which makes it very easy to build .jar files that come with an embedded web server like Tomcat or Jetty and that you can immediately run anywhere. A perfect fit for building microservice applications.</p>
</div>
<div class="paragraph">
<p>Recently though, and partially inspired by parallel developments like reactive programming, <a href="https://kubernetes.io/">Kubernetes</a> or <a href="https://www.graalvm.org/">GraalVM</a>, a couple of, dedicated microservice frameworks have arisen.</p>
</div>
<div class="paragraph">
<p>To name a few: <a href="https://quarkus.io/">Quarkus</a>, <a href="https://micronaut.io/">Micronaut</a>,  <a href="https://vertx.io/">Vert.x</a>, <a href="https://helidon.io/#/">Helidon</a>.</p>
</div>
<div class="paragraph">
<p>In the end, you will have to make your own choice, but this article can give some, maybe unconventional, guidance:</p>
</div>
<div class="paragraph">
<p>With the exception of Spring Boot, all microservices frameworks generally market themselves as <em>blazingly fast</em>, <em>monumentally quick startup time</em>, <em>low memory footprint</em>, able to <em>scale indefinitely</em>, with impressive graphs comparing themselves against the Spring Boot behemoth or against each other.</p>
</div>
<div class="paragraph">
<p>This is clearing hitting a nerve with developers who are maintaining legacy projects that sometimes take minutes to boot-up or cloud-native developers who want to start-stop as many micro-containers as <span class="line-through">they now can or want</span> they need in 50ms.</p>
</div>
<img class="img-fluid img-thumbnail mx-auto d-block w-50 mb-2 lazy loaded" data-src="https://www.marcobehler.com/images/guides/undraw_trends_a5mf-8b7b5b09.png " src="./Java Microservices_ A Practical Guide_files/undraw_trends_a5mf-8b7b5b09.png" data-was-processed="true">
<div class="paragraph">
<p>The issue, however, is that (artificial) bare metal startup times and re-deploy times barely have an effect on a project’s overall success, much less so than a strong framework ecosystem, strong documentation, community and strong developer skills.</p>
</div>
<div class="paragraph">
<p>You’ll have to look at it this way.</p>
</div>
<div class="paragraph">
<p>If until now:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You let your ORMs run rampage and generate hundreds of queries for simple workflows.</p>
</li>
<li>
<p>You needed endless gigabytes for your moderately complex monolith to run.</p>
</li>
<li>
<p>You added so much code and complexity that (disregarding potentially slow starters like Hibernate) your application now need minutes to boot up.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Then adding <em>additional</em> Microservice challenges (think: resilience, network, messaging, DevOps, infrastructure) <em>on top</em> will have a <em>much heavier</em> impact on your project, than booting up an empty hello world. And for hot redeploys during development, you finally might want to look into solutions like <a href="https://www.jrebel.com/products/jrebel">JRebel</a> or <a href="http://dcevm.github.io/">DCEVM</a>.</p>
</div>
<div class="paragraph">
<p>To go back to <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#simon-brown">Simon Brown’s</a> quote: If people cannot build (fast &amp; efficient) monoliths, they will be having a hard time building (fast &amp; efficient) microservices - no matter the framework.</p>
</div>
<div class="paragraph">
<p>So, choose your framework wisely.</p>
</div>
</div>
<div class="sect2">
<h3 id="synchronous-rest-tools">Which libraries are the best for synchronous Java REST calls?</h3>
<div class="paragraph">
<p>On to the more practical aspects of calling HTTP REST APIs. On the low-level technical side, you are probably going to end up with one of the following HTTP client libraries:</p>
</div>
<div class="paragraph">
<p><a href="https://openjdk.java.net/groups/net/httpclient/intro.html">Java’s own HttpClient</a> (since Java 11), <a href="https://hc.apache.org/httpcomponents-client-4.5.x/index.html">Apache’s HttpClient</a> or <a href="https://square.github.io/okhttp/">OkHttp</a>.</p>
</div>
<div class="paragraph">
<p>Note that I am saying 'probably' here because there is a gazillion other ways as well, from good old <a href="https://github.com/jax-rs">JAX-RS clients</a> to modern <a href="https://www.oracle.com/technical-resources/articles/java/jsr356.html">WebSocket</a> clients.</p>
</div>
<div class="paragraph">
<p>In any case, there is a trend towards HTTP client generation, instead of messing around with HTTP calls yourself. For that, you want to have a look at the <a href="https://github.com/OpenFeign/feign">OpenFeign</a> project and its documentation as a starting point for further reading.</p>
</div>
</div>
<div class="sect2">
<h3 id="asynchronous-rest-tools">Which brokers are the best for asynchronous Java messaging?</h3>
<div class="paragraph">
<p>Starting out with asynchronous messaging, you are likely going to end up with either <a href="https://activemq.apache.org/">ActiveMQ (Classic or Artemis)</a>, <a href="https://www.rabbitmq.com/">RabbitMQ</a> or <a href="https://kafka.apache.org/">Kafka</a>. Again, this is just a popular pick.</p>
</div>
<div class="paragraph">
<p>Here’s a couple of random points, though:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>ActiveMQ and RabbitMQ are both traditional, fully fledged message brokers. This means a rather smart broker, and dumb consumers.</p>
</li>
<li>
<p>ActiveMQ historically had the advantage of easy embedding (for testing), which can be mitigated with RabbitMQ/Docker/TestContainer setups</p>
</li>
<li>
<p>Kafka is <em>not</em> a traditional broker. It is quite the reverse, essentially a relatively 'dumb' message store (think log file) needing smarter consumers for processing.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To get a better understanding on when to use RabbitMQ( or traditional message brokers in general) or Kafka, have a look at <a href="https://content.pivotal.io/blog/understanding-when-to-use-rabbitmq-or-apache-kafka">Pivotal’s matching blog post</a> as a <em>starting point</em>.</p>
</div>
<div class="paragraph">
<p>In general, though, try to dismiss <em>any</em> artificial performance reasons when choosing your broker. There was a time when teams and online communities argued a ton about how fast RabbitMQ was and how slow ActiveMQ was.</p>
</div>
<div class="paragraph">
<p>Now you are having the same arguments on RabbitMQ being slow with <em>just</em> a consistent 20-30K/messages every.single.second. Kafka is cited with 100K messages/a second. For one, these kinds of comparisons conveniently leave out that you are, in fact, comparing apples and oranges.</p>
</div>
<div class="paragraph">
<p>But even more so: Both throughput numbers might be on the lower or medium side for <a href="https://www.alibabagroup.com/en/global/home">Alibaba Group</a>, but you author has <em>never</em> seen projects of this size (<em>millions</em> of messages every minute) in the real world. They definitely exist, but these numbers are nothing to worry about for the other 99% of regular Java business projects.</p>
</div>
<div class="paragraph">
<p>So, ignore the hype and choose wisely.</p>
</div>
</div>
<div class="sect2">
<h3 id="microservice-testing">Which libraries can I use for microservice testing?</h3>
<div class="paragraph">
<p>Depending on your stack  you might end up using <a href="https://spring.io/guides/gs/testing-web/">Spring specific tools</a> (Spring ecosystem), or something like <a href="http://arquillian.org/">Arquillian</a> (JavaEE ecosystem).</p>
</div>
<div class="paragraph">
<p>You’ll want to have a look at Docker and the really good <a href="https://www.testcontainers.org/">Testcontainers</a> library, that helps you , for example, easily and quickly setup an Oracle database for your local development or integration tests.</p>
</div>
<div class="paragraph">
<p>For mocking out whole HTTP servers, have a look at <a href="http://wiremock.org/">Wiremock</a>. For testing asynchronous messaging, try to embedding (ActiveMQ) or dockering (RabbitMQ) and then writing tests with the <a href="https://github.com/awaitility/awaitility">Awaitility DSL</a>.</p>
</div>
<div class="paragraph">
<p>Other than that, all your usual suspects apply, like <a href="https://junit.org/junit5/">Junit</a>, <a href="https://testng.org/doc/">TestNG</a> to <a href="https://joel-costigliola.github.io/assertj/">AssertJ</a> and <a href="https://site.mockito.org/">Mockito</a>.</p>
</div>
<div class="paragraph">
<p>Note that this is by no means a comprehensive list and if you are missing your favorite tool, post it in the comments section and I’ll pick it up in the next revision of this guide.</p>
</div>
</div>
<div class="sect2">
<h3 id="_how_do_i_enable_logging_for_all_my_java_microserviecs">How do I enable logging for all my Java microserviecs?</h3>
<div class="paragraph">
<p>Logging with microservices is an interesting and rather complex topic. Instead of having one log file that you can less or grep, you now have n-log files, that you would like to see combined.</p>
</div>
<div class="paragraph">
<p>A great starting point for the whole logging ecosystem is <a href="https://www.marcobehler.com/guides/a-guide-to-logging-in-java">this article</a>. Make sure to read it, especially the Centralized Logging section in terms of microservices.</p>
</div>
<div class="paragraph">
<p>In practice, you’ll find various approaches:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A sysadmin writing some scripts that collect and merge log files from various server into one log file and put them onto FTP servers for you to download.</p>
</li>
<li>
<p>Run cat/grep/unig/sort combos in parallel SSH sessions. You can tell your manager: <a href="https://twitter.com/mipsytipsy/status/1202819893231403011?s=09">that’s what Amazon AWS does internally</a>.</p>
</li>
<li>
<p>Use a tool like <a href="https://www.graylog.org/">Graylog</a> or the <a href="https://www.elastic.co/what-is/elk-stack">ELK Stack (Elasticsearch, Logstash, Kibana)</a></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_how_do_my_microservices_find_each_other">How do my microservices find each other?</h3>
<div class="paragraph">
<p>So far, we kind of assumed that our microservices all know each other, know their corresponding IPS. More of a static setup. So, our banking monolith[ip=192.168.200.1] knows that he has to talk to the risk server[ip=192.168.200.2], which is hardcoded in a properties file.</p>
</div>
<div class="paragraph">
<p>You can, however, choose to make things much more dynamic:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You could not deploy application.properties files with your microservices anymore, instead use a <a href="https://spring.io/projects/spring-cloud">cloud config server</a> where all microservices pull their config from.</p>
</li>
<li>
<p>Because your service instances might change their locations dynamically (think of Amazon EC2 instances getting dynamic IPs and you elastic-auto-scale the hell out of the cloud), you soon might be looking at a service registry, that knows where your services live with what IP and can route accordingly.</p>
</li>
<li>
<p>And now since everything is dynamic, you have new problems like automatic leader election: Who is the <em>master</em> that works on certain tasks to e.g. not process them twice? Who replaces the leader when he fails? With whom?</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In general terms, this is what’s called <em>microservice orchestration</em> and another huge topic by itself.</p>
</div>
<div class="paragraph">
<p>Libraries like <a href="https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance">Eureka</a> or <a href="https://zookeeper.apache.org/">Zookeeper</a> try to 'solve' these problems, like clients or routers knowing which services are available where. On the other hand, they introduce a <em>whole lot of</em> additional complexity.</p>
</div>
<div class="paragraph">
<p>Just ask anyone who ever ran a ZooKeeper setup.</p>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_do_authorization_and_authentication_with_java_microservices">How to do authorization and authentication with Java microservices?</h3>
<div class="paragraph">
<p>Another huge topic, worth its own essay. Again, options range from hardcoded HTTPS basic auth with self-coded security frameworks, to running an Oauth2 setup with <a href="https://spring.io/guides/tutorials/spring-boot-oauth2/#_social_login_authserver">your own Authorization Server</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_how_do_i_make_sure_that_all_my_environments_look_the_same">How do I make sure that all my environments look the same?</h3>
<div class="paragraph">
<p>What’s true for non-microservice deployments is also true for microservice deployments. You will try a combination of Docker/Testcontainers as well as scripting/Ansible.</p>
</div>
<div class="paragraph">
<p>Try and keep it simple.</p>
</div>
</div>
<div class="sect2">
<h3 id="yaml-tales">Not a question: Yaml Indentation Tales</h3>
<div class="paragraph">
<p>Making a hard cut from specific library questions, let’s have a quick look at Yaml. It is the file format being used as the de-facto file format to 'write configuration as code'. From simpler tools like Ansible to the mighty Kubernetes.</p>
</div>
<div class="paragraph">
<p>To experience YAML indentation pain yourself, try and write a simple Ansible files and see how often you need to re-edit the file to get indentation working properly, despite various levels of IDE support. And then come back to finish off this guide.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">Yaml</span>:
  - <span class="string"><span class="content">is:</span></span>
    - <span class="string"><span class="content">so</span></span>
    - <span class="string"><span class="content">great</span></span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_what_about_distributed_transactions_performance_testing_other_topics">What about Distributed Transactions? Performance Testing? Other topics?</h3>
<div class="paragraph">
<p>Unfortunately, those topics didn’t make it in this revision of this guide. Stay tuned for more.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conceptual_microservice_challenges">Conceptual Microservice Challenges</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In addition to the specific Java microservice issues, there’s also issues that come with <em>any</em> microservice project. These are more from an organizational, team or management perspective.</p>
</div>
<div class="sect2">
<h3 id="_frontendbackend_mismatch">Frontend/Backend Mismatch</h3>
<div class="paragraph">
<p>Something that occurs in many microservice projects, is what I would call the frontend-backend microservice mismatch. What does that mean?</p>
</div>
<div class="paragraph">
<p>That in good old monoliths, frontend developers had one specific source to get data from. In microservice projects, frontend developers suddenly have <em>n-sources</em> to get data from.</p>
</div>
<div class="paragraph">
<p>Imagine you are building some Java-IoT microservices project. Say, you are surveilling machines, like industry ovens across Europe. And these ovens send you regular status updates with their temperatures etc.</p>
</div>
<div class="paragraph">
<p>Now sooner or later, you might want to be able to search for ovens in an admin UI, maybe with the help of a "search oven" microservices. Depending on how strict your backend colleagues might interpret <em>domain driven design</em> or <em>microservice</em> laws it could be that the "search oven" microservice only returns you IDs of ovens, no other data, like its type, model or location.</p>
</div>
<div class="paragraph">
<p>For that, frontend developers might have to do one or n-additional calls (depending on your paging implementation), to a "get oven details" microservice, with the ids they got from the first microservice.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="./Java Microservices_ A Practical Guide_files/frontend-supermarket-1a.png" alt="frontend supermarket 1a" width="940" height="308">
</div>
</div>
<div class="paragraph">
<p>And while this only a simple (but taken from a real-life project(!)) example, it demonstrates the following issue:</p>
</div>
<div class="paragraph">
<p>Real-life supermarkets got huge acceptance for a reason. Because you don’t have to go to 10 different places to shop vegetables, lemonade, frozen pizza and toilet paper. Instead you go to one place.</p>
</div>
<div class="paragraph">
<p>It’s simpler and faster. It’s the same for frontend developers and microservices.</p>
</div>
</div>
<div class="sect2">
<h3 id="_management_expectations">Management Expectations</h3>
<div class="paragraph">
<p>This issue is something that is an unfortunate side-effect of individual developers, programming magazines or cloud companies pushing microservices:</p>
</div>
<div class="paragraph">
<p>Management having the impression that you now can pour in an infinite amount of developers into the (overarching) project, as developers can now work <em>completely</em> independent from each other, everyone on their own microservice. With just some <em>tiny</em> integration work needed, at the very end (i.e. shortly before go-live).</p>
</div>
<img class="img-fluid img-thumbnail mx-auto d-block w-50 mb-2 lazy loaded" data-src="https://www.marcobehler.com/images/guides/undraw_in_progress_ql66-cdd4b9d3.png " src="./Java Microservices_ A Practical Guide_files/undraw_in_progress_ql66-cdd4b9d3.png" data-was-processed="true">
<div class="paragraph">
<p>Let’s see why this mindset is such an issue in the next paragraphs.</p>
</div>
</div>
<div class="sect2">
<h3 id="_smaller_pieces_do_not_mean_better_pieces">Smaller pieces do not mean better pieces</h3>
<div class="paragraph">
<p>One rather obvious issue is, that <em>20 smaller pieces</em> (as in microservices) does not actually mean <em>20 better pieces</em>. Purely from a technical quality perspective, it could mean that your individual services still execute 400 Hibernate queries to select a User from a database across layers and layers of unmaintainable code.</p>
</div>
<div class="paragraph">
<p>To go back to <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#simon-brown">Simon Brown’s</a> quote, if people cannot build monoliths properly, they will be having a hard time building proper microservices.</p>
</div>
<div class="paragraph">
<p>Especially resilience and everything that happens <em>after</em> the go-live is such an afterthought in many microservice projects, that it is somewhat scary to see the microservices running live.</p>
</div>
<div class="paragraph">
<p>This has a simple reason though: Because Java developers usually are <span class="line-through">not interested</span> not trained properly in resilience, networking and other related topics.</p>
</div>
</div>
<div class="sect2">
<h3 id="_smaller_pieces_lead_to_more_technical_pieces">Smaller pieces lead to more technical pieces</h3>
<div class="paragraph">
<p>In addition, there’s the unfortunate tendency for user stories to get more and more technical (and therefore stupid), the more micro and abstracted away from the user they get.</p>
</div>
<div class="paragraph">
<p>Imagine your microservice team is asked to write a technical, login-against-a-database-microservice which is roughly this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Controller</span>
<span class="type">class</span> <span class="class">LoginController</span> {

    <span class="comment">// ...</span>

    <span class="annotation">@PostMapping</span>(<span class="string"><span class="delimiter">"</span><span class="content">/login</span><span class="delimiter">"</span></span>)
    <span class="directive">public</span> <span class="type">boolean</span> login(<span class="predefined-type">String</span> username, <span class="predefined-type">String</span> password) {
        User user = userDao.findByUserName(username);
        <span class="keyword">if</span> (user == <span class="predefined-constant">null</span>) {
            <span class="comment">// handle non existing user case</span>
            <span class="keyword">return</span> <span class="predefined-constant">false</span>;
        }
        <span class="keyword">if</span> (!user.getPassword().equals(hashed(password))) {
            <span class="comment">// handle wrong password case</span>
            <span class="keyword">return</span> <span class="predefined-constant">false</span>;
        }
        <span class="comment">// 'Yay, Logged in!';</span>
        <span class="comment">// set some cookies, do whatever you want</span>
        <span class="keyword">return</span> <span class="predefined-constant">true</span>;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now your team might decide (and maybe even convince businesspeople): That is way too simple and boring, instead of a login service, let’s write a really capable UserStateChanged microservice - without any real, tangible business requirements.</p>
</div>
<div class="paragraph">
<p>And because Java is currently out of fashion, let’s write the UserStateChanged microservice in Erlang. And let’s try to use red-black trees somewhere, because <a href="http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html">Steve Yegge</a> wrote you need to know them inside-out to apply for Google.</p>
</div>
<div class="paragraph">
<p>From an integration, maintenance and overall-project perspective, this is just as bad as writing layers of spaghetti code inside the same monolith.</p>
</div>
<div class="paragraph">
<p>Fabricated and over-the-top example? Yes.</p>
</div>
<div class="paragraph">
<p>Unfortunately, also not uncommon in real-life.</p>
</div>
</div>
<div class="sect2">
<h3 id="_smaller_pieces_lead_to_smaller_understanding">Smaller pieces lead to smaller understanding</h3>
<div class="paragraph">
<p>Then there’s this topic of understanding the complete system, its processes and workflows, if you as a developer are only responsible to work on isolated microservice[95:login-101:updateUserProfile].</p>
</div>
<div class="paragraph">
<p>It blends in with the previous paragraph, but depending on your organization, trust and communication levels, this can lead to a lot of shoulder-shrugging and blaming, if a random part of the whole microservice chain breaks down - with no-one accepting full responsibility anymore.</p>
</div>
<div class="paragraph">
<p>Not just insinuating bad faith, but the problem that it <em>actually is really difficult</em> to understand n-amount of isolated pieces and their place in the big picture.</p>
</div>
</div>
<div class="sect2">
<h3 id="_communication_maintenance">Communication &amp; Maintenance</h3>
<div class="paragraph">
<p>Which blends in with the last issue here: Communication &amp; Maintenance. Which obviously depends <em>heavily</em> on company size, with the general rule: The bigger, the more problematic.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Who is working on microservice number 47?</p>
</li>
<li>
<p>Did they just deploy a new, incompatible microservice version? Where was this documented?</p>
</li>
<li>
<p>Who do I need to talk to for a new feature request?</p>
</li>
<li>
<p>Who is going to maintain that Erlang microservice after Max left the company?</p>
</li>
<li>
<p>All our microservice teams work not only in different programming languages, but also in different time zones! How do we coordinate properly?</p>
</li>
</ul>
</div>
<img class="img-fluid img-thumbnail mx-auto d-block w-50 mb-2 lazy loaded" data-src="https://www.marcobehler.com/images/guides/undraw_connected_8wvi-302427ba.png " src="./Java Microservices_ A Practical Guide_files/undraw_connected_8wvi-302427ba.png" data-was-processed="true">
<div class="paragraph">
<p>The overarching theme here is, that similarly to DevOps skills, a full-on microservices approach in a bigger, maybe even international company, comes with a ton of additional communication challenges. As a company, you need to be prepared for that.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fin">Fin</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Having read this article you might conclude that your author is recommending strictly against microservices. This is not entirely true - I am mainly trying to highlight points that are forgotten in the microservices frenzy.</p>
</div>
<div class="sect2">
<h3 id="_microservices_are_on_a_pendulum">Microservices are on a pendulum</h3>
<div class="paragraph">
<p>Going full-on Java microservices is one end of a pendulum. The other end would be something like hundreds of good old Maven modules in a Monolith. You’ll have to strike the right balance.</p>
</div>
<div class="paragraph">
<p>Especially in greenfield projects there is nothing stopping you from taking a more conservative, monolithic approach and building fewer, better-defined Maven modules instead of immediately starting out with twenty, cloud-ready Microservices.</p>
</div>
</div>
<div class="sect2">
<h3 id="_microservices_generate_a_ton_of_additional_complexity">Microservices generate a ton of additional complexity</h3>
<div class="paragraph">
<p>Keep in mind that, the more microservices you have, and the less really strong DevOps talent you have (no, executing a few Ansible scripts or deploying on Heroku does not count), the more issues you will have later on in production.</p>
</div>
<div class="paragraph">
<p>Reading through the <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#issues-and-questions">Common Java Microservice Questions</a> section of this guide is already exhausting. Then think about <em>implementing</em> solutions for all these infrastructure challenges. You’ll suddenly realize that none of this has to do with business programming anymore (what you are paid for), but rather with a fixation of more technology on even more technology.</p>
</div>
<div class="paragraph">
<p>Siva summed it up perfectly on <a href="http://sivaprasadreddy.com/posts/2019/06/the-ugly-truth/">his blog</a>:</p>
</div>
<blockquote class="b-1 blockquote text-center">
<p class="mb-0">I can’t explain how horrible it feels when the team spends 70% of the time fighting with this modern infrastructure setup and 30% of the time on actual business logic.</p>
<footer class="blockquote-footer">Siva Prasad Reddy</footer>
</blockquote>
</div>
<div class="sect2">
<h3 id="_should_you_create_java_microservices">Should you create Java microservices?</h3>
<div class="paragraph">
<p>To answer that question, I’d like to end this article with a very cheeky, Google-like interview teaser. If you know the answer to this question by <em>experience</em>  even though it seemingly has nothing to do with microservices, then you might be ready for a microservices approach.</p>
</div>
<div class="sect3">
<h4 id="_scenario">Scenario</h4>
<div class="paragraph">
<p>Imagine you have a Java monolith running solo on the smallest <a href="https://www.hetzner.de/dedicated-rootserver/matrix-ex">Hetzner</a> dedicated machine. The same goes for your database server, it also runs on a similar Hetzner machine.</p>
</div>
<div class="paragraph">
<p>And let’s also assume that your Java monolith can handle workflows like user registrations and you do not spawn hundreds of database queries per workflow, but only a reasonable handful (&lt; 10).</p>
</div>
</div>
<div class="sect3">
<h4 id="_question">Question</h4>
<div class="paragraph">
<p>How many database connections should your Java monolith (connection pool) open up to your database server?</p>
</div>
<div class="paragraph">
<p>Why? And to how many concurrently active users do you think your monolith can (roughly) scale?</p>
</div>
</div>
<div class="sect3">
<h4 id="_answer">Answer</h4>
<div class="paragraph">
<p>Post your reply to these questions in the comment section. I’m looking forward to all answers.</p>
</div>
<img class="img-fluid img-thumbnail mx-auto d-block w-50 mb-2 lazy loaded" data-src="https://www.marcobehler.com/images/guides/undraw_code_thinking_1jeh-ba803602.png " src="./Java Microservices_ A Practical Guide_files/undraw_code_thinking_1jeh-ba803602.png" data-was-processed="true">
</div>
</div>
<div class="sect2">
<h3 id="_now_make_up_your_own_mind">Now, make up your own mind</h3>
<div class="paragraph">
<p>If you are still here with me: Thanks for reading!</p>
</div>
</div>
</div>
</div>

        <h4 class="mt-4">Share:</h4>
        <div class="shariff mb-5" data-twitter-via="MarcoBehler" data-url="https://www.marcobehler.com/guides/java-microservices-a-practical-guide" data-lang="en" data-services="[&quot;twitter&quot;,&quot;facebook&quot;,&quot;linkedin&quot;,&quot;reddit&quot;]" data-orientation="horizontal"><ul class="theme-color orientation-horizontal button-style-standard shariff-col-4"><li class="shariff-button twitter"><a href="https://twitter.com/intent/tweet?text=Java%20Microservices%3A%20A%20Practical%20Guide&amp;url=https%3A%2F%2Fwww.marcobehler.com%2Fguides%2Fjava-microservices-a-practical-guide&amp;via=MarcoBehler" data-rel="popup" rel="nofollow" title="Share on Twitter" role="button" aria-label="Share on Twitter"><span class="fab fa-twitter" aria-hidden="true"></span><span class="share_text">tweet</span></a></li><li class="shariff-button facebook"><a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.marcobehler.com%2Fguides%2Fjava-microservices-a-practical-guide" data-rel="popup" rel="nofollow" title="Share on Facebook" role="button" aria-label="Share on Facebook"><span class="fab fa-facebook-f" aria-hidden="true"></span><span class="share_text">share</span></a></li><li class="shariff-button linkedin"><a href="https://www.linkedin.com/shareArticle?mini=true&amp;summary=You%20can%20use%20this%20guide%20to%20understand%20what%20Java%20microservices%20are%2C%20how%20you%20architect%20and%20build%20them.%20Also%3A%20A%20look%20at%20Java%20microservice%20libraries%20%26%20common%20questions.&amp;title=Java%20Microservices%3A%20A%20Practical%20Guide&amp;url=https%3A%2F%2Fwww.marcobehler.com%2Fguides%2Fjava-microservices-a-practical-guide" data-rel="popup" rel="nofollow" title="Share on LinkedIn" role="button" aria-label="Share on LinkedIn"><span class="fab fa-linkedin-in" aria-hidden="true"></span><span class="share_text">share</span></a></li><li class="shariff-button reddit"><a href="https://reddit.com/submit?url=https%3A%2F%2Fwww.marcobehler.com%2Fguides%2Fjava-microservices-a-practical-guide&amp;title=Java%20Microservices%3A%20A%20Practical%20Guide" data-rel="popup" rel="nofollow" title="Share on Reddit" role="button" aria-label="Share on Reddit"><span class="fab fa-reddit-alien" aria-hidden="true"></span><span class="share_text">share</span></a></li></ul></div>


          <div class="text-center pt-3 pb-4 px-2 my-4" style="background-color: rgba(230,235,241,.5)">
            <h4 class="font-weight-bold">There's more where that came from</h4>
            <p class="mt-0 pt-0 pl-5 pr-5" style="font-size: 0.9rem;">I'll send you an update when I publish new guides. Absolutely no spam, ever. Unsubscribe anytime.</p>

            <form action="https://sendy.marcobehler.com/subscribe" method="POST" accept-charset="utf-8" class="form-inline newsletterSignupForm">
              <div class="col-md-7 col-lg-6 ml-lg-auto">
                <div class="form-group">
                  <input type="email" name="email" id="email" class="form-control w-100" placeholder="e.g. martin@fowler.com" required="">

                  <div style="display:none;">
                    <label for="hp">HP</label><br>
                    <input type="text" name="hp" id="hp">
                  </div>
                  <input type="hidden" name="list" value="6y1mPqI2ZsqrrbUPFriRDg">
                  <input type="hidden" name="subform" value="yes">
                  <input type="hidden" name="gdpr" value="checked">
                </div>
              </div>

              <div class="col-md-5 col-lg-3 mr-lg-auto">
                <button type="submit" class="btn btn-primary btn-large btn-round">I want more!</button>
              </div>
            </form>
          </div>




      <h4 class="font-weight-bold mt-5">Comments</h4>
      <div id="commento" class="commento-root commento-root-font"><div id="commento-login-box-container"></div><div id="commento-error" class="commento-error-box" style="display: none;"></div><div id="commento-mod-tools" class="commento-mod-tools" style="display: none"><button id="commento-mod-tools-lock-button">Lock Thread</button></div><div id="commento-main-area" class="commento-main-area" style=""><div id="commento-login" class="commento-login"><div class="commento-login-text">Login</div></div><div id="commento-textarea-super-container-root" class="commento-button-margin"><div id="commento-textarea-container-root" class="commento-textarea-container"><textarea id="commento-textarea-root" placeholder="Add a comment"></textarea></div><button id="commento-submit-button-root" class="commento-button commento-submit-button">Add Comment</button><div class="commento-round-check commento-anonymous-checkbox-container"><input id="commento-anonymous-checkbox-root" type="checkbox"><label for="commento-anonymous-checkbox-root">Comment anonymously</label></div><a id="commento-markdown-button-root" class="commento-markdown-button"><b>M ↓</b> &nbsp; Markdown</a></div><div class="commento-sort-policy-buttons-container"><div class="commento-sort-policy-buttons"><a id="commento-sort-policy-score-desc" class="commento-sort-policy-button commento-sort-policy-button-selected">Upvotes</a><a id="commento-sort-policy-creationdate-desc" class="commento-sort-policy-button">Newest</a><a id="commento-sort-policy-creationdate-asc" class="commento-sort-policy-button">Oldest</a></div></div><div id="commento-pre-comments-area"></div><div id="commento-comments-area" class="commento-comments"><div><div id="commento-comment-card-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" class="commento-subtitle"><div id="commento-comment-score-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" class="commento-score">1 point</div><div id="commento-comment-timeago-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" title="Thu Dec 12 2019 18:53:25 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c"><div id="commento-comment-body-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" class="commento-body"><div id="commento-comment-text-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c"><p>How many database connections should your Java monolith (connection pool) open up to your database server?
pool_size =  ( cpu core count * 2 ) + effective spindle count
effective spindle count = 1 if SSD</p>
</div></div><div id="commento-comment-children-9758eebd9912c2f45887a98403048febd840adf74c5a866ed182a0f8de33433c" class="commento-body"><div id="commento-comment-card-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" class="commento-card" style="border-left: 2px solid rgb(62, 150, 81);"><div class="commento-header"><div id="commento-comment-options-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(62, 150, 81);">M</div><div id="commento-comment-name-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" class="commento-name" style="max-width: 109px;">Marco Behler</div><div id="commento-comment-subtitle-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" class="commento-subtitle"><div id="commento-comment-score-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" class="commento-score">0 points</div><div id="commento-comment-timeago-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" title="Fri Dec 13 2019 11:49:14 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4"><div id="commento-comment-body-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4" class="commento-body"><div id="commento-comment-text-3fceee586fffba636a7a74b1fd8557548ac1395033a248d13d4714a3ef9df8b4"><p>We have a winner. That was too fast :)</p>
</div></div></div></div></div></div></div><div id="commento-comment-card-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" class="commento-card" style="border-left: 2px solid rgb(218, 124, 48);"><div class="commento-header"><div id="commento-comment-options-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(218, 124, 48);">G</div><div id="commento-comment-name-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" class="commento-name" style="max-width: 91px;">getraajesh</div><div id="commento-comment-subtitle-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" class="commento-subtitle"><div id="commento-comment-score-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" class="commento-score">0 points</div><div id="commento-comment-timeago-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" title="Tue Jan 21 2020 15:28:17 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">32 days ago</div></div></div><div id="commento-comment-contents-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8"><div id="commento-comment-body-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8" class="commento-body"><div id="commento-comment-text-c609022a47519c47b994f8bce9013e4300a11f143df82979de8b81e49dead0c8"><p>Very Interesting. Great, Thanks.  You have almost covered all the topics related to Microservices on a high level.</p>
</div></div></div></div><div id="commento-comment-card-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" class="commento-subtitle"><div id="commento-comment-score-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" class="commento-score">0 points</div><div id="commento-comment-timeago-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" title="Thu Dec 12 2019 16:21:18 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be"><div id="commento-comment-body-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be" class="commento-body"><div id="commento-comment-text-3309b6c0f2a4923aee9b5284c89718d3783f9edea8c37336b9c82cc45559e3be"><p>Great article !</p>
</div></div></div></div><div id="commento-comment-card-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" class="commento-subtitle"><div id="commento-comment-score-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" class="commento-score">0 points</div><div id="commento-comment-timeago-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" title="Fri Dec 13 2019 11:37:01 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83"><div id="commento-comment-body-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83" class="commento-body"><div id="commento-comment-text-be30a2a14da1dbadfb8c9789c73c964337419f2ab96305fda71f1028523bfa83"><p>Thanks, nice article</p>
</div></div></div></div><div id="commento-comment-card-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" class="commento-subtitle"><div id="commento-comment-score-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" class="commento-score">0 points</div><div id="commento-comment-timeago-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" title="Fri Dec 13 2019 17:55:19 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99"><div id="commento-comment-body-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99" class="commento-body"><div id="commento-comment-text-4a0d023ccf80d32de391f4e0735310ad44639b8c1829ddd30ed9b46f49089e99"><p>Very interesting, thank you.</p>
</div></div></div></div><div id="commento-comment-card-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" class="commento-subtitle"><div id="commento-comment-score-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" class="commento-score">0 points</div><div id="commento-comment-timeago-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" title="Thu Dec 12 2019 16:31:17 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43"><div id="commento-comment-body-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43" class="commento-body"><div id="commento-comment-text-30602948888eb3cd22390b20a2173fb6dbdbbfbf2a352a0144f0e509b2996d43"><p>Great article. I wish technical leadership (architects and managers) at my client would have considered some of these points.</p>

<p>I hope a future version of this article mentions the pain of dealing with legacy network infrastructure and cloud deployments. Proxy config, whitelisting IOS, firewall rules, etc.</p>

<p>Another fun topic is deploying to multiple environments and the configuration changes needed for each (local, QA, integration, prod validation, prod, ....)</p>

<p>Again, very well written article.</p>
</div></div></div></div><div id="commento-comment-card-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" class="commento-subtitle"><div id="commento-comment-score-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" class="commento-score">0 points</div><div id="commento-comment-timeago-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" title="Fri Dec 13 2019 14:18:04 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25"><div id="commento-comment-body-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" class="commento-body"><div id="commento-comment-text-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25"><p>I think you should mention about http timeout also. Most devs usually forget to set timeout.
Default library and Apache http client default timeout is infinite.
<a href="https://docs.oracle.com/javase/7/docs/api/java/net/URLConnection.html#setConnectTimeout(int" rel="nofollow">https://docs.oracle.com/javase/7/docs/api/java/net/URLConnection.html#setConnectTimeout(int</a>)</p>
</div></div><div id="commento-comment-children-eb0dddcf48c52a8a60a4e3250a0b4849de40359e9879075421ab6aee61c7af25" class="commento-body"><div id="commento-comment-card-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" class="commento-card" style="border-left: 2px solid rgb(62, 150, 81);"><div class="commento-header"><div id="commento-comment-options-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(62, 150, 81);">M</div><div id="commento-comment-name-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" class="commento-name" style="max-width: 109px;">Marco Behler</div><div id="commento-comment-subtitle-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" class="commento-subtitle"><div id="commento-comment-score-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" class="commento-score">0 points</div><div id="commento-comment-timeago-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" title="Fri Dec 13 2019 14:19:52 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef"><div id="commento-comment-body-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" class="commento-body"><div id="commento-comment-text-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef"><p>Very good point! Will add it in a future revision.</p>
</div></div><div id="commento-comment-children-19afeb1f63e9b5972766ad0d24d7a1e201c26351e9a7023a0262d6fa8ef930ef" class="commento-body"><div id="commento-comment-card-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" class="commento-subtitle"><div id="commento-comment-score-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" class="commento-score">0 points</div><div id="commento-comment-timeago-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" title="Thu Jan 09 2020 16:48:24 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">44 days ago</div></div></div><div id="commento-comment-contents-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583"><div id="commento-comment-body-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583" class="commento-body"><div id="commento-comment-text-865e3bf18a51be104bed0595930da789a9365f21bc31315805cb6c935f10c583"><p>very nice article btw. sharing with my team.</p>
</div></div></div></div></div></div></div></div></div></div><div id="commento-comment-card-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" class="commento-subtitle"><div id="commento-comment-score-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" class="commento-score">0 points</div><div id="commento-comment-timeago-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" title="Fri Dec 13 2019 13:44:27 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1"><div id="commento-comment-body-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1" class="commento-body"><div id="commento-comment-text-d4032b853eed1bc8b1472e09f9d4ecd7af03b7a55e1586898875be1b7604a5a1"><p>Man at my previous company you would be crucified for such statements ;-)
Regarding the question at the end: it depends. It depends on how many registrations you have per hour let's say. How many concurrently active users can you handle? Well - registration is a one time action so the number of concurrently active users does not matter in this regard. But to give a number a give you 100 000 concurently active users :-)</p>
</div></div></div></div><div id="commento-comment-card-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" class="commento-subtitle"><div id="commento-comment-score-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" class="commento-score">0 points</div><div id="commento-comment-timeago-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" title="Sun Dec 15 2019 14:20:54 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba"><div id="commento-comment-body-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba" class="commento-body"><div id="commento-comment-text-374c7f3afe8cba2134757e618ad033914d721c5bd35e084aa98f9bd2d3f7e2ba"><p>Hi! Great article!</p>

<p>Spring's project oauth2 is now on maintenance mode, hence you should not create your own OAuth2 server anymore.</p>

<p>But, when do you know that is good to have a fully capable oauth2 server and not just an Authorization server that provides a simple jwt?</p>
</div></div></div></div><div id="commento-comment-card-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" class="commento-card" style="border-left: 2px solid rgb(83, 81, 84);"><div class="commento-header"><div id="commento-comment-options-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" class="commento-options" style="width: 160px;"><button id="commento-comment-collapse-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" title="Collapse children" class="commento-option-button commento-option-collapse" style="right: 0px;"></button><button id="commento-comment-downvote-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" title="Downvote" class="commento-option-button commento-option-downvote" style="right: 32px;"></button><button id="commento-comment-upvote-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" title="Upvote" class="commento-option-button commento-option-upvote" style="right: 64px;"></button><button id="commento-comment-reply-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" title="Reply" class="commento-option-button commento-option-reply" style="right: 96px;"></button></div><div class="commento-avatar" style="background: rgb(83, 81, 84); font-weight: bold;">?</div><div id="commento-comment-name-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" class="commento-name" style="max-width: 101px;">Anonymous</div><div id="commento-comment-subtitle-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" class="commento-subtitle"><div id="commento-comment-score-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" class="commento-score">0 points</div><div id="commento-comment-timeago-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" title="Wed Dec 18 2019 11:28:19 GMT+0200 (Eastern European Standard Time)" class="commento-timeago">2 months ago</div></div></div><div id="commento-comment-contents-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475"><div id="commento-comment-body-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475" class="commento-body"><div id="commento-comment-text-dc1714b37b61199f91b64ff1edc4898b9f7612a7197163315751aa3907c23475"><p>Good article, thank you for sharing, greetings from Spain!</p>
</div></div></div></div></div></div></div><div id="commento-footer" class="commento-footer"><div class="commento-logo-container"><a class="commento-logo" href="https://commento.io/" target="_blank"><span class="commento-logo-text">Commento</span></a></div></div></div>
<script src="./Java Microservices_ A Practical Guide_files/commento.js"></script>

    </div>
  </div>

  <div class="shariff" id="floating-share" data-twitter-via="MarcoBehler" data-button-style="icon" data-url="https://www.marcobehler.com/guides/java-microservices-a-practical-guide" data-lang="en" data-services="[&quot;twitter&quot;,&quot;facebook&quot;,&quot;linkedin&quot;,&quot;reddit&quot;]" data-orientation="vertical"><ul class="theme-color orientation-vertical button-style-icon shariff-col-4"><li class="shariff-button twitter"><a href="https://twitter.com/intent/tweet?text=Java%20Microservices%3A%20A%20Practical%20Guide&amp;url=https%3A%2F%2Fwww.marcobehler.com%2Fguides%2Fjava-microservices-a-practical-guide&amp;via=MarcoBehler" data-rel="popup" rel="nofollow" title="Share on Twitter" role="button" aria-label="Share on Twitter"><span class="fab fa-twitter" aria-hidden="true"></span></a></li><li class="shariff-button facebook"><a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.marcobehler.com%2Fguides%2Fjava-microservices-a-practical-guide" data-rel="popup" rel="nofollow" title="Share on Facebook" role="button" aria-label="Share on Facebook"><span class="fab fa-facebook-f" aria-hidden="true"></span></a></li><li class="shariff-button linkedin"><a href="https://www.linkedin.com/shareArticle?mini=true&amp;summary=You%20can%20use%20this%20guide%20to%20understand%20what%20Java%20microservices%20are%2C%20how%20you%20architect%20and%20build%20them.%20Also%3A%20A%20look%20at%20Java%20microservice%20libraries%20%26%20common%20questions.&amp;title=Java%20Microservices%3A%20A%20Practical%20Guide&amp;url=https%3A%2F%2Fwww.marcobehler.com%2Fguides%2Fjava-microservices-a-practical-guide" data-rel="popup" rel="nofollow" title="Share on LinkedIn" role="button" aria-label="Share on LinkedIn"><span class="fab fa-linkedin-in" aria-hidden="true"></span></a></li><li class="shariff-button reddit"><a href="https://reddit.com/submit?url=https%3A%2F%2Fwww.marcobehler.com%2Fguides%2Fjava-microservices-a-practical-guide&amp;title=Java%20Microservices%3A%20A%20Practical%20Guide" data-rel="popup" rel="nofollow" title="Share on Reddit" role="button" aria-label="Share on Reddit"><span class="fab fa-reddit-alien" aria-hidden="true"></span></a></li></ul></div>


<div class="card popup-screen visible" style="width: 15rem; transform: translateX(15rem);">
  <a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide#" class="close-popup">X</a>
    <img class="card-img-top lazy loaded" itemprop="image" data-src="/images/marcobehler_skateboard-961d8e6f.svg" src="./Java Microservices_ A Practical Guide_files/marcobehler_skateboard-961d8e6f.svg" data-was-processed="true">
    <div class="card-body">
        <h5 class="card-title">There's more where that came from</h5>
        <!--<h6 class="card-subtitle mb-2 text-muted">Card subtitle</h6>-->
        <p class="card-text">I'll send you an update whenever I publish a new guide.</p>

        <form action="https://sendy.marcobehler.com/subscribe" method="POST" accept-charset="utf-8" class="newsletterSignupForm">
            <input type="email" class="form-control" placeholder="your@email.com" name="email" id="email" required="">

            <div style="display:none;">
                <label for="hp">HP</label><br>
                <input type="text" name="hp" id="hp">
            </div>
            <input type="hidden" name="gdpr" value="checked">
            <input type="hidden" name="list" value="6y1mPqI2ZsqrrbUPFriRDg">
            <input type="hidden" name="subform" value="yes">
            <input type="submit" class="btn btn-primary w-100 mt-3" name="submit" id="submit" value="I want more!">
        </form>

    </div>
</div>





</div>
  <script type="application/javascript">

      window.onscroll = function() {
          var MIN_SCROLL = 300;
          var shareElement = document.getElementById("floating-share");
          if (document.body.scrollTop > MIN_SCROLL || document.documentElement.scrollTop > MIN_SCROLL) {
              shareElement.className = "shariff visible";
          } else {
              shareElement.className = "shariff";
          }
      };

      function callback() {
          gtag('event', 'subscribe', {'event_category': 'newsletter'});
          gtag('event', 'conversion', {'send_to': 'AW-828277359/PZDqCILJj6sBEO-E-ooD'});
          fbq('track', 'Lead');
          qp('track', 'GenerateLead');
      }

      var forms = document.querySelectorAll(".newsletterSignupForm");

      for (i = 0; i < forms.length; ++i) {
          var form = forms[i];

          if (form.addEventListener) {
              form.addEventListener("submit", callback, false);
          } else if (form.attachEvent) {
              form.attachEvent('onsubmit', callback);
          }
      }
  </script>

        </div>
        </div>
        </main>


<!--
        <div class="text-center fixed-bottom">
          <div class="alert alert-primary col-10 col-xl-6 mx-auto mb-0 alert-dismissible" role="alert">
            <small>The next batch of Well-Rounded Spring (Boot) training closes soon. <a href="https://www.well-rounded.io">See what we teach</a>.</small>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
        </div>-->

<footer class="footer">
  <div class="container-fluid">
    <div class="row justify-content-center">
      <div class="col-12 small">
        <a href="https://www.marcobehler.com/privacy">Privacy &amp; Terms</a>
        |
        <a href="https://www.marcobehler.com/imprint">Imprint</a>
        |
        <a href="https://www.marcobehler.com/contact">Contact</a>
      </div>
    </div>
  </div>
</footer>

<script src="./Java Microservices_ A Practical Guide_files/jquery.min.js" type="text/javascript"></script>
<script src="./Java Microservices_ A Practical Guide_files/popper.min.js"></script>
<script src="./Java Microservices_ A Practical Guide_files/bootstrap.min.js"></script>
<script src="./Java Microservices_ A Practical Guide_files/jquery.gifplayer.min.js" type="text/javascript"></script>
<script src="./Java Microservices_ A Practical Guide_files/jquery.cookie.js"></script>
<script src="./Java Microservices_ A Practical Guide_files/intersection-observer.js"></script>
<script src="./Java Microservices_ A Practical Guide_files/lazyload.min.js"></script>
<script src="./Java Microservices_ A Practical Guide_files/shariff.min-443b7f04.js"></script>
<script src="./Java Microservices_ A Practical Guide_files/count.js"></script>


<script type="text/javascript">

    $(function () {

        var lazyLoadInstance = new LazyLoad({
            elements_selector: ".lazy"
            // ... more custom settings?
        });

        if ($.cookie('well-rounded-teaser') != null) {
            $(".alert-dismissible").alert('close');
        }

        $('.alert-dismissible').on('closed.bs.alert', function () {
            $.cookie('well-rounded-teaser', "true", {expires: 14, path: '/'});
        });


        $( ".plus-guide .sect1 h2" ).each(function( index ) {

            $(this).parent().find(".sect2 h3").each(function( h3Index ){
                $(this).attr("data-number", (index + 1) + "." + (h3Index + 1));
            });

                $(this).attr("data-number", index + 1);
//              $(this).html("<span class=\"numberCircle\">" + (index + 1) + ".</span> " +  $(this).text());

          });
    });

</script>

<script type="application/javascript">
    $(function () {
        $.getJSON("/loggedIn", function (data) {
            var menu = $(".container").find(".col-6.d-flex");
            if (data.loggedIn) {
                $("<a>").text("Account").addClass("btn btn-outline-secondary nav-link text-dark mr-3").attr("href", "/account").appendTo(menu);
                $("<a>").text("Logout").addClass("btn btn-outline-secondary nav-link text-dark font-weight-bold").attr("href", "/logout").appendTo(menu);
            } else {
                $("<a>").text("Login").addClass("btn btn-outline-secondary nav-link text-dark mr-3").attr("href", "/login").appendTo(menu);
                $("<a>").text("Sign up free").addClass("btn btn-outline-secondary nav-link text-dark font-weight-bold").attr("href", "/signup-flow?planId=free").appendTo(menu);
            }
        });
    });
</script>

  <script type="application/ld+json">
          {
            "@context": "http://schema.org",
            "@type": "TechArticle",
            "name": "Java Microservices: A Practical Guide",
            "headline": "Java Microservices: A Practical Guide",
            "description": "You can use this guide to understand what Java microservices are, how you architect and build them. Also: A look at Java microservice libraries &amp; common questions.",
            "url": "https://www.marcobehler.com/guides/java-microservices-a-practical-guide",
            "mainEntityOfPage": {
              "@type": "WebPage",
              "@id": "https://www.marcobehler.com/guides/java-microservices-a-practical-guide"
            },
            "dateModified": "2019-12-19",
            "datePublished": "2019-12-19",
            "inLanguage": "en",
            "isAccessibleForFree": true,
            "author": {
              "@type": "Person",
              "name": "Marco Behler"
            },
            "image": {
              "@type": "ImageObject",
              "url": "https://www.marcobehler.com/images/guides/undraw_online_test_gba7-45c329b0.png"
            },
            "publisher": {
              "@type": "Organization",
              "name": "Marco Behler GmbH",
              "url": "https://www.marcobehler.com",
              "logo": {
                "@type": "ImageObject",
                "url": "https://www.marcobehler.com/images/logo.png"
              }
            }
          }

  </script>

  <script type="text/javascript">

      $(function () {


          $('*[id^="solution"]').hide();


          $('.solution-link').click(function () {
              $(this).parent().parent().next().toggle();
              return false;
          });


          $('[data-toggle="popover"]').popover();

          $('.gifplayer img').gifplayer({label: 'play'});


          var myDiv = $("body");

         var scrollto = myDiv.offset().top + ((myDiv.height() - $("#commento").height()) * 0.7);
          var visits = jQuery.cookie('visits') || 0;

          $('.close-popup').click(function (e) {
              $('.popup-screen').css("transform", "translateX(15rem)");
              visits++;
              jQuery.cookie('visits', visits, {expires: 1, path: '/'});
              return false;
          });

          if (jQuery.cookie('visits') >= 1) {
              jQuery('.popup-screen').hide();
          } else {
              $(window).scroll(function () {
                  if ($(window).scrollTop() >= scrollto) {
                      $('div.popup-screen').addClass("visible");
                  }
              });
          }

          $(".newsletterSignupForm").submit(function () {
              $('.popup-screen').css("transform", "translateX(15rem)");
              visits++;
              jQuery.cookie('visits', visits, {expires: 365, path: '/'});
              return true;
          });

      });

  </script>





<iframe name="_hjRemoteVarsFrame" title="_hjRemoteVarsFrame" id="_hjRemoteVarsFrame" src="./Java Microservices_ A Practical Guide_files/box-469cf41adb11dc78be68c1ae7f9457a4.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;"></iframe></body></html>
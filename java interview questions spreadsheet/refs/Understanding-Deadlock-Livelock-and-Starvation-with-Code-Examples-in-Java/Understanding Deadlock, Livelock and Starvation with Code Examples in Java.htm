<!DOCTYPE html>
<!-- saved from url=(0120)https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><!--<base href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java">--><base href="."><meta name="keywords" content="Java, deadlock, livelock, starvation, examples"><meta name="description" content="Java code examples to understand deadlock, livelock and starvation"><meta name="generator" content="Joomla! - Open Source Content Management"><title>Understanding Deadlock, Livelock and Starvation with Code Examples in Java</title><link href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java" rel="canonical"><link href="https://www.codejava.net/templates/protostar/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon"><link rel="stylesheet" href="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/e930ac8b6a8d11b90e6d1ed29c4ab0d9.css" type="text/css"><link rel="stylesheet" href="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/font-awesome.min.css" type="text/css"><style type="text/css">@media(max-width:768px){.jf_mm_trigger,#jf_mm_menu{display:block}}
			.jf_mm_trigger{background-color:#4a5052;color:#f5f5f5}
			.jf_mm_wrapper .levelHolderClass,.jf_mm_wrapper .jf_mm_inactive{background-color:#4a5052}
			.jf_mm_wrapper li{background-color:#4a5052}
			.jf_mm_wrapper li:hover{background-color:#434749}
			.jf_mm_wrapper .backItemClass{background-color:#444444}
			.jf_mm_wrapper .backItemClass:hover{background-color:#333333}
			.jf_mm_wrapper li,.jf_mm_wrapper li:last-child,.jf_mm_wrapper .backItemClass{border-color:#5a5e5f}
			.jf_mm_wrapper h2{color:#888888}
			.jf_mm_wrapper a,.jf_mm_wrapper a:hover{color:#eeeeee}
			.jf_mm_wrapper .ltr,.jf_mm_wrapper .rtl{-webkit-box-shadow:5px 0 5px -5px #202020;-moz-box-shadow:5px 0 5px -5px #202020;box-shadow:5px 0 5px -5px #202020;}
		
#jf_mm_menu.jf_hidden{display:none!important}</style><script type="text/javascript" async="" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/analytics.js"></script><script type="text/javascript" async="" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/recaptcha__en_gb.js"></script><script src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/api.js" type="text/javascript"></script><link href="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/css" rel="stylesheet" type="text/css"><style type="text/css">h1,h2,h3,h4,h5,h6{
        font-family: 'Open Sans', sans-serif;
      }</style><!--[if lt IE 9]><script src="/media/jui/js/html5.js"></script><![endif]--><script async="" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/js"></script><script>window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-29498384-2');</script></head><body class="site com_content view-article no-layout no-task itemid-965"><!-- Body --><div class="body"><div class="container"><!-- Header --><header class="header" role="banner"><div class="header-inner clearfix"><a class="brand pull-left" href="https://www.codejava.net/"><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><font size="45" color="white">Code</font><font size="45" color="red">Java</font></b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i><font size="4" color="white">Coding Your Passion</font></i></a><div id="jf_mm_menu" class="" style="height: 100px; min-height: 100px; width: 0px;"><nav id="jf_mm_menu_multilevelpushmenu" class="jf_mm_wrapper" style="min-height: 100px; height: 100%;"><div class="levelHolderClass ltr jf_mm_inactive" data-level="0" style="margin-left: -200px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="fa fa-times floatRight cursorPointer"></i>CodeJava.net</h2><ul style="display: none;"><li class="item-101 default active" style="text-align: left"><a href="https://www.codejava.net/"><img class="jf_mm_a_img menu-image" src="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java" style="">Home</a></li><li class="item-465 deeper parent" style="text-align: left"><a href="https://www.codejava.net/java-core"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Java Core</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Java Core</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-499" style="text-align: left"><a href="https://www.codejava.net/java-core/the-java-language">The Java Language</a></li><li class="item-856" style="text-align: left"><a href="https://www.codejava.net/java-core/collections">Generics &amp; Collections</a></li><li class="item-859" style="text-align: left"><a href="https://www.codejava.net/java-core/tools">Tools</a></li><li class="item-964" style="text-align: left"><a href="https://www.codejava.net/java-core/exception">Exception Handling</a></li><li class="item-965" style="text-align: left"><a href="https://www.codejava.net/java-core/concurrency">Concurrency</a></li></ul></div></li><li class="item-850 deeper parent" style="text-align: left"><a href="https://www.codejava.net/java-se"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Java SE</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Java SE</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-851" style="text-align: left"><a href="https://www.codejava.net/java-se/swing">Swing</a></li><li class="item-852" style="text-align: left"><a href="https://www.codejava.net/java-se/applet">Applet</a></li><li class="item-853" style="text-align: left"><a href="https://www.codejava.net/java-se/file-io">File I/O</a></li><li class="item-854" style="text-align: left"><a href="https://www.codejava.net/java-se/graphics">2D/3D Graphics</a></li><li class="item-855" style="text-align: left"><a href="https://www.codejava.net/java-se/networking">Networking</a></li><li class="item-857" style="text-align: left"><a href="https://www.codejava.net/java-se/ftp">FTP Networking</a></li><li class="item-858 current" style="text-align: left"><a href="https://www.codejava.net/java-se/jdbc">JDBC</a></li></ul></div></li><li class="item-840 deeper parent" style="text-align: left"><a href="https://www.codejava.net/java-ee"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Java EE</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Java EE</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-848" style="text-align: left"><a href="https://www.codejava.net/java-ee/servlet">Servlet</a></li><li class="item-510" style="text-align: left"><a href="https://www.codejava.net/java-ee/javamail">JavaMail</a></li><li class="item-849" style="text-align: left"><a href="https://www.codejava.net/java-ee/jstl">JSTL</a></li><li class="item-513" style="text-align: left"><a href="https://www.codejava.net/java-ee/jsp">JavaServer Pages (JSP)</a></li><li class="item-980" style="text-align: left"><a href="https://www.codejava.net/java-ee/jpa">Java Persistence API</a></li><li class="item-512" style="text-align: left"><a href="https://www.codejava.net/java-ee/web-services">Web Services</a></li></ul></div></li><li class="item-470 deeper parent" style="text-align: left"><a href="https://www.codejava.net/frameworks"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Frameworks</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Frameworks</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-515" style="text-align: left"><a href="https://www.codejava.net/frameworks/spring">Spring</a></li><li class="item-981" style="text-align: left"><a href="https://www.codejava.net/frameworks/spring-boot">Spring Boot</a></li><li class="item-514" style="text-align: left"><a href="https://www.codejava.net/frameworks/hibernate">Hibernate</a></li><li class="item-516" style="text-align: left"><a href="https://www.codejava.net/frameworks/struts">Struts</a></li></ul></div></li><li class="item-472 deeper parent" style="text-align: left"><a href="https://www.codejava.net/servers"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Servers</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Servers</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-518" style="text-align: left"><a href="https://www.codejava.net/servers/tomcat">Tomcat</a></li></ul></div></li><li class="item-473" style="text-align: left"><a href="https://www.codejava.net/coding">Coding</a></li><li class="item-471 deeper parent" style="text-align: left"><a href="https://www.codejava.net/ides"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>IDEs</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>IDEs</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-517" style="text-align: left"><a href="https://www.codejava.net/ides/eclipse">Eclipse</a></li><li class="item-954" style="text-align: left"><a href="https://www.codejava.net/ides/netbeans">NetBeans</a></li></ul></div></li><li class="item-498" style="text-align: left"><a href="https://www.codejava.net/books">Books</a></li><li class="item-960 deeper parent" style="text-align: left"><a href="https://www.codejava.net/videos"><i class=" floatLeft iconSpacing_ltr fa fa-angle-left"></i>Videos</a><div class="levelHolderClass ltr" data-level="1" style="margin-left: -480px; width: 240px; min-width: 240px;"><h2 style="text-align: left"><i class="floatRight cursorPointer"></i>Videos</h2><div class="backItemClass"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#"><i class="floatRight fa fa-angle-right"></i>Back</a></div><ul class="nav-child unstyled" style="display: none;"><li class="item-967" style="text-align: left"><a href="https://www.codejava.net/videos/top-trending">Top Trending</a></li><li class="item-968" style="text-align: left"><a href="https://www.codejava.net/videos/top-java-core-and-java-ee">Top Java Core and Java EE</a></li><li class="item-969" style="text-align: left"><a href="https://www.codejava.net/videos/top-spring-and-hibernate">Top Spring and Hibernate</a></li></ul></div></li><li class="item-970" style="text-align: left"><a href="https://www.codejava.net/java-certifications">Certifications</a></li><li class="item-973" style="text-align: left"><a href="https://www.codejava.net/testing">Testing</a></li></ul></div></nav></div><div class="jf_mm_trigger"><i class="fa fa-bars"></i></div><div class="jf_mm_backout"></div><div class="bannergroup"><div class="banneritem"><script data-cfasync="false" type="text/javascript" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/728x90below_res.js"></script><div class="clr"></div></div></div></div></header><nav class="navigation" role="navigation"><ul class="nav menu nav-pills">
<li class="item-101"><a href="https://www.codejava.net/">Home</a></li><li class="item-465 active deeper parent dropdown"><a href="https://www.codejava.net/java-core" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Java Core</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-499"><a href="https://www.codejava.net/java-core/the-java-language">The Java Language</a></li><li class="item-856"><a href="https://www.codejava.net/java-core/collections">Generics &amp; Collections</a></li><li class="item-859"><a href="https://www.codejava.net/java-core/tools">Tools</a></li><li class="item-964"><a href="https://www.codejava.net/java-core/exception">Exception Handling</a></li><li class="item-965 current active"><a href="https://www.codejava.net/java-core/concurrency">Concurrency</a></li></ul></li><li class="item-850 deeper parent dropdown"><a href="https://www.codejava.net/java-se" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Java SE</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-851"><a href="https://www.codejava.net/java-se/swing">Swing</a></li><li class="item-852"><a href="https://www.codejava.net/java-se/applet">Applet</a></li><li class="item-853"><a href="https://www.codejava.net/java-se/file-io">File I/O</a></li><li class="item-854"><a href="https://www.codejava.net/java-se/graphics">2D/3D Graphics</a></li><li class="item-855"><a href="https://www.codejava.net/java-se/networking">Networking</a></li><li class="item-857"><a href="https://www.codejava.net/java-se/ftp">FTP Networking</a></li><li class="item-858"><a href="https://www.codejava.net/java-se/jdbc">JDBC</a></li></ul></li><li class="item-840 deeper parent dropdown"><a href="https://www.codejava.net/java-ee" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Java EE</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-848"><a href="https://www.codejava.net/java-ee/servlet">Servlet</a></li><li class="item-510"><a href="https://www.codejava.net/java-ee/javamail">JavaMail</a></li><li class="item-849"><a href="https://www.codejava.net/java-ee/jstl">JSTL</a></li><li class="item-513"><a href="https://www.codejava.net/java-ee/jsp">JavaServer Pages (JSP)</a></li><li class="item-980"><a href="https://www.codejava.net/java-ee/jpa">Java Persistence API</a></li><li class="item-512"><a href="https://www.codejava.net/java-ee/web-services">Web Services</a></li></ul></li><li class="item-470 deeper parent dropdown"><a href="https://www.codejava.net/frameworks" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Frameworks</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-515"><a href="https://www.codejava.net/frameworks/spring">Spring</a></li><li class="item-981"><a href="https://www.codejava.net/frameworks/spring-boot">Spring Boot</a></li><li class="item-514"><a href="https://www.codejava.net/frameworks/hibernate">Hibernate</a></li><li class="item-516"><a href="https://www.codejava.net/frameworks/struts">Struts</a></li></ul></li><li class="item-472 deeper parent dropdown"><a href="https://www.codejava.net/servers" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Servers</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-518"><a href="https://www.codejava.net/servers/tomcat">Tomcat</a></li></ul></li><li class="item-473"><a href="https://www.codejava.net/coding">Coding</a></li><li class="item-471 deeper parent dropdown"><a href="https://www.codejava.net/ides" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">IDEs</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-517"><a href="https://www.codejava.net/ides/eclipse">Eclipse</a></li><li class="item-954"><a href="https://www.codejava.net/ides/netbeans">NetBeans</a></li></ul></li><li class="item-498"><a href="https://www.codejava.net/books">Books</a></li><li class="item-960 deeper parent dropdown"><a href="https://www.codejava.net/videos" class="dropdown-toggle" data-toggle="dropdown" disabled="disabled">Videos</a><ul class="nav-child unstyled small dropdown-menu"><li class="item-967"><a href="https://www.codejava.net/videos/top-trending">Top Trending</a></li><li class="item-968"><a href="https://www.codejava.net/videos/top-java-core-and-java-ee">Top Java Core and Java EE</a></li><li class="item-969"><a href="https://www.codejava.net/videos/top-spring-and-hibernate">Top Spring and Hibernate</a></li></ul></li><li class="item-970"><a href="https://www.codejava.net/java-certifications">Certifications</a></li><li class="item-973"><a href="https://www.codejava.net/testing">Testing</a></li></ul>

<ul class="breadcrumb">
	&nbsp;&nbsp;<li><a href="https://www.codejava.net/" class="pathway">Home</a><span class="divider">&gt;</span></li><li><a href="https://www.codejava.net/java-core" class="pathway">Java Core</a><span class="divider">&gt;</span></li><li><span>Concurrency</span></li></ul>

</nav><div class="row-fluid"><style>.moduletable_search{
            margin-right: 0!important;
          }
          #sidebar{
            width: 21%!important;
            margin-left: 5px!important;
          }
          #content{
            margin-left: 10px!important;
          }</style><!-- Begin Sidebar --><div id="sidebar" class="span3"><div class="sidebar-nav"><aside><div class="moduletable"><div class="bannergroup"><div class="banneritem"><table class="rightmoduletable"><tbody><tr class="RowHeader"><td><font color="white"><b>Learn Java Concurrency:</b><br></font></td></tr><tr><td><nav><br><ul><li><a href="https://www.codejava.net/java-core/concurrency/how-to-use-threads-in-java-create-start-pause-interrupt-and-join">Java Thread Basics</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-thread-states-thread-life-cycle-in-java">Java Thread Life Cycle</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-thread-priorities-and-daemon-thread-in-java">Thread Priorities and Daemon Thread</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-thread-group-in-java">Thread Group</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-synchronization-tutorial-part-1-the-problems-of-unsynchronized-code">Java Synchronization Part 1</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-synchronization-tutorial-part-2-using-lock-and-condition-objects">Java Synchronization Part 2</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-synchronization-tutorial-part-3-using-synchronized-keyword-intrinsic-locking">Java Synchronization Part 3</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java">Deadlock, Livelock and Starvation</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-atomic-variables-in-java">Java Atomic Variables</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrency-understanding-thread-pool-and-executors">Thread Pool and Executors</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrency-executing-value-returning-tasks-with-callable-and-future">Callable and Future</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-readwritelock-and-reentrantreadwritelock-example">ReadWriteLock and ReentrantReadWriteLock</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-arrayblockingqueue-examples">ArrayBlockingQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-delayqueue-examples">DelayQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-linkedblockingqueue-example">LinkedBlockingQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-priorityblockingqueue-examples">PriorityBlockingQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-synchronousqueue-examples">SynchronousQueue Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrent-collection-concurrenthashmap-examples">ConcurrentHashMap Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrent-collection-copyonwritearraylist-examples">CopyOnWriteArrayList Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/java-concurrent-collection-copyonwritearrayset-example">CopyOnWriteArraySet Examples</a><br><br></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples">Java Fork-Join Framework </a><br><br></li></ul></nav></td><td></td></tr></tbody></table><div class="clr"></div></div></div></div><div class="moduletable"><div class="bannergroup"><div class="banneritem"><div id="sidebarads" class=""><style>.sticky {
		  position: fixed;
		  top: 0;
		}</style><br><script data-cfasync="false" type="text/javascript" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/160x600_responsive.js"></script><script>window.onscroll = function() {myFunction()};

var sidebarads = document.getElementById("sidebarads");
var sticky = sidebarads.offsetTop;

function myFunction() {
  if (window.pageYOffset >= sticky) {
	sidebarads.classList.add("sticky")
  } else {
	sidebarads.classList.remove("sticky");
  }
}</script></div><div class="clr"></div></div></div></div></aside></div></div><!-- End Sidebar --><main id="content" role="main" class="span9"><!-- Begin Content --><div id="system-message-container"><div id="system-message"></div></div><div class="item-page"><div class="page-header"><h1><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java"> Understanding Deadlock, Livelock and Starvation with Code Examples in Java</a></h1></div><div class="article-info muted"><dl class="article-info"><dt class="article-info-term">Details</dt><dd class="createdby">Written by &nbsp;<cite><a href="https://www.codejava.net/nam-ha-minh" rel="author">Nam Ha Minh</a></cite></dd><dd class="modified"><span class="icon-calendar"></span> Last Updated on 13 August 2019						&nbsp; | &nbsp;<a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java?tmpl=component&amp;print=1&amp;page=" title="Print" onclick="window.open(this.href,&#39;win2&#39;,&#39;status=no,toolbar=no,scrollbars=yes,titlebar=no,menubar=no,resizable=yes,width=640,height=480,directories=no,location=no&#39;); return false;" rel="nofollow"><span class="icon-print"></span>&nbsp;Print&nbsp;</a><a href="https://www.codejava.net/component/mailto/?tmpl=component&amp;template=protostar&amp;link=f3e643f277cf0c79b70ff7f3ea3e3963c3428c36" title="Email" onclick="window.open(this.href,&#39;win2&#39;,&#39;width=400,height=350,menubar=yes,resizable=yes&#39;); return false;"><span class="icon-envelope"></span> Email</a></dd></dl></div>This Java concurrency tutorial helps you understand the 3 problems that may happen in multi-threaded applications: &nbsp;deadlock, livelock and starvation. You will be able to identify each kind of problem so you can know to avoid them.<p></p>&nbsp;<p></p><h2>1. Understanding Deadlock</h2><strong><i>Deadlock describes a situation where two more threads are blocked because of waiting for each other forever</i></strong>. When deadlock occurs, the program hangs forever and the only thing you can do is to kill the program.<p></p>Let’s consider the account transaction example in <a href="https://www.codejava.net/java-core/concurrency/java-synchronization-tutorial-part-3-using-synchronized-keyword-intrinsic-locking" target="_blank">this tutorial</a>. Modify the maximum amount can be transferred from 10 to 200 in the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">Bank</span> class as follows:<p></p><div><div id="highlighter_633514" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java keyword">int</code> <code class="java plain">MAX_AMOUNT = </code><code class="java value">200</code><code class="java plain">;</code></div></div></td></tr></tbody></table></div></div>Look at the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">Transaction</span> class you see the amount is chosen randomly by this statement:<p></p><div><div id="highlighter_101998" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">int</code> <code class="java plain">amount = (</code><code class="java keyword">int</code><code class="java plain">) (Math.random() * Bank.MAX_AMOUNT);</code></div></div></td></tr></tbody></table></div></div>Now, recompile the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">Bank</span> and <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">Transaction</span> classes, and then run the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">TransactionTest</span> program. Guess what will happen?<p></p>You will see that the program runs for a few transactions and hangs forever, as shown in the following screenshot:<p></p><img style="display: block; margin-left: auto; margin-right: auto;" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/BankTransactionDeadlock.png" alt="BankTransactionDeadlock" width="680" height="425"><p></p>The program encounters a deadlock and cannot continue. Why can deadlock happen when we increase the maximum amount of money can be transferred among accounts?<p></p><div><script data-cfasync="false" type="text/javascript" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/336x280_responsive.js"></script></div>Let’s analyze the code to understand why.<p></p>In the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">Bank</span> class you will each account is initialized with an amount of 100. Now the maximum amount can be transferred is 200, so there will be some threads trying to transfer an amount which is greater than the account’s balance, for example:<p></p><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread 1 tries to transfer 150 from account 1 to account 2</span><p></p><span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread 2 tries to transfer 170 from account 3 to account 1</span><p></p>Account 1 has only 100 in balance so thread 1 has to wait for other threads to deposit more funds to this account. Similarly, thread 2 also has to wait because account 3 doesn’t have sufficient fund. Other threads may add funds to accounts 1 and 3, but if all threads are trying to transfer an amount greater than the account’s balance, they are waiting for each other forever. Hence deadlock occurs.<p></p>That’s why you see the program quickly runs into deadlock after few transactions have been done. It hangs and you have to press Ctrl + C to terminate the program.<p></p>You can ask why the previous version of the example runs fine. It’s because the maximum account is smaller (10) than the balance (100), so all accounts have enough fund to transfer.<p></p>&nbsp;<p></p><h3><span style="line-height: 115%;">Another Deadlock Example:</span></h3>Another common reason for deadlock problem is two or more threads attempt to acquire two locks simultaneously, but in different order. Consider the following class:<p></p><div><div id="highlighter_198441" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java preprocessor">/**</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* Business.java</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This class is used to illustrate a deadlock situtation.</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Business {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Object lock1 = </code><code class="java keyword">new</code> <code class="java plain">Object();</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java plain">Object lock2 = </code><code class="java keyword">new</code> <code class="java plain">Object();</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">foo() {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(lock1) {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(lock2) {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"foo"</code><code class="java plain">);</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">bar() {</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(lock2) {</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(lock1) {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"bar"</code><code class="java plain">);</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>As you can see, both the methods <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">foo()</span> and <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">bar()</span> try to acquire two lock objects <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">lock1</span> and <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">lock2</span> but in different order.<p></p>And consider the following test program:<p></p><div><div id="highlighter_639448" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java preprocessor">/**</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* BusinessTest1.java</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This program tests for deadlock situtation.</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">BusinessTest1 {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args) {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Business business = </code><code class="java keyword">new</code> <code class="java plain">Business();</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread t1 = </code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">new</code> <code class="java plain">Runnable() {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run() {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">business.foo();</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">});</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">t1.start();</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread t2 = </code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">new</code> <code class="java plain">Runnable() {</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run() {</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">business.bar();</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">});</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">t2.start();</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>This program creates two threads, one executes the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">foo()</span> method and another executes the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">bar()</span> method on a shared instance of the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">Business</span> class. But deadlock is likely never to occur because one thread can execute and exit a method very quickly so the other thread have chance to acquire the locks.<p></p>Let’s modify this test program in order to create 10 threads for executing <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">foo()</span> and other 10 threads for executing <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">bar()</span> as follows:<p></p><div><div id="highlighter_456578" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java preprocessor">/**</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* BusinessTest2.java</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This program tests for deadlock situtation.</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">BusinessTest2 {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args) {</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Business business = </code><code class="java keyword">new</code> <code class="java plain">Business();</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; </code><code class="java value">10</code><code class="java plain">; i++) {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">new</code> <code class="java plain">Runnable() {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run() {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">business.foo();</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}).start();</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; </code><code class="java value">10</code><code class="java plain">; i++) {</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">new</code> <code class="java plain">Runnable() {</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run() {</code></div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">business.bar();</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}).start();</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>Run this program several times (4-10 times), you will see that sometimes the program runs fine:<p></p><img style="display: block; margin-left: auto; margin-right: auto;" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/TestDeadlockRunFine.png" alt="TestDeadlockRunFine"><p></p>But sometimes it hangs like this:<p></p><img style="display: block; margin-left: auto; margin-right: auto;" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/TestDeadlockHang.png" alt="TestDeadlockHang"><p></p>Why? It’s because deadlock happens. Let me explain how:<p></p><p style="margin-left: 0.5in;">- Thread 1 enters <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">foo()</span> method and it acquires <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">lock1</span>. At the same time, thread 2 enters <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">bar()</span> method and it acquires <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">lock2</span>.</p><p style="margin-left: 0.5in;">- Thread 1 tries to acquire <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">lock2</span> which is currently held by thread 2, hence thread 1 blocks.</p><p style="margin-left: 0.5in;">- Thread 2 tries to acquire <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">lock1</span> which is currently held by thread 1, hence thread 2 blocks.</p>Both threads block each other forever, deadlock occurs and the program hangs.<p></p>&nbsp;<p></p><h3><span style="line-height: 115%;">So how to avoid deadlock?</span></h3>Java doesn’t have anything to escape deadlock state when it occurs, so you have to design your program to avoid deadlock situation. Avoid acquiring more than one lock at a time. If not, make sure that you acquire multiple locks in consistent order. In the above example, you can avoid deadlock by synchronize two locks in the same order in both methods:<p></p><div><div id="highlighter_101745" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">foo() {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(lock1) {</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(lock2) {</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"foo"</code><code class="java plain">);</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number7 index6 alt2"><code class="java plain">}</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">bar() {</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(lock1) {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">synchronized</code> <code class="java plain">(lock2) {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"bar"</code><code class="java plain">);</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number15 index14 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>Also try to shrink the synchronized blocks as small as possible to avoid unnecessary locking on code that doesn’t need to be synchronized.<p></p>&nbsp;<p></p><h2>2. Understanding Livelock</h2><strong><i>Livelock describes situation where two threads are busy responding to actions of each other</i></strong>. They keep repeating a particular code so the program is unable to make further progress:<p></p><p style="margin-left: 0.5in;">Thread 1 acts as a response to action of thread 2</p><p style="margin-left: 0.5in;">Thread 2 acts as a response to action of thread 1</p>Unlike deadlock, threads are not blocked when livelock occurs. They are simply too busy responding to each other to resume work. In other words, the program runs into an infinite loop and cannot proceed further.<p></p><h2>&nbsp;</h2><h3><span style="line-height: 115%;">A Livelock Example:</span></h3>Let’s see an example: a criminal kidnaps a hostage and he asks for ransom in order to release the hostage. A police agrees to give the criminal the money he wants once the hostage is released. The criminal releases the hostage only when he gets the money. Both are waiting for each other to act first, hence livelock.<p></p>Here’s the code of this example.<p></p>Criminal class:<p></p><div><div id="highlighter_410769" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java preprocessor">/**</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* Criminal.java</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This class is used to demonstrate livelock situation</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Criminal {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">boolean</code> <code class="java plain">hostageReleased = </code><code class="java keyword">false</code><code class="java plain">;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">releaseHostage(Police police) {</code></div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code> <code class="java plain">(!police.isMoneySent()) {</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Criminal: waiting police to give ransom"</code><code class="java plain">);</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code> <code class="java plain">{</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread.sleep(</code><code class="java value">1000</code><code class="java plain">);</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(InterruptedException ex) {</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ex.printStackTrace();</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Criminal: released hostage"</code><code class="java plain">);</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.hostageReleased = </code><code class="java keyword">true</code><code class="java plain">;</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">boolean</code> <code class="java plain">isHostageReleased() {</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">this</code><code class="java plain">.hostageReleased;</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number29 index28 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>Police class:<p></p><div><div id="highlighter_261552" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java preprocessor">/**</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* Police.java</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This class is used to demonstrate livelock situation</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Police {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">private</code> <code class="java keyword">boolean</code> <code class="java plain">moneySent = </code><code class="java keyword">false</code><code class="java plain">;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">giveRansom(Criminal criminal) {</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code> <code class="java plain">(!criminal.isHostageReleased()) {</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Police: waiting criminal to release hostage"</code><code class="java plain">);</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code> <code class="java plain">{</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread.sleep(</code><code class="java value">1000</code><code class="java plain">);</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(InterruptedException ex) {</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ex.printStackTrace();</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Police: sent money"</code><code class="java plain">);</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">this</code><code class="java plain">.moneySent = </code><code class="java keyword">true</code><code class="java plain">;</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">boolean</code> <code class="java plain">isMoneySent() {</code></div><div class="line number28 index27 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java keyword">this</code><code class="java plain">.moneySent;</code></div><div class="line number29 index28 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>Test class:<p></p><div><div id="highlighter_803550" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java preprocessor">/**</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* HostageRescueLivelock.java</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This class is used to demonstrate livelock situation</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">HostageRescueLivelock {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">Police police = </code><code class="java keyword">new</code> <code class="java plain">Police();</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">Criminal criminal = </code><code class="java keyword">new</code> <code class="java plain">Criminal();</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args) {</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread t1 = </code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">new</code> <code class="java plain">Runnable() {</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run() {</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">police.giveRansom(criminal);</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">});</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">t1.start();</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Thread t2 = </code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">new</code> <code class="java plain">Runnable() {</code></div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run() {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">criminal.releaseHostage(police);</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">});</code></div><div class="line number26 index25 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">t2.start();</code></div><div class="line number27 index26 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>Run this program and you will see that it runs into a loop which never terminates:<p></p><img style="display: block; margin-left: auto; margin-right: auto;" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/LivelockExample.png" alt="LivelockExample"><p></p>So how to avoid livelock? There’s no general guideline, you have to design your program to avoid livelock situation.<p></p>&nbsp;<p></p><h2>3. Understanding Starvation</h2><strong><i>Starvation describes a situation where a greedy thread holds a resource for a long time so other threads are blocked forever</i></strong>. The blocked threads are waiting to acquire the resource but they never get a chance. Thus they starve to death.<p></p>Starvation can occur due to the following reasons:<p></p><p style="margin-left: 0.5in;">- Threads are blocked infinitely because a thread takes long time to execute some synchronized code (e.g. heavy I/O operations or infinite loop).</p><p style="margin-left: 0.5in;">- A thread doesn’t get CPU’s time for execution because it has low priority as compared to other threads which have higher priority.</p><p style="margin-left: 0.5in;">- Threads are waiting on a resource forever but they remain waiting forever because other threads are constantly notified instead of the hungry ones.</p>When a starvation situation occurs, the program is still running but doesn’t run to completion because some threads are not executed.<p></p>&nbsp;<p></p><h3><span style="line-height: 115%;">A Starvation Example:</span></h3>Let’s see an example. Suppose we have a <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">Worker</span> class like this:<p></p><div><div id="highlighter_365547" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">import</code> <code class="java plain">java.io.*;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="java preprocessor">/**</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* Worker.java</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This class is used to demonstrate starvation situation.</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number8 index7 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Worker {</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">synchronized</code> <code class="java keyword">void</code> <code class="java plain">work() {</code></div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String name = Thread.currentThread().getName();</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String fileName = name + </code><code class="java string">".txt"</code><code class="java plain">;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code> <code class="java plain">(</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">BufferedWriter writer = </code><code class="java keyword">new</code> <code class="java plain">BufferedWriter(</code><code class="java keyword">new</code> <code class="java plain">FileWriter(fileName));</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">) {</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">writer.write(</code><code class="java string">"Thread "</code> <code class="java plain">+ name + </code><code class="java string">" wrote this mesasge"</code><code class="java plain">);</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(IOException ex) {</code></div><div class="line number19 index18 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ex.printStackTrace();</code></div><div class="line number20 index19 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">while</code> <code class="java plain">(</code><code class="java keyword">true</code><code class="java plain">) {</code></div><div class="line number23 index22 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(name + </code><code class="java string">" is working"</code><code class="java plain">);</code></div><div class="line number24 index23 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number25 index24 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number26 index25 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>This class has a synchronized method <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">work()</span> that creates a text file <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">&lt;thread-name&gt;.txt</span> and writes a message to it. Then it repeatedly prints a message:<p></p><div><div id="highlighter_788084" class="syntaxhighlighter  text"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="text plain">&lt;thread-name&gt; is working</code></div></div></td></tr></tbody></table></div></div>And the following program creates 10 threads that call the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">work()</span> method on a shared instance of the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">Worker</span> class:<p></p><div><div id="highlighter_142914" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java preprocessor">/**</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* StarvationExample.java</code></div><div class="line number3 index2 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* This class is used to demonstrate starvation situation.</code></div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;</code><code class="java preprocessor">* @author www.codejava.net</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java preprocessor">*/</code></div><div class="line number6 index5 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">StarvationExample {</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args) {</code></div><div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Worker worker = </code><code class="java keyword">new</code> <code class="java plain">Worker();</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">0</code><code class="java plain">; i &lt; </code><code class="java value">10</code><code class="java plain">; i++) {</code></div><div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">new</code> <code class="java plain">Thread(</code><code class="java keyword">new</code> <code class="java plain">Runnable() {</code></div><div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run() {</code></div><div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">worker.work();</code></div><div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}).start();</code></div><div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number18 index17 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number19 index18 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>Compile and run this program and you will see that there’s only one thread gets executed:<p></p><img style="display: block; margin-left: auto; margin-right: auto;" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/StarvationExample.png" alt="StarvationExample"><p></p>According to the code logic, each thread should create a text file with the name of <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">&lt;thread-name&gt;.txt</span> but you see only one gets created, e.g. <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">thread-1.txt</span>. That means other threads are unable to execute the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">work()</span> method.<p></p>Why does this happen? It’s because the while loop runs forever so that the first executed thread never release the lock, causing other threads to wait forever.<p></p>A solution to solve this starvation problem is to make the current thread waits for a specified amount of time so other threads have chance to acquire the lock on the <span style="font-size: 10pt; line-height: 115%; font-family: &#39;Courier New&#39;;">Worker</span> object:<p></p><div><div id="highlighter_296971" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">while</code> <code class="java plain">(</code><code class="java keyword">true</code><code class="java plain">) {</code></div><div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(name + </code><code class="java string">" is working"</code><code class="java plain">);</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code> <code class="java plain">{</code></div><div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">wait(</code><code class="java value">1000</code><code class="java plain">);</code></div><div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(InterruptedException ex) {</code></div><div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">ex.printStackTrace();</code></div><div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>Recompile and run this program again and you will see that all threads get executed, proven by 10 text files created and in the output:<p></p><img style="display: block; margin-left: auto; margin-right: auto;" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/StarvationSolution.png" alt="StarvationSolution"><p></p>In general, you should design your program to avoid starvation situation.<p></p>&nbsp;<p></p><h2>4. Conclusion</h2>So far I have helped you identify the 3 problems which can happen in multi-threading Java programs: deadlock, livelock and starvation. &nbsp;Livelock and starvation are less common than deadlock but they still can occur. To summarize, the following points help you understand the key differences of these problems:<p></p><p style="margin-left: 0.5in;">- <strong>Deadlock</strong>:&nbsp; All threads are blocked, the program hangs forever.</p><p style="margin-left: 0.5in;">- <strong>Livelock</strong>: No threads blocked but they run into infinite loops. The program is still running but unable to make further progress.</p><p style="margin-left: 0.5in;">- <strong>Starvation</strong>: Only one thread is running, and other threads are waiting forever.</p>You should be aware of these problems which can occur with multiple threads and synchronization, and design your programs to avoid them.<p></p>&nbsp;<p></p><h3 style="padding: 0px; font-family: &#39;Open Sans&#39;, sans-serif; color: #333333;">Other Java Concurrency Tutorials:</h3><ul style="font-family: Arial, Helvetica, sans-serif; font-size: 14.3px;"><li style="margin: 0px; padding: 0px;"><a style="margin: 0px; padding: 0px; color: #095197; cursor: pointer;" href="https://www.codejava.net/java-core/concurrency/how-to-use-threads-in-java-create-start-pause-interrupt-and-join" target="_blank">How to use Threads in Java (create, start, pause, interrupt and join)</a></li><li style="margin: 0px; padding: 0px;"><a style="margin: 0px; padding: 0px; color: #095197; cursor: pointer;" href="https://www.codejava.net/java-core/concurrency/understanding-java-fork-join-framework-with-examples" target="_blank">Understanding Java Fork-Join Framework with Examples</a></li><li style="margin: 0px; padding: 0px;"><a style="margin: 0px; padding: 0px; color: #095197; cursor: pointer;" href="https://www.codejava.net/java-core/concurrency/java-synchronization-tutorial-part-1-the-problems-of-unsynchronized-code" target="_blank">Java Synchronization Tutorial</a></li><li style="margin: 0px; padding: 0px;"><a style="margin: 0px; padding: 0px; color: #095197; cursor: pointer;" href="https://www.codejava.net/java-core/concurrency/java-concurrency-understanding-thread-pool-and-executors" target="_blank">Understand Thread Pool and Executors</a></li><li><a href="https://www.codejava.net/java-core/concurrency/understanding-atomic-variables-in-java" target="_blank">Understanding Atomic Variables in Java</a></li></ul><div><br><h3>About the Author:</h3><img src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/NamAuthor.png" align="left" style="padding: 0px 10px 15px 0px"><cite><a href="https://www.codejava.net/nam-ha-minh" target="_blank" rel="author">Nam Ha Minh</a></cite> is certified Java programmer (SCJP and SCWCD). He started programming with Java in the time of Java 1.4 and has been falling in love with Java since then. Make friend with him on <a href="https://www.facebook.com/namjavaprogrammer" rel="nofollow" target="_blank">Facebook</a>.<br><br><script data-cfasync="false" type="text/javascript" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/750x300.js"></script></div><input type="hidden" id="jcaid" value="687"><div id="jc"><h4>Add comment</h4><a id="addcomments" href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#addcomments"></a><form id="comments-form" name="comments-form" action="javascript:void(null);"><p><span><input id="comments-form-name" type="text" name="name" maxlength="20" size="22" tabindex="1" placeholder="Name" required=""> &nbsp;&nbsp;&nbsp; <input id="comments-form-email" type="text" name="email" value="" size="22" tabindex="2" placeholder="E-mail" required=""></span></p><p><span><span class="bbcode" style="display: block;"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" id="bbcode-b" title="Bold" class="bbcode-b" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" id="bbcode-i" title="Italic" class="bbcode-i" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" id="bbcode-u" title="Underlined" class="bbcode-u" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" id="bbcode-s" title="Striked" class="bbcode-s" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" id="bbcode-img" title="Image" class="bbcode-img" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" id="bbcode-url" title="Link" class="bbcode-url" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" id="bbcode-quote" title="Quote" class="bbcode-quote" style="display: block;"></a><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" id="bbcode-list" title="List" class="bbcode-list" style="display: block;"></a></span><textarea id="comments-form-comment" name="comment" cols="50" rows="6" tabindex="5" placeholder="comment" required=""></textarea><div class="grippie"><span class="counter"> <span>500</span>  symbols left</span></div></span></p><p><span><input class="checkbox" id="comments-form-subscribe" type="checkbox" name="subscribe" value="1" tabindex="5"><label for="comments-form-subscribe">Notify me of follow-up comments</label><br></span></p><p><span></span></p><div class="g-recaptcha" data-sitekey="6Leb1UsUAAAAAMz79FhT2G1eTmOUpvd2E82eUp2F"><div style="width: 304px; height: 78px;"><div><iframe src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/anchor.html" width="304" height="78" role="presentation" name="a-i4ko71bpqbzd" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox"></iframe></div><textarea id="g-recaptcha-response" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div></div><p></p><div id="comments-form-buttons"><div class="btn" id="comments-form-send"><button id="btnSendComment" title="Send (Ctrl+Enter)">Send</button></div><div class="btn" id="comments-form-cancel" style="display:none;"><div><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" tabindex="8" onclick="return false;" title="Cancel">Cancel</a></div></div><div style="clear:both;"></div></div><div><input type="hidden" id="object_id" name="object_id" value="687"><input type="hidden" id="object_group" name="object_group" value="com_content"></div></form><div id="comments"><h4><a id="comment" name="comment">Comments</a><a class="refresh" href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" title="Refresh comments list" id="btnRefreshComment1">&nbsp;</a></h4><div id="comments-list" class="comments-list"><div class="even" id="comment-item-16676"><div class="rbox"><div class="comment-box"><a class="comment-anchor" href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#comment-16676" id="comment-16676">#4</a><span class="comment-author">DANYLO PEREIRA DOS S</span><span class="comment-date">2019-08-13 12:32</span><div class="comment-body" id="comment-body-16676">Thank you, man... great stuff!!</div><span class="comments-buttons"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" class="qclnk" qid="16676">Quote</a></span></div><div class="clear"></div></div></div><div class="odd" id="comment-item-16582"><div class="rbox"><div class="comment-box"><a class="comment-anchor" href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#comment-16582" id="comment-16582">#3</a><span class="comment-author">Raju</span><span class="comment-date">2019-07-01 20:24</span><div class="comment-body" id="comment-body-16582">Very good explanation with simple example</div><span class="comments-buttons"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" class="qclnk" qid="16582">Quote</a></span></div><div class="clear"></div></div></div><div class="even" id="comment-item-6114"><div class="rbox"><div class="comment-box"><a class="comment-anchor" href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#comment-6114" id="comment-6114">#2</a><span class="comment-author">Taras</span><span class="comment-date">2017-09-05 17:16</span><div class="comment-body" id="comment-body-6114">Amazing article! Thank you!</div><span class="comments-buttons"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" class="qclnk" qid="6114">Quote</a></span></div><div class="clear"></div></div></div><div class="odd" id="comment-item-5185"><div class="rbox"><div class="comment-box"><a class="comment-anchor" href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#comment-5185" id="comment-5185">#1</a><span class="comment-author">Samuel</span><span class="comment-date">2017-05-02 04:35</span><div class="comment-body" id="comment-body-5185">Really good Really good Really good</div><span class="comments-buttons"><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" class="qclnk" qid="5185">Quote</a></span></div><div class="clear"></div></div></div></div><div id="comments-list-footer"><a class="refresh" href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java#" title="Refresh comments list" id="btnRefreshComment2">Refresh comments list</a></div></div></div></div><!-- End Content --></main></div></div></div><!-- Footer --><footer class="footer" role="contentinfo"><div class="container"><p><font size="+1">About CodeJava.net:</font><br> CodeJava.net shares Java tutorials, code examples and sample projects for programmers at all levels.<br> CodeJava.net is created and managed by <a href="https://www.codejava.net/nam-ha-minh">Nam Ha Minh</a> - a passionate programmer. <br></p><nav class="nav-footer"><a href="https://www.codejava.net/about">About</a>&nbsp; <a href="https://www.codejava.net/contact">Contact</a>&nbsp; <a href="https://www.codejava.net/terms">Terms of Use</a>&nbsp; <a href="https://www.codejava.net/privacy-policy">Privacy Policy</a>&nbsp; <a href="https://www.codejava.net/sitemap">Sitemap</a>&nbsp; <a href="https://www.facebook.com/codejava" target="_blank" rel="nofollow"><b>F</b>acebook</a>&nbsp; <a href="https://twitter.com/codejavadotnet" target="_blank" rel="nofollow"><b>T</b>witter</a>&nbsp;<a href="https://www.youtube.com/codejava" target="_blank" rel="nofollow"><b>Y</b>ouTube</a>&nbsp; </nav><p><br><font size="-3">Copyright © 2012 - 2020 CodeJava.net, all rights reserved.</font></p></div></footer><script src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/ee519081b2451f336765eca967cf07c4.js" defer="" type="text/javascript"></script><noscript>JavaScript is currently disabled.</noscript><div style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility 0s linear 0.3s, opacity 0.3s linear 0s; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;"><div style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;"></div><div class="g-recaptcha-bubble-arrow" style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;"></div><div class="g-recaptcha-bubble-arrow" style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;"></div><div style="z-index: 2000000000; position: relative;"><iframe title="recaptcha challenge" src="./Understanding Deadlock, Livelock and Starvation with Code Examples in Java_files/bframe.html" name="c-i4ko71bpqbzd" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox" style="width: 100%; height: 100%;"></iframe></div></div></body></html>